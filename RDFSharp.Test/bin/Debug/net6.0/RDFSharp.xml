<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RDFSharp</name>
    </assembly>
    <members>
        <member name="T:RDFSharp.Model.RDFCollection">
            <summary>
            RDFCollection represents a generic collection in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemType">
            <summary>
            Type of the items of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ReificationSubject">
            <summary>
            Subject of the collection's reification (rdf:nil when the collection is empty)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.InternalReificationSubject">
            <summary>
            Internal subject of the collection's reification
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemsCount">
            <summary>
            Count of the collection's items
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.ItemsEnumerator">
            <summary>
            Gets the enumerator on the collection's items for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.AcceptDuplicates">
            <summary>
            Flag indicating that this collection exceptionally accepts duplicates
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFCollection.Items">
            <summary>
            List of the items collected by the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.#ctor(RDFSharp.Model.RDFModelEnums.RDFItemTypes)">
            <summary>
            Default ctor to build an empty collection of the given type
            (initial configuration of the collection is "rdf:Nil")
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.System#Collections#Generic#IEnumerable{RDFSharp#Query#RDFPatternMember}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the collection's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the collection's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.AddItem(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given item to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.AddItem(RDFSharp.Model.RDFLiteral)">
            <summary>
            Adds the given item to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.AddItemInternal(RDFSharp.Query.RDFPatternMember)">
            <summary>
            Adds the given item to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.RemoveItem(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the given item from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.RemoveItem(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the given item from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.RemoveItemInternal(RDFSharp.Query.RDFPatternMember)">
            <summary>
            Removes the given item from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.ClearItems">
            <summary>
            Removes all the items from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFCollection.ReifyCollection">
            <summary>
            Builds the reification graph of the collection
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFContainer">
            <summary>
            RDFContainer represents a generic container in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ContainerType">
            <summary>
            Type of the container
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemType">
            <summary>
            Type of the items of the container
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ReificationSubject">
            <summary>
            Subject of the container's reification
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemsCount">
            <summary>
            Count of the container's items
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.ItemsEnumerator">
            <summary>
            Gets the enumerator on the container's items for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFContainer.Items">
            <summary>
            List of the items contained in the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.#ctor(RDFSharp.Model.RDFModelEnums.RDFContainerTypes,RDFSharp.Model.RDFModelEnums.RDFItemTypes)">
            <summary>
            Default ctor to build an empty container of the given flavor and given type
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.System#Collections#Generic#IEnumerable{RDFSharp#Query#RDFPatternMember}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the container's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the container's items
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.AddItem(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given item to the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.AddItem(RDFSharp.Model.RDFLiteral)">
            <summary>
            Adds the given item to the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.AddItemInternal(RDFSharp.Query.RDFPatternMember)">
            <summary>
            Adds the given item to the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.RemoveItem(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the given item from the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.RemoveItem(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the given item from the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.ClearItems">
            <summary>
            Removes all the items from the container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFContainer.ReifyContainer">
            <summary>
            Builds the reification graph of the container:<br/>
            Subject -> rdf:type -> [rdf:Bag|rdf:Seq|rdf:Alt]<br/>
            Subject -> rdf:_N   -> item(N)
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFDataSource">
            <summary>
            RDFDataSource is the foundation class for modeling RDF data sources
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDataSource.IsGraph">
            <summary>
            Checks if this data source is a graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDataSource.IsStore">
            <summary>
            Checks if this data source is a store
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDataSource.IsFederation">
            <summary>
            Checks if this data source is a federation
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDataSource.IsSPARQLEndpoint">
            <summary>
            Checks if this data source is a SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFGraph">
            <summary>
            RDFGraph represents a graph in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.Context">
            <summary>
            Uri of the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.TriplesCount">
            <summary>
            Count of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.TriplesEnumerator">
            <summary>
            Gets the enumerator on the graph's triples for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.GraphIndex">
            <summary>
            Index on the triples of the graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraph.Triples">
            <summary>
            List of triples embedded into the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.#ctor">
            <summary>
            Builds an empty graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.#ctor(System.Collections.Generic.List{RDFSharp.Model.RDFTriple})">
            <summary>
            Builds a graph with the given list of triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToString">
            <summary>
            Gives the string representation of the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.Equals(RDFSharp.Model.RDFGraph)">
            <summary>
            Performs the equality comparison between two graphs
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFTriple}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the graph's triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the graph's triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SetContext(System.Uri)">
            <summary>
            Sets the context of the graph to the given absolute Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Adds the given triple to the graph, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddContainer(RDFSharp.Model.RDFContainer)">
            <summary>
            Adds the given container to the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.AddCollection(RDFSharp.Model.RDFCollection)">
            <summary>
            Adds the given collection to the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Removes the given triple from the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the triples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubjectPredicate(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubjectObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesBySubjectLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the triples with the given subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByPredicateObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the triples with the given predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.RemoveTriplesByPredicateLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the triples with the given predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ClearTriples">
            <summary>
            Clears the triples and metadata of the graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.UnreifyTriples">
            <summary>
            Turns back the reified triples into their compact representation
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ContainsTriple(RDFSharp.Model.RDFTriple)">
            <summary>
            Checks if the graph contains the given triple
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets the subgraph containing triples with the specified resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.SelectTriplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets the subgraph containing triples with the specified literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.IntersectWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new intersection graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.UnionWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new union graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.DifferenceWith(RDFSharp.Model.RDFGraph)">
            <summary>
            Builds a new difference graph from this graph and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToFile(RDFSharp.Model.RDFModelEnums.RDFFormats,System.String)">
            <summary>
            Writes the graph into a file in the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToFileAsync(RDFSharp.Model.RDFModelEnums.RDFFormats,System.String)">
            <summary>
            Asynchronously writes the graph into a file in the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToStream(RDFSharp.Model.RDFModelEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Writes the graph into a stream in the given RDF format (at the end the stream is closed).
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToStreamAsync(RDFSharp.Model.RDFModelEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Asynchronously writes the graph into a stream in the given RDF format (at the end the stream is closed).
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToDataTable">
            <summary>
            Writes the graph into a datatable with "Subject-Predicate-Object" columns
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.ToDataTableAsync">
            <summary>
            Asynchronously writes the graph into a datatable with "Subject-Predicate-Object" columns
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromFile(RDFSharp.Model.RDFModelEnums.RDFFormats,System.String)">
            <summary>
            Reads a graph from a file of the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromFileAsync(RDFSharp.Model.RDFModelEnums.RDFFormats,System.String)">
            <summary>
            Asynchronously reads a graph from a file of the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromStream(RDFSharp.Model.RDFModelEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Reads a graph from a stream of the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromStreamAsync(RDFSharp.Model.RDFModelEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Asynchronously reads a graph from a stream of the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromDataTable(System.Data.DataTable)">
            <summary>
            Reads a graph from a datatable with "Subject-Predicate-Object" columns.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromDataTableAsync(System.Data.DataTable)">
            <summary>
            Asynchronously reads a graph from a datatable with "Subject-Predicate-Object" columns.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromUri(System.Uri,System.Int32)">
            <summary>
            Reads a graph by trying to dereference the given Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraph.FromUriAsync(System.Uri,System.Int32)">
            <summary>
            Asynchronously reads a graph by trying to dereference the given Uri
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFGraphIndex">
            <summary>
            RDFGraphIndex represents an automatically managed in-memory index structure for the triples of a graph.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Subjects">
            <summary>
            Index on the subjects of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Predicates">
            <summary>
            Index on the predicates of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Objects">
            <summary>
            Index on the objects of the graph's triples
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFGraphIndex.Literals">
            <summary>
            Index on the literals of the graph's triples
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFGraphIndex.EmptyHashSet">
            <summary>
            Empty hashset to be returned in case of index miss
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.#ctor">
            <summary>
            Default-ctor for an empty graph index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.AddIndex(RDFSharp.Model.RDFTriple)">
            <summary>
            Adds the given triple to the SPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.RemoveIndex(RDFSharp.Model.RDFTriple)">
            <summary>
            Removes the given triple from the SPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.ClearIndex">
            <summary>
            Clears the index
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the triples indexed by the given object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFGraphIndex.SelectIndexByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the triples indexed by the given literal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFLiteral">
            <summary>
            RDFLiteral represents a generic literal in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFLiteral.Value">
            <summary>
            Value of the literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLiteral.ToString">
            <summary>
            Gives the string representation of the literal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums">
            <summary>
            RDFModelEnums represents a collector for all the enumerations used by the "RDFSharp.Model" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFFormats">
            <summary>
            RDFFormats represents an enumeration for supported RDF graph serialization data formats.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFFormats.NTriples">
            <summary>
            N-Triples serialization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFFormats.Turtle">
            <summary>
            Turtle serialization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFFormats.TriX">
            <summary>
            TriX serialization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFFormats.RdfXml">
            <summary>
            XML serialization
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFTripleFlavors">
            <summary>
            RDFTripleFlavors represents an enumeration for possible triple pattern flavors.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFTripleFlavors.SPO">
            <summary>
            Indicates that the object of the triple is a resource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFTripleFlavors.SPL">
            <summary>
            Indicates that the object of the triple is a literal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFDatatypes">
            <summary>
            RDFDatatypes represents an enumeration for supported datatypes (RDF/RDFS/XSD).
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.RDFS_LITERAL">
            <summary>
            http://www.w3.org/2000/01/rdf-schema#Literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.RDF_XMLLITERAL">
            <summary>
            http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.RDF_HTML">
            <summary>
            http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.RDF_JSON">
            <summary>
            http://www.w3.org/1999/02/22-rdf-syntax-ns#JSON
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_STRING">
            <summary>
            http://www.w3.org/2001/XMLSchema#string
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_BOOLEAN">
            <summary>
            http://www.w3.org/2001/XMLSchema#boolean
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DECIMAL">
            <summary>
            http://www.w3.org/2001/XMLSchema#decimal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_FLOAT">
            <summary>
            http://www.w3.org/2001/XMLSchema#float
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DOUBLE">
            <summary>
            http://www.w3.org/2001/XMLSchema#double
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_POSITIVEINTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#positiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NEGATIVEINTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#negativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NONPOSITIVEINTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#nonPositiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NONNEGATIVEINTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#nonNegativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_INTEGER">
            <summary>
            http://www.w3.org/2001/XMLSchema#integer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_LONG">
            <summary>
            http://www.w3.org/2001/XMLSchema#long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_INT">
            <summary>
            http://www.w3.org/2001/XMLSchema#int
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_SHORT">
            <summary>
            http://www.w3.org/2001/XMLSchema#short
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_BYTE">
            <summary>
            http://www.w3.org/2001/XMLSchema#byte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDLONG">
            <summary>
            http://www.w3.org/2001/XMLSchema#unsignedLong
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDINT">
            <summary>
            http://www.w3.org/2001/XMLSchema#unsignedInt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDSHORT">
            <summary>
            http://www.w3.org/2001/XMLSchema#unsignedShort
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_UNSIGNEDBYTE">
            <summary>
            http://www.w3.org/2001/XMLSchema#unsignedByte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DURATION">
            <summary>
            http://www.w3.org/2001/XMLSchema#duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DATETIME">
            <summary>
            http://www.w3.org/2001/XMLSchema#dateTime
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DATETIMESTAMP">
            <summary>
            http://www.w3.org/2001/XMLSchema#dateTimeStamp
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_DATE">
            <summary>
            http://www.w3.org/2001/XMLSchema#date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_TIME">
            <summary>
            http://www.w3.org/2001/XMLSchema#time
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GYEAR">
            <summary>
            http://www.w3.org/2001/XMLSchema#gYear
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GMONTH">
            <summary>
            http://www.w3.org/2001/XMLSchema#gMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GDAY">
            <summary>
            http://www.w3.org/2001/XMLSchema#gDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GYEARMONTH">
            <summary>
            http://www.w3.org/2001/XMLSchema#gYearMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_GMONTHDAY">
            <summary>
            http://www.w3.org/2001/XMLSchema#gMonthDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_HEXBINARY">
            <summary>
            http://www.w3.org/2001/XMLSchema#hexBinary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_BASE64BINARY">
            <summary>
            http://www.w3.org/2001/XMLSchema#base64Binary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_ANYURI">
            <summary>
            http://www.w3.org/2001/XMLSchema#anyURI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_QNAME">
            <summary>
            http://www.w3.org/2001/XMLSchema#QName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NOTATION">
            <summary>
            http://www.w3.org/2001/XMLSchema#NOTATION
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_LANGUAGE">
            <summary>
            http://www.w3.org/2001/XMLSchema#language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NORMALIZEDSTRING">
            <summary>
            http://www.w3.org/2001/XMLSchema#normalizedString
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_TOKEN">
            <summary>
            http://www.w3.org/2001/XMLSchema#token
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NMTOKEN">
            <summary>
            http://www.w3.org/2001/XMLSchema#NMToken
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NAME">
            <summary>
            http://www.w3.org/2001/XMLSchema#Name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_NCNAME">
            <summary>
            http://www.w3.org/2001/XMLSchema#NCName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFDatatypes.XSD_ID">
            <summary>
            http://www.w3.org/2001/XMLSchema#ID
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFContainerTypes">
            <summary>
            RDFContainerTypes represents an enumeration for supported container types.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFContainerTypes.Bag">
            <summary>
            Represents an unordered list which allows duplicates
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFContainerTypes.Seq">
            <summary>
            Represents an ordered list which allows duplicates
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFContainerTypes.Alt">
            <summary>
            Represents an unordered list which does not allow duplicates
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelEnums.RDFItemTypes">
            <summary>
            RDFItemTypes represents an enumeration for acceptable RDFContainer and RDFCollection item types.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFItemTypes.Resource">
            <summary>
            Indicates that a container/collection accepts only resources
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelEnums.RDFItemTypes.Literal">
            <summary>
            Indicates that a container/collection accepts only literals
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelException">
            <summary>
            RDFModelException represents an exception thrown during manipulation of RDF data models.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFModelException
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFModelException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFModelException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFModelException
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFModelUtilities">
            <summary>
            RDFModelUtilities is a collector of reusable utility methods for RDF model management
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.CreateHash(System.String)">
            <summary>
            Creates a unique long representation of the given string
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.UTF8_NoBOM">
            <summary>
            UTF8 encoding which does not emit BOM (for better OS interoperability)
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexU8">
            <summary>
            Regex to catch 8-byte unicodes
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.regexU4">
            <summary>
            Regex to catch 4-byte unicodes
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.hexBinary">
            <summary>
            Regex to catch xsd:hexBinary typed literals
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.AlternativesBoolTrue">
            <summary>
            Alternative representations of boolean True
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFModelUtilities.AlternativesBoolFalse">
            <summary>
            Alternative representations of boolean False
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetUriFromString(System.String)">
            <summary>
            Gets the Uri corresponding to the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.RemapUriForDereference(System.Uri)">
            <summary>
            Searches the given Uri in the namespace register for getting its dereferenceable representation;<br/>
            if not found, just returns the given Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ASCII_To_Unicode(System.String)">
            <summary>
            Turns back ASCII-encoded Unicodes into Unicodes.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.Unicode_To_ASCII(System.String)">
            <summary>
            Turns Unicodes into ASCII-encoded Unicodes.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.EscapeControlCharsForXML(System.String)">
            <summary>
            Replaces character controls for XML compatibility
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.TrimEnd(System.String,System.String)">
            <summary>
            Trims the end of the given source string searching for the given value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetShortUri(System.Uri)">
            <summary>
            Gets the short representation of the given Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.SelectTriples(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the triples corresponding to the given pattern from the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.DeserializeCollectionFromGraph(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFModelEnums.RDFTripleFlavors)">
            <summary>
            Rebuilds the collection represented by the given resource within the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.DetectCollectionFlavorFromGraph(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFResource)">
            <summary>
            Detects the flavor (SPO/SPL) of the collection represented by the given resource within the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetGraphNamespaces(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets the list of namespaces used within the triples of the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetDatatypeFromString(System.String)">
            <summary>
            Parses the given string in order to give the corresponding datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.GetDatatypeFromEnum(RDFSharp.Model.RDFModelEnums.RDFDatatypes)">
            <summary>
            Gives the string representation of the given datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFModelUtilities.ValidateTypedLiteral(RDFSharp.Model.RDFTypedLiteral)">
            <summary>
            Validates the value of the given typed literal against its datatype
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNamespace">
            <summary>
            RDFNamespace represents a generic namespace in the RDF model.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNamespace.PrefixRegex">
            <summary>
            Regex for validation of prefixes
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.NamespaceID">
            <summary>
            Unique representation of the namespace
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.IsTemporary">
            <summary>
            Flag indicating that the namespace is temporary
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.NamespacePrefix">
            <summary>
            Prefix representation of the namespace
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.NamespaceUri">
            <summary>
            Uri representation of the namespace
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespace.DereferenceUri">
            <summary>
            Uri dereference representation of the namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.#ctor(System.String,System.String)">
            <summary>
            Builds a namespace with given prefix and Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.ToString">
            <summary>
            Gives the string representation of the namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.Equals(RDFSharp.Model.RDFNamespace)">
            <summary>
            Performs the equality comparison between two namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.SetDereferenceUri(System.Uri)">
            <summary>
            Sets the Uri for dereferencing the namespace when invoked as RDF representation
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespace.SetTemporary(System.Boolean)">
            <summary>
            Sets or unsets this namespace as temporary
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNamespaceRegister">
            <summary>
            RDFNamespaceRegister is a singleton in-memory container for registered RDF namespaces.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNamespaceRegister.RDFSharpNS">
            <summary>
            Default namespace of the library (rdfsharp)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.DefaultNamespace">
            <summary>
            Default namespace of the library
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.Instance">
            <summary>
            Singleton instance of the RDFNamespaceRegister class
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.Register">
            <summary>
            List of registered namespaces
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.NamespacesCount">
            <summary>
            Count of the register's namespaces
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNamespaceRegister.NamespacesEnumerator">
            <summary>
            Gets the enumerator on the register's namespaces for iteration
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.#cctor">
            <summary>
            Default-ctor to initialize the singleton instance of the register
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFNamespace}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the register's namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the register's namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.SetDefaultNamespace(RDFSharp.Model.RDFNamespace)">
            <summary>
            Sets the given namespace as default namespace of the library.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.ResetDefaultNamespace">
            <summary>
            Resets the default namespace of the library.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.AddNamespace(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given namespace to the register, if it has unique prefix and uri.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.RemoveByUri(System.String)">
            <summary>
            Removes the namespace having the given Uri.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.RemoveByPrefix(System.String)">
            <summary>
            Removes the namespace having the given prefix.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.GetByUri(System.String,System.Boolean)">
            <summary>
            Retrieves a namespace by seeking presence of its Uri.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.GetByPrefix(System.String,System.Boolean)">
            <summary>
            Retrieves a namespace by seeking presence of its prefix.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.LookupPrefixCC(System.String,System.Int32)">
            <summary>
            Looksup the given prefix or namespace into the prefix.cc service
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNamespaceRegister.RemoveTemporaryNamespaces">
            <summary>
            Removes namespaces marked as temporary
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFPlainLiteral">
            <summary>
            RDFPlainLiteral represents a literal eventually decorated with a language tag.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFPlainLiteral.LangTag">
            <summary>
            Regex for validation of language tags
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPlainLiteral.Language">
            <summary>
            Optional language of the plain literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.#ctor(System.String)">
            <summary>
            Default-ctor to build a plain literal without language
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.#ctor(System.String,System.String)">
            <summary>
            Default-ctor to build a plain literal with language (if not well-formed, the language will be discarded)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.ToString">
            <summary>
            Gives the string representation of the plain literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPlainLiteral.HasLanguage">
            <summary>
            Checks if the plain literal has a language tag
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFResource">
            <summary>
            RDFResource represents a generic resource in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFResource.URI">
            <summary>
            Uri of the resource
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFResource.IsBlank">
            <summary>
            Flag indicating the resource is blank or not
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.#ctor">
            <summary>
            Builds a blank resource
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.#ctor(System.String)">
            <summary>
            Builds a non-blank resource (if starting with "_:" or "bnode:", it builds a blank resource)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFResource.ToString">
            <summary>
            Gives the string representation of the resource
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTriple">
            <summary>
            RDFTriple represents a triple in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.TripleID">
            <summary>
            Unique representation of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.TripleFlavor">
            <summary>
            Flavor of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Subject">
            <summary>
            Member acting as subject token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Predicate">
            <summary>
            Member acting as predicate token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.Object">
            <summary>
            Member acting as object token of the triple
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTriple.ReificationSubject">
            <summary>
            Subject of the triple's reification
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            SPO-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            SPL-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.ToString">
            <summary>
            Gives the string representation of the triple
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.Equals(RDFSharp.Model.RDFTriple)">
            <summary>
            Performs the equality comparison between two triples
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriple.ReifyTriple">
            <summary>
            Builds the reification graph of the triple
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTypedLiteral">
            <summary>
            RDFTypedLiteral represents a literal decorated with an XML Schema datatype.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTypedLiteral.Datatype">
            <summary>
            Mandatory datatype of the typed literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFTypedLiteral.True">
            <summary>
            Represents an handy typed literal for boolean True
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFTypedLiteral.False">
            <summary>
            Represents an handy typed literal for boolean False
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.#ctor(System.String,RDFSharp.Model.RDFModelEnums.RDFDatatypes)">
            <summary>
            Default-ctor to build a typed literal with given value and given datatype
            (semantic validation of given value against given datatype is performed).
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.ToString">
            <summary>
            Gives the string representation of the typed literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasBooleanDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with boolean
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasDatetimeDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with datetime
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasTimespanDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with timespan
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasStringDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with string
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTypedLiteral.HasDecimalDatatype">
            <summary>
            Checks if the datatype of this typed literal is compatible with decimal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNTriples">
            <summary>
            RDFNTriples is responsible for managing serialization to and from N-Triples data format.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPB">
            <summary>
            Regex to detect S->P->B form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPO">
            <summary>
            Regex to detect S->P->O form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPL_PLAIN">
            <summary>
            Regex to detect S->P->L(PLAIN) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPL_PLANG">
            <summary>
            Regex to detect S->P->L(PLAIN LANGUAGE) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.SPL_TLIT">
            <summary>
            Regex to detect S->P->L(TYPED) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPB">
            <summary>
            Regex to detect B->P->B form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPO">
            <summary>
            Regex to detect B->P->O form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPL_PLAIN">
            <summary>
            Regex to detect B->P->L(PLAIN) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPL_PLANG">
            <summary>
            Regex to detect B->P->L(PLAIN LANGUAGE) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.BPL_TLIT">
            <summary>
            Regex to detect B->P->L(TYPED) form of N-Triple/N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.regexLPL">
            <summary>
            Regex to detect presence of a plain literal with language tag within a given N-Triple
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.regexSqt">
            <summary>
            Regex to detect presence of starting " in the value of a given N-Triple literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFNTriples.regexEqt">
            <summary>
            Regex to detect presence of ending " in the value of a given N-Triple literal
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using N-Triples data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Serialize(RDFSharp.Model.RDFGraph,System.IO.Stream)">
            <summary>
            Serializes the given graph to the given stream using N-Triples data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Deserialize(System.String)">
            <summary>
            Deserializes the given N-Triples filepath to a graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.Deserialize(System.IO.Stream,System.Uri)">
            <summary>
            Deserializes the given N-Triples stream to a graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNTriples.TokenizeNTriple(System.String)">
            <summary>
            Tries to tokenize the given N-Triple
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTriX">
            <summary>
            RDFTriX is responsible for managing serialization to and from TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.Serialize(RDFSharp.Model.RDFGraph,System.IO.Stream)">
            <summary>
            Serializes the given graph to the given stream using TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.AppendTriXGraph(System.Xml.XmlDocument,System.Xml.XmlNode,RDFSharp.Model.RDFGraph)">
            <summary>
            Serializes the TriX structure corresponding to the given graph, appending it to the given XML root node.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.Deserialize(System.String)">
            <summary>
            Deserializes the given TriX filepath to a graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.Deserialize(System.IO.Stream,System.Uri)">
            <summary>
            Deserializes the given TriX stream to a graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTriX.ParseTriXTriple(RDFSharp.Model.RDFGraph,System.Xml.XmlNode)">
            <summary>
            Deserializes the TriX structure corresponding to the given triple node, appending the RDFTriple into the given graph.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTurtle">
            <summary>
            RDFTurtle is responsible for managing serialization to and from Turtle data format.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFTurtle.regexTTL">
            <summary>
            Regex to catch literals which must be escaped as long literals in Turtle
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using Turtle data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Serialize(RDFSharp.Model.RDFGraph,System.IO.Stream)">
            <summary>
            Serializes the given graph to the given stream using Turtle data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Deserialize(System.String)">
            <summary>
            Deserializes the given Turtle filepath to a graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.Deserialize(System.IO.Stream,System.Uri)">
            <summary>
            Deserializes the given Turtle stream to a graph.
            (This algorythm is based on Sesame Turtle parser)
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTurtle.RDFTurtleContext">
            <summary>
            Represents the context of the Turtle parser
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTurtle.RDFTurtleContext.Subject">
            <summary>
            Indicates the current subject
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTurtle.RDFTurtleContext.Predicate">
            <summary>
            Indicates the current predicate
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTurtle.RDFTurtleContext.Object">
            <summary>
            Indicates the current object/literal
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTurtle.RDFTurtleContext.Position">
            <summary>
            Indicates the current position in the input string
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.PeekCodePoint(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext)">
            <summary>
            Peeks at the next Unicode code point without advancing the reader
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ReadCodePoint(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext)">
            <summary>
            Reads the next Unicode code point from the reader
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.UnreadCodePoint(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,System.Int32)">
            <summary>
            Unreads the given Unicode code point from the reader
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.UnreadCodePoint(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,System.String)">
            <summary>
            Unreads the given Unicode code point from the reader
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.GetTurtleContextCoordinates(RDFSharp.Model.RDFTurtle.RDFTurtleContext)">
            <summary>
            Gets the actual coordinates within Turtle context
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.UpdateTurtleContextPosition(RDFSharp.Model.RDFTurtle.RDFTurtleContext,System.Int32)">
            <summary>
            Updates the position of the cursor within Turtle context
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.SafetyCheckTurtleContextPosition(RDFSharp.Model.RDFTurtle.RDFTurtleContext)">
            <summary>
            Safety checks the position of the cursor within Turtle context
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseStatement(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid directive or statement
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseDirective(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Parses the Turtle data in order to detect a valid directive
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseTriples(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseSubject(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParsePredicate(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParsePredicateObjectList(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement predicate-object list
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseObjectList(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement object list
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseObject(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid statement object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseCollection(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses a collection, e.g. ( item1 item2 item3 )
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseImplicitBlank(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses an implicit blank node. This method parses the token []
            and predicateObjectLists that are surrounded by square brackets.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParsePrefixID(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid namespace prefix
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseBase(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid base directive
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseURI(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses the Turtle data in order to detect a valid Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseValue(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses an RDF value. This method parses uriref, qname, node ID, quoted
            literal, integer, double and boolean.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseNodeID(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses a blank node ID, e.g. _:node1
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseNumber(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses a number
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseQNameOrBoolean(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses qnames and boolean values, which have equivalent starting characters
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseQuotedLiteral(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Parses a quoted string, optionally followed by a language tag or datatype.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseQuotedString(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext)">
            <summary>
            Parses a quoted string, which is either a "normal string" or a """long string"""
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseString(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,System.Int32)">
            <summary>
            Parses a "normal string". This method requires that the opening character has already been parsed.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.ParseLongString(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,System.Int32)">
            <summary>
            Parses a """long string""". This method requires that the first three characters have already been parsed.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.DecodeString(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,System.String)">
            <summary>
            Decodes an encoded Turtle string. Any \-escape sequences are substituted with their decoded value.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.SkipWhitespace(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,RDFSharp.Model.RDFGraph)">
            <summary>
            Consumes any whitespace characters (space, tab, line feed, newline) and comments(#-style) from the Turtle data.
            After this method has been called, the first character that is returned is either a non-ignorable character or EOF.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.SkipComment(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext)">
            <summary>
            Consumes characters from reader until the first EOL has been read.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.VerifyCharacterOrFail(System.String,RDFSharp.Model.RDFTurtle.RDFTurtleContext,System.Int32,System.String)">
            <summary>
            Verifies that the supplied character code point is one of the expected chars.
            This method will throw an exception if this is not the case.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsWhitespace(System.Int32)">
            <summary>
            Check if the supplied code point represents a whitespace character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsNumber(System.Int32)">
            <summary>
            Check if the supplied code point represents a numeric character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsSupplementaryCodePoint(System.Int32)">
            <summary>
            Determines whether the given scalar value is in the supplementary plane and thus
            requires 2 characters to be represented in UTF-16 (as a surrogate pair).
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsNameStartChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid name start character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsNameChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid name character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPrefixStartChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefixed name start character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPrefixChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefix character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsLanguageStartChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid language tag start character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsLanguageChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid language tag character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsLocalEscapedChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid local escaped character.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsBLANK_NODE_LABEL_StartChar(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefixed name start character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsBLANK_NODE_LABEL_Char(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid blank node label character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPN_CHARS(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefixed name character
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPN_CHARS_U(System.Int32)">
            <summary>
            Check if the supplied code point represents either a valid prefixed name base character or an underscore
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTurtle.IsPN_CHARS_BASE(System.Int32)">
            <summary>
            Check if the supplied code point represents a valid prefixed name base character
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFXml">
            <summary>
            RDFXml is responsible for managing serialization to and from XML data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Serialize(RDFSharp.Model.RDFGraph,System.String)">
            <summary>
            Serializes the given graph to the given filepath using XML data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Serialize(RDFSharp.Model.RDFGraph,System.IO.Stream)">
            <summary>
            Serializes the given graph to the given stream using XML data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Deserialize(System.String)">
            <summary>
            Deserializes the given Xml filepath to a graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.Deserialize(System.IO.Stream,System.Uri)">
            <summary>
            Deserializes the given Xml stream to a graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.ParseNodeList(System.Xml.XmlNodeList,RDFSharp.Model.RDFGraph,System.Uri,System.Xml.XmlAttribute,RDFSharp.Model.RDFResource)">
            <summary>
            Parses the given list of nodes
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfRootNode(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Gives the "rdf:RDF" root node of the document
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetXmlnsNamespaces(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Gives the collection of "xmlns" attributes of the "rdf:RDF" root node
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GenerateNamespace(System.String,System.Boolean)">
            <summary>
            Generates an automatic prefix for a namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetAutomaticNamespaces(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets the list of automatic namespaces used within the predicates of the triples of the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetSubjectNode(System.Xml.XmlNode,System.Uri,RDFSharp.Model.RDFGraph)">
            <summary>
            Gives the subj node extracted from the attribute list of the current element
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.ResolveRelativeNode(System.Xml.XmlAttribute,System.Uri)">
            <summary>
            Checks if the given attribute is absolute Uri, relative Uri, "rdf:ID" relative Uri, "rdf:nodeID" blank node Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.CheckIfRdfDescriptionNode(System.Xml.XmlNode)">
            <summary>
            Verify if we are on a standard rdf:Description element
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfAboutAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF subject
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfResourceAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF object
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfIdAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF ID
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfDatatypeAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF typed literal datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetXmlLangAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF plain literal language
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetParseTypeCollectionAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF parseType "Collection"
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetParseTypeLiteralAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF parseType "Literal"
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetParseTypeResourceAttribute(System.Xml.XmlNode)">
            <summary>
            Given an element, return the attribute which can correspond to the RDF parseType "Resource"
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetRdfIdTriple(System.Xml.XmlNode,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,System.Uri,System.Xml.XmlAttribute)">
            <summary>
            Given an element, return the triple corresponding to the RDF ID
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.ReifyRdfIdPredicateTriple(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFTriple)">
            <summary>
            Builds the reification graph of the special triple obtained from rdf:ID found at predicate level
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.ParseCollectionElements(System.Uri,System.Xml.XmlNode,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFGraph,System.Xml.XmlAttribute)">
            <summary>
            Given an attribute representing a RDF collection, iterates on its constituent elements
            to build its standard reification triples.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.CheckIfRdfContainerNode(System.Xml.XmlNode)">
            <summary>
            Verify if we are on a standard rdf:[Bag|Seq|Alt] element
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.GetContainerNode(System.Xml.XmlNode)">
            <summary>
            Given an element, return the child element which can correspond to the RDF container
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXml.ParseContainerElements(RDFSharp.Model.RDFModelEnums.RDFContainerTypes,System.Xml.XmlNode,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFGraph,System.Xml.XmlAttribute)">
            <summary>
            Given an element representing a RDF container, iterates on its constituent elements
            to build its standard reification triples.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFAndConstraint">
            <summary>
            RDFAndConstraint represents a SHACL constraint requiring all the given shapes for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFAndConstraint.AndShapes">
            <summary>
            Shapes required for the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFAndConstraint.#ctor">
            <summary>
            Default-ctor to build an and constraint
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFAndConstraint.AddShape(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given shape to the required shapes of this constraint
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFAndConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFAndConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFClassConstraint">
            <summary>
            RDFClassConstraint represents a SHACL constraint on the specified class for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFClassConstraint.ClassType">
            <summary>
            ClassType of the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFClassConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a class constraint with the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFClassConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFClassConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFClosedConstraint">
            <summary>
            RDFClosedConstraint represents a SHACL constraint on the predicates allowed for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFClosedConstraint.Closed">
            <summary>
            Flag indicating that closure of predicates is required or not
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFClosedConstraint.IgnoredProperties">
            <summary>
            Properties allowed on the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFClosedConstraint.#ctor(System.Boolean)">
            <summary>
            Default-ctor to build a closed constraint with the given behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFClosedConstraint.AddIgnoredProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given property to the allowed properties of this constraint
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFClosedConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFClosedConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFDatatypeConstraint">
            <summary>
            RDFDatatypeConstraint represents a SHACL constraint on the specified datatype for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDatatypeConstraint.Datatype">
            <summary>
            Allowed datatype for the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeConstraint.#ctor(RDFSharp.Model.RDFModelEnums.RDFDatatypes)">
            <summary>
            Default-ctor to build a datatype constraint with the given datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDatatypeConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFDisjointConstraint">
            <summary>
            RDFDisjointConstraint represents a SHACL constraint on absence of a given RDF term for the specified predicate
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFDisjointConstraint.DisjointPredicate">
            <summary>
            Predicate for which value nodes of a given RDF term are checked for absence
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDisjointConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a disjoint constraint with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDisjointConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFDisjointConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFEqualsConstraint">
            <summary>
            RDFEqualsConstraint represents a SHACL constraint on presence of a given RDF term for the specified predicate
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFEqualsConstraint.EqualsPredicate">
            <summary>
            Predicate for which value nodes of a given RDF term are checked for presence
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFEqualsConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an equals constraint with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFEqualsConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFEqualsConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFHasValueConstraint">
            <summary>
            RDFHasValueConstraint represents a SHACL constraint on a required value for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFHasValueConstraint.Value">
            <summary>
            Value required on the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFHasValueConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a hasValue constraint with the given resource value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFHasValueConstraint.#ctor(RDFSharp.Model.RDFLiteral)">
            <summary>
            Default-ctor to build a hasValue constraint with the given literal value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFHasValueConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFHasValueConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFInConstraint">
            <summary>
            RDFInConstraint represents a SHACL constraint on the allowed values for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFInConstraint.InValues">
            <summary>
            Values allowed on the given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFInConstraint.ItemType">
            <summary>
            Type of the allowed values (Resource/Literal)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFInConstraint.#ctor(RDFSharp.Model.RDFModelEnums.RDFItemTypes)">
            <summary>
            Default-ctor to build a in constraint of the given type (Resource/Literal)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFInConstraint.AddValue(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given resource to the values of this constraint (if ItemType has been set to Resource)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFInConstraint.AddValue(RDFSharp.Model.RDFLiteral)">
            <summary>
            Adds the given literal to the values of this constraint (if ItemType has been set to Literal)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFInConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFInConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFLanguageInConstraint">
            <summary>
            RDFLanguageInConstraint represents a SHACL constraint on the allowed language tags for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFLanguageInConstraint.LanguageTags">
            <summary>
            Language Tags allowed on the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLanguageInConstraint.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Default-ctor to build a languageIn constraint with the given list of language tags
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLanguageInConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLanguageInConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFLessThanConstraint">
            <summary>
            RDFLessThanConstraint represents a SHACL constraint on minority comparison of a given RDF term for the specified predicate
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFLessThanConstraint.LessThanPredicate">
            <summary>
            Predicate for which value nodes of a given RDF term are compared for minority
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLessThanConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a lessThan constraint with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLessThanConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLessThanConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFLessThanOrEqualsConstraint">
            <summary>
            RDFLessThanOrEqualsConstraint represents a SHACL constraint on minority or equality comparison of a given RDF term for the specified predicate
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFLessThanOrEqualsConstraint.LessThanOrEqualsPredicate">
            <summary>
            Predicate for which value nodes of a given RDF term are compared for minority or equality
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLessThanOrEqualsConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a lessThanOrEquals constraint with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLessThanOrEqualsConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFLessThanOrEqualsConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFMaxCountConstraint">
            <summary>
            RDFMaxCountConstraint represents a SHACL constraint on the maximum required occurrences for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFMaxCountConstraint.MaxCount">
            <summary>
            Indicates the maximum required occurrences for a given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxCountConstraint.#ctor(System.Int32)">
            <summary>
            Default-ctor to build a maxCount constraint with the given maxCount
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxCountConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxCountConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFMaxExclusiveConstraint">
            <summary>
            RDFMaxExclusiveConstraint represents a SHACL constraint on an exclusive upper-bound value for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFMaxExclusiveConstraint.Value">
            <summary>
            Exclusive upper-bound value required on the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxExclusiveConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a maxExclusive constraint with the given resource value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxExclusiveConstraint.#ctor(RDFSharp.Model.RDFLiteral)">
            <summary>
            Default-ctor to build a maxExclusive constraint with the given literal value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxExclusiveConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxExclusiveConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFMaxInclusiveConstraint">
            <summary>
            RDFMaxInclusiveConstraint represents a SHACL constraint on an inclusive upper-bound value for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFMaxInclusiveConstraint.Value">
            <summary>
            Inclusive upper-bound value required on the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxInclusiveConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a maxInclusive constraint with the given resource value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxInclusiveConstraint.#ctor(RDFSharp.Model.RDFLiteral)">
            <summary>
            Default-ctor to build a maxInclusive constraint with the given literal value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxInclusiveConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxInclusiveConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFMaxLengthConstraint">
            <summary>
            RDFMaxLengthConstraint represents a SHACL constraint on the maximum allowed length for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFMaxLengthConstraint.MaxLength">
            <summary>
            Indicates the maximum allowed length for a given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxLengthConstraint.#ctor(System.Int32)">
            <summary>
            Default-ctor to build a named maxLength constraint with the given maxLength
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxLengthConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMaxLengthConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFMinCountConstraint">
            <summary>
            RDFMinCountConstraint represents a SHACL constraint on the minimum required occurrences for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFMinCountConstraint.MinCount">
            <summary>
            Indicates the minimum required occurrences for a given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinCountConstraint.#ctor(System.Int32)">
            <summary>
            Default-ctor to build a minCount constraint with the given minCount
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinCountConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinCountConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFMinExclusiveConstraint">
            <summary>
            RDFMinExclusiveConstraint represents a SHACL constraint on an exclusive lower-bound value for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFMinExclusiveConstraint.Value">
            <summary>
            Exclusive lower-bound value required on the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinExclusiveConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a minExclusive constraint with the given resource value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinExclusiveConstraint.#ctor(RDFSharp.Model.RDFLiteral)">
            <summary>
            Default-ctor to build a minExclusive constraint with the given literal value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinExclusiveConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinExclusiveConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFMinInclusiveConstraint">
            <summary>
            RDFMinInclusiveConstraint represents a SHACL constraint on an inclusive lower-bound value for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFMinInclusiveConstraint.Value">
            <summary>
            Inclusive lower-bound value required on the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinInclusiveConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a minInclusive constraint with the given resource value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinInclusiveConstraint.#ctor(RDFSharp.Model.RDFLiteral)">
            <summary>
            Default-ctor to build a minInclusive constraint with the given literal value
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinInclusiveConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinInclusiveConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFMinLengthConstraint">
            <summary>
            RDFMinLengthConstraint represents a SHACL constraint on the minimum allowed length for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFMinLengthConstraint.MinLength">
            <summary>
            Indicates the minimum allowed length for a given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinLengthConstraint.#ctor(System.Int32)">
            <summary>
            Default-ctor to build a minLength constraint with the given minLength
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinLengthConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFMinLengthConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNodeConstraint">
            <summary>
            RDFNodeConstraint represents a SHACL constraint requiring the specified node shape for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNodeConstraint.NodeShapeUri">
            <summary>
            Identifier of the node shape against which the given RDF term must be validated
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a node constraint with the given node shape identifier
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNodeKindConstraint">
            <summary>
            RDFNodeKindConstraint represents a SHACL constraint on the specified type for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNodeKindConstraint.NodeKind">
            <summary>
            Allowed type of node for the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeKindConstraint.#ctor(RDFSharp.Model.RDFValidationEnums.RDFNodeKinds)">
            <summary>
            Default-ctor to build a nodeKind constraint of the given kind
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeKindConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeKindConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNotConstraint">
            <summary>
            RDFNotConstraint represents a SHACL constraint not allowing the given shape for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFNotConstraint.NotShape">
            <summary>
            Shape not allowed for the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNotConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a not constraint with the given shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNotConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNotConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFOrConstraint">
            <summary>
            RDFOrConstraint represents a SHACL constraint requiring at least one of the given shapes for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFOrConstraint.OrShapes">
            <summary>
            Shapes required for the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFOrConstraint.#ctor">
            <summary>
            Default-ctor to build an or constraint
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFOrConstraint.AddShape(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given shape to the required shapes of this constraint
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFOrConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFOrConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFPatternConstraint">
            <summary>
            RDFPatternConstraint represents a SHACL constraint on the specified regular expression for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPatternConstraint.RegEx">
            <summary>
            Regular Expression to be applied on the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPatternConstraint.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Default-ctor to build a pattern constraint with the given regex
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPatternConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPatternConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFPropertyConstraint">
            <summary>
            RDFPropertyConstraint represents a SHACL constraint requiring the specified property shape for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPropertyConstraint.PropertyShapeUri">
            <summary>
            Identifier of the property shape against which the given RDF term must be validated
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyConstraint.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a property constraint with the given property shape identifier
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFQualifiedValueShapeConstraint">
            <summary>
            RDFQualifiedValueShapeConstraint represents a SHACL constraint requiring min/max occurrencies of the specified shape for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFQualifiedValueShapeConstraint.QualifiedValueShapeUri">
            <summary>
            Identifier of the shape against which the given RDF term must be validated
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFQualifiedValueShapeConstraint.QualifiedValueMinCount">
            <summary>
            Indicates the minimum required occurrences for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFQualifiedValueShapeConstraint.QualifiedValueMaxCount">
            <summary>
            Indicates the maximum required occurrences for a given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFQualifiedValueShapeConstraint.#ctor(RDFSharp.Model.RDFResource,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Default-ctor to build a qualified value shape constraint with the given property shape identifier and min/max counters
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFQualifiedValueShapeConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFQualifiedValueShapeConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFUniqueLangConstraint">
            <summary>
            RDFUniqueLangConstraint represents a SHACL constraint on the uniqueness of language tags for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFUniqueLangConstraint.UniqueLang">
            <summary>
            Flag indicating that uniqueness of language tags is required or not
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFUniqueLangConstraint.#ctor(System.Boolean)">
            <summary>
            Default-ctor to build a uniqueLang constraint with the given behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFUniqueLangConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFUniqueLangConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFXoneConstraint">
            <summary>
            RDFXoneConstraint represents a SHACL constraint requiring exactly one of the given shapes for a given RDF term
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFXoneConstraint.XoneShapes">
            <summary>
            Shapes required for the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXoneConstraint.#ctor">
            <summary>
            Default-ctor to build a xone constraint
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXoneConstraint.AddShape(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given shape to the required shapes of this constraint
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXoneConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFXoneConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFConstraint">
            <summary>
            RDFConstraint represents a generic SHACL constraint definition within a shape.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFConstraint.ValidateConstraint(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Evaluates this constraint against the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFConstraint.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this constraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFShape">
            <summary>
            RDFShape represents a generic SHACL shape definition
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.Severity">
            <summary>
            Indicates the severity level of this shape (sh:severity)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.Deactivated">
            <summary>
            Indicates that this shape is ignored (sh:deactivated)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.MessagesCount">
            <summary>
            Count of the human-readable messages of this shape
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.MessagesEnumerator">
            <summary>
            Gets the enumerator on human-readable messages of this shape for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.TargetsCount">
            <summary>
            Count of the targets of this shape
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.TargetsEnumerator">
            <summary>
            Gets the enumerator on the targets of this shape for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.ConstraintsCount">
            <summary>
            Count of the constraints of this shape
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.ConstraintsEnumerator">
            <summary>
            Gets the enumerator on the constraints of this shape for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.Messages">
            <summary>
            Indicates the human-readable messages of this shape (sh:message)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.Targets">
            <summary>
            Indicats the targets of this shape (sh:targetClass,sh:targetNode,sh:targetsSubjectsOf,sh:targetObjectsOf)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShape.Constraints">
            <summary>
            Indicates the constraints of this shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a generic shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFConstraint}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on this shape's constraints
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on this shape's constraints
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.Activate">
            <summary>
            Activates this shape, making it available to the processor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.Deactivate">
            <summary>
            Deactivates this shape, making it unavailable to the processor
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.SetSeverity(RDFSharp.Model.RDFValidationEnums.RDFShapeSeverity)">
            <summary>
            Sets the severity level of this shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.AddMessage(RDFSharp.Model.RDFLiteral)">
            <summary>
            Adds the given human-readable message to this shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.AddTarget(RDFSharp.Model.RDFTarget)">
            <summary>
            Adds the given target to this shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.AddConstraint(RDFSharp.Model.RDFConstraint)">
            <summary>
            Adds the given constraint to this shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShape.ToRDFGraph">
            <summary>
            Gets a graph representation of this shape
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFShapesGraph">
            <summary>
            RDFShapesGraph represents a SHACL shapes graph definition
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShapesGraph.ShapesCount">
            <summary>
            Count of the shapes composing this shapes graph
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShapesGraph.ShapesEnumerator">
            <summary>
            Gets the enumerator on the shapes of this shapes graph for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFShapesGraph.Shapes">
            <summary>
            SHACL shapes contained in this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a named shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.#ctor">
            <summary>
            Default-ctor to build a blank shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFShape}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the shapes of this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the shapes of this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.AddShape(RDFSharp.Model.RDFShape)">
            <summary>
            Adds the given shape to this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.MergeShapes(RDFSharp.Model.RDFShapesGraph)">
            <summary>
            Merges the shapes of the given shapes graph to this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.RemoveShape(RDFSharp.Model.RDFShape)">
            <summary>
            Removes the given shape from this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.SelectShape(System.String)">
            <summary>
            Selects the shape represented by the given string from this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.ToRDFGraph">
            <summary>
            Gets a graph representation of this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.ToRDFGraphAsync">
            <summary>
            Asynchronously gets a graph representation of this shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets a shapes graph representation of the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFShapesGraph.FromRDFGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously gets a shapes graph representation of the given graph
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTarget">
            <summary>
            RDFTarget represents a generic SHACL target definition within a shape.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFTarget.TargetValue">
            <summary>
            Indicates the value of this target
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTarget.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this target
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFNodeShape">
            <summary>
            RDFNodeShape represents a SHACL node shape definition
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeShape.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a named node shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeShape.#ctor">
            <summary>
            Default-ctor to build a blank node shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFNodeShape.ToRDFGraph">
            <summary>
            Gets a graph representation of this node shape
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFPropertyShape">
            <summary>
            RDFPropertyShape represents a SHACL property shape definition
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPropertyShape.Path">
            <summary>
            Indicates the property on which this property shape is applied (sh:path)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPropertyShape.Descriptions">
            <summary>
            Indicates the human-readable descriptions of this property shape's path (sh:description)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPropertyShape.Names">
            <summary>
            Indicates the human-readable labels of this property shape's path (sh:name)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPropertyShape.Order">
            <summary>
            Indicates the relative order of this property shape compared to its siblings (sh:order)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFPropertyShape.Group">
            <summary>
            Indicates the group of property shapes to which this property shape belongs (sh:group)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyShape.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a named property shape on the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyShape.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a blank property shape on the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyShape.AddDescription(RDFSharp.Model.RDFLiteral)">
            <summary>
            Adds the given human-readable description to this property shape's path
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyShape.AddName(RDFSharp.Model.RDFLiteral)">
            <summary>
            Adds the given human-readable label to this property shape's path
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyShape.SetOrder(System.Int32)">
            <summary>
            Sets the relative order of this property shape compared to its siblings
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyShape.SetGroup(RDFSharp.Model.RDFResource)">
            <summary>
            Sets the group of property shapes to which this SHACL property shape belongs
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFPropertyShape.ToRDFGraph">
            <summary>
            Gets a graph representation of this property shape
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTargetClass">
            <summary>
            RDFTargetClass represents a SHACL target of type "Class" within a shape.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTargetClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a class target on the given resource
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTargetClass.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this target
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTargetNode">
            <summary>
            RDFTargetNode represents a SHACL target of type "Node" within a shape.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTargetNode.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a node target on the given resource
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTargetNode.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this target
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTargetObjectsOf">
            <summary>
            RDFTargetObjectsOf represents a SHACL target of type "ObjectsOf" within a shape.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTargetObjectsOf.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an objectsOf target on the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTargetObjectsOf.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this target
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFTargetSubjectsOf">
            <summary>
            RDFTargetSubjectsOf represents a SHACL target of type "SubjectsOf" within a shape.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTargetSubjectsOf.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a subjectsOf target on the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFTargetSubjectsOf.ToRDFGraph(RDFSharp.Model.RDFShape)">
            <summary>
            Gets a graph representation of this target
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFValidationEngine">
            <summary>
            RDFValidationEngine analyzes a given data graph by applying the given SHACL shapes graph,
            in order to find error and inconsistency evidences affecting its structure.
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationEngine.Validate(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph)">
            <summary>
            Validates the given data graph against the given SHACL shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationEngine.ValidateAsync(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously validates the given data graph against the given SHACL shapes graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationEngine.ValidateShape(RDFSharp.Model.RDFShapesGraph,RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Validates the given data graph against the given SHACL shape
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFValidationEnums">
            <summary>
            RDFValidationEnums represents a collector for all the enumerations used for SHACL modeling and validation
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFValidationEnums.RDFShapeSeverity">
            <summary>
            RDFShapeSeverity represents an enumeration for possible severity levels of shape validation evidence
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFShapeSeverity.Info">
            <summary>
            Shape has not been violated: data graph may contain trivial structural inconsistencies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFShapeSeverity.Warning">
            <summary>
            Shape has not been violated: data graph may contain structural inconsistencies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFShapeSeverity.Violation">
            <summary>
            Shape has been violated: data graph contains structural inconsistencies
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFValidationEnums.RDFNodeKinds">
            <summary>
            RDFNodeKinds represents an enumeration for supported values of sh:nodeKind constraint
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFNodeKinds.BlankNode">
            <summary>
            sh:BlankNode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFNodeKinds.BlankNodeOrIRI">
            <summary>
             sh:BlankNodeOrIRI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFNodeKinds.BlankNodeOrLiteral">
            <summary>
            sh:BlankNodeOrLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFNodeKinds.IRI">
            <summary>
             sh:IRI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFNodeKinds.IRIOrLiteral">
            <summary>
            sh:IRIOrLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFValidationEnums.RDFNodeKinds.Literal">
            <summary>
            sh:Literal
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFValidationHelper">
            <summary>
             RDFValidationHelper contains utility methods supporting SHACL modeling and validation
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.GetFocusNodesOf(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape)">
            <summary>
            Gets the focus nodes of the given shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.GetValueNodesOf(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Gets the value nodes of the given focus node
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.GetInstancesOfClass(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFResource,System.Collections.Generic.HashSet{System.Int64})">
            <summary>
            Gets the direct (rdf:type) and indirect (rdfs:subClassOf) instances of the given class within the given data graph
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.DetectTypedNodeShapes(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShapesGraph)">
            <summary>
            Detects the typed instances of shacl:NodeShape and populates the shapes graph with their definition
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.DetectTypedPropertyShapes(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShapesGraph)">
            <summary>
            Detects the typed instances of shacl:PropertyShape and populates the shapes graph with their definition
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.DetectInlinePropertyShapes(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShapesGraph)">
            <summary>
            Detects the inline instances of shacl:PropertyShape and populates the shapes graph with their definition
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.DetectShapeTargets(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape)">
            <summary>
            Detects the targets of the given shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.DetectShapeAttributes(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape)">
            <summary>
            Detects the attributes of the given shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.DetectShapeNonValidatingAttributes(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFPropertyShape)">
            <summary>
            Detects the non validating attributes of the given property shape
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationHelper.DetectShapeConstraints(RDFSharp.Model.RDFGraph,RDFSharp.Model.RDFShape)">
            <summary>
            Detects the constraints of the given shape
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFValidationReport">
            <summary>
             RDFValidationReport represents a detailed report of a shapes graph's validation.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationReport.Conforms">
            <summary>
            Indicates that the validation was successful (sh:conforms)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationReport.ResultsCount">
            <summary>
            Counter of the validator results
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationReport.ResultsEnumerator">
            <summary>
            Gets an enumerator on the validator results for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationReport.Results">
            <summary>
            List of validator results (sh:result)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationReport.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a named validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationReport.#ctor">
            <summary>
            Default-ctor to build a blank validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationReport.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFValidationResult}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the validation report's results
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationReport.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the validation report's results
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationReport.AddResult(RDFSharp.Model.RDFValidationResult)">
            <summary>
            Adds the given result to this validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationReport.MergeResults(RDFSharp.Model.RDFValidationReport)">
            <summary>
            Merges the results of the given validation report to this validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationReport.ToRDFGraph">
            <summary>
            Gets a graph representation of this validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationReport.ToRDFGraphAsync">
            <summary>
            Asynchronously gets a graph representation of this validation report
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFValidationResult">
            <summary>
             RDFValidationResult represents an evidence reported by a shape's validation.
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationResult.Severity">
            <summary>
            Indicates the severity level of this validation result (sh:resultSeverity)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationResult.SourceShape">
            <summary>
            Indicates the shape which caused the validation result (sh:sourceShape)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationResult.SourceConstraintComponent">
            <summary>
            Indicates the constraint component which caused the validation result (sh:sourceConstraintComponent)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationResult.FocusNode">
            <summary>
            Indicates the node which caused the validation result (sh:focusNode)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationResult.ResultPath">
            <summary>
            Indicates the property which caused the validation result (sh:resultPath)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationResult.ResultValue">
            <summary>
            Indicates the value which caused the validation result (sh:value)
            </summary>
        </member>
        <member name="P:RDFSharp.Model.RDFValidationResult.ResultMessages">
            <summary>
            Indicates the human-readable messages of this validation result (sh:resultMessage)
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationResult.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Query.RDFPatternMember,RDFSharp.Model.RDFResource,RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Model.RDFLiteral},RDFSharp.Model.RDFValidationEnums.RDFShapeSeverity)">
            <summary>
            Default-ctor to build a validation result with the given properties
            </summary>
        </member>
        <member name="M:RDFSharp.Model.RDFValidationResult.ToRDFGraph">
            <summary>
            Gets a graph representation of this validation result
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary">
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
            <summary>
            RDFVocabulary is an helper for handy usage of supported RDF vocabularies.
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.CRM">
            <summary>
            CRM represents the CIDOC CRM 5.0.4 vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.PREFIX">
            <summary>
            crm
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.BASE_URI">
            <summary>
            http://www.cidoc-crm.org/cidoc-crm/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.DEREFERENCE_URI">
            <summary>
            http://www.cidoc-crm.org/sites/default/files/cidoc_crm_v5.0.4_official_release.rdfs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E1_CRM_ENTITY">
            <summary>
            crm:E1_CRM_Entity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E2_TEMPORAL_ENTITY">
            <summary>
            crm:E2_Temporal_Entity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E3_CONDITION_STATE">
            <summary>
            crm:E3_Condition_State
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E4_PERIOD">
            <summary>
            crm:E4_Period
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E5_EVENT">
            <summary>
            crm:E5_Event
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E6_DESTRUCTION">
            <summary>
            crm:E6_Destruction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E7_ACTIVITY">
            <summary>
            crm:E7_Activity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E8_ACQUISITION">
            <summary>
            crm:E8_Acquisition
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E9_MOVE">
            <summary>
            crm:E9_Move
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E10_TRANSFER_OF_CUSTODY">
            <summary>
            crm:E10_Transfer_of_Custody
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E11_MODIFICATION">
            <summary>
            crm:E11_Modification
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E12_PRODUCTION">
            <summary>
            crm:E12_Production
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E13_ATTRIBUTE_ASSIGNMENT">
            <summary>
            crm:E13_Attribute_Assignment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E14_CONDITION_ASSESSMENT">
            <summary>
            crm:E14_Condition_Assessment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E15_IDENTIFIER_ASSIGNMENT">
            <summary>
            crm:E15_Identifier_Assignment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E16_MEASUREMENT">
            <summary>
            crm:E16_Measurement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E17_TYPE_ASSIGNMENT">
            <summary>
            crm:E17_Type_Assignment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E18_PHYSICAL_THING">
            <summary>
            crm:E18_Physical_Thing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E19_PHYSICAL_OBJECT">
            <summary>
            crm:E19_Physical_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E20_BIOLOGICAL_OBJECT">
            <summary>
            crm:E20_Biological_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E21_PERSON">
            <summary>
            crm:E21_Person
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E22_MAN_MADE_OBJECT">
            <summary>
            crm:E22_Man-Made_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E24_PHYSICAL_MAN_MADE_THING">
            <summary>
            crm:E24_Physical_Man-Made_Thing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E25_MAN_MADE_FEATURE">
            <summary>
            crm:E25_Man-Made_Feature
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E26_PHYSICAL_FEATURE">
            <summary>
            crm:E26_Physical_Feature
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E27_SITE">
            <summary>
            crm:E27_Site
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E28_CONCEPTUAL_OBJECT">
            <summary>
            crm:E28_Conceptual_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E29_DESIGN_OR_PROCEDURE">
            <summary>
            crm:E29_Design_or_Procedure
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E30_RIGHT">
            <summary>
            crm:E30_Right
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E31_DOCUMENT">
            <summary>
            crm:E31_Document
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E32_AUTHORITY_DOCUMENT">
            <summary>
            crm:E32_Authority_Document
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E33_LINGUISTIC_OBJECT">
            <summary>
            crm:E33_Linguistic_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E34_INSCRIPTION">
            <summary>
            crm:E34_Inscription
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E35_TITLE">
            <summary>
            crm:E35_Title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E36_VISUAL_ITEM">
            <summary>
            crm:E36_Visual_Item
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E37_MARK">
            <summary>
            crm:E37_Mark
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E38_IMAGE">
            <summary>
            crm:E38_Image
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E39_ACTOR">
            <summary>
            crm:E39_Actor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E40_LEGAL_BODY">
            <summary>
            crm:E40_Legal_Body
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E41_APPELLATION">
            <summary>
            crm:E41_Appellation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E42_IDENTIFIER">
            <summary>
            crm:E42_Identifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E44_PLACE_APPELLATION">
            <summary>
            crm:E44_Place_Appellation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E45_ADDRESS">
            <summary>
            crm:E45_Address
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E46_SECTION_DEFINITION">
            <summary>
            crm:E46_Section_Definition
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E47_SPATIAL_COORDINATES">
            <summary>
            crm:E47_Spatial_Coordinates
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E48_PLACE_NAME">
            <summary>
            crm:E48_Place_Name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E49_TIME_APPELLATION">
            <summary>
            crm:E49_Time_Appellation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E50_DATE">
            <summary>
            crm:E50_Date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E51_CONTACT_POINT">
            <summary>
            crm:E51_Contact_Point
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E52_TIME_SPAN">
            <summary>
            crm:E52_Time-Span
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E53_PLACE">
            <summary>
            crm:E53_Place
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E54_DIMENSION">
            <summary>
            crm:E54_Dimension
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E55_TYPE">
            <summary>
            crm:E55_Type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E56_LANGUAGE">
            <summary>
            crm:E56_Language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E57_MATERIAL">
            <summary>
            crm:E57_Material
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E58_MEASUREMENT_UNIT">
            <summary>
            crm:E58_Measurement_Unit
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E63_BEGINNING_OF_EXISTENCE">
            <summary>
            crm:E63_Beginning_of_Existence
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E64_END_OF_EXISTENCE">
            <summary>
            crm:E64_End_of_Existence
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E65_CREATION">
            <summary>
            crm:E65_Creation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E66_FORMATION">
            <summary>
            crm:E66_Formation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E67_BIRTH">
            <summary>
            crm:E67_Birth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E68_DISSOLUTION">
            <summary>
            crm:E68_Dissolution
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E69_DEATH">
            <summary>
            crm:E69_Death
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E70_THING">
            <summary>
            crm:E70_Thing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E71_MAN_MADE_THING">
            <summary>
            crm:E71_Man-Made_Thing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E72_LEGAL_OBJECT">
            <summary>
            crm:E72_Legal_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E73_INFORMATION_OBJECT">
            <summary>
            crm:E73_Information_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E74_GROUP">
            <summary>
            crm:E74_Group
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E75_CONCEPTUAL_OBJECT_APPELLATION">
            <summary>
            crm:E75_Conceptual_Object_Appellation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E77_PERSISTENT_ITEM">
            <summary>
            crm:E77_Persistent_Item
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E78_COLLECTION">
            <summary>
            crm:E78_Collection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E79_PART_ADDITION">
            <summary>
            crm:E79_Part_Addition
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E80_PART_REMOVAL">
            <summary>
            crm:E80_Part_Removal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E81_TRANSFORMATION">
            <summary>
            crm:E81_Transformation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E82_ACTOR_APPELLATION">
            <summary>
            crm:E82_Actor_Appellation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E83_TYPE_CREATION">
            <summary>
            crm:E83_Type_Creation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E84_INFORMATION_CARRIER">
            <summary>
            crm:E84_Information_Carrier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E85_JOINING">
            <summary>
            crm:E85_Joining
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E86_LEAVING">
            <summary>
            crm:E86_Leaving
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E87_CURATION_ACTIVITY">
            <summary>
            crm:E87_Curation_Activity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E89_PROPOSITIONAL_OBJECT">
            <summary>
            crm:E89_Propositional_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.E90_SYMBOLIC_OBJECT">
            <summary>
            crm:E90_Symbolic_Object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P1_IS_IDENTIFIED_BY">
            <summary>
            crm:P1_is_identified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P1I_IDENTIFIES">
            <summary>
            crm:P1i_identifies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P2_HAS_TYPE">
            <summary>
            crm:P2_has_type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P2I_IS_TYPE_OF">
            <summary>
            crm:P2i_is_type_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P3_HAS_NOTE">
            <summary>
            crm:P3_has_note
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P4_HAS_TIME_SPAN">
            <summary>
            crm:P4_has_time-span
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P4I_IS_TIME_SPAN_OF">
            <summary>
            crm:P4i_is_time-span_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P5_CONSISTS_OF">
            <summary>
            crm:P5_consists_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P5I_FORMS_PART_OF">
            <summary>
            crm:P5i_forms_part_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P7_TOOK_PLACE_AT">
            <summary>
            crm:P7_took_place_at
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P7I_WITNESSED">
            <summary>
            crm:P7i_witnessed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P8_TOOK_PLACE_ON_OR_WITHIN">
            <summary>
            crm:P8_took_place_on_or_within
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P8I_WITNESSED">
            <summary>
            crm:P8i_witnessed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P9_CONSISTS_OF">
            <summary>
            crm:P9_consists_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P9I_FORMS_PART_OF">
            <summary>
            crm:P9i_forms_part_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P10_FALLS_WITHIN">
            <summary>
            crm:P10_falls_within
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P10I_CONTAINS">
            <summary>
            crm:P10i_contains
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P11_HAD_PARTICIPANT">
            <summary>
            crm:P11_had_participant
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P11I_PARTICIPATED_IN">
            <summary>
            crm:P11i_participated_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P12_OCCURRED_IN_THE_PRESENCE_OF">
            <summary>
            crm:P12_occurred_in_the_presence_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P12I_WAS_PRESENT_AT">
            <summary>
            crm:P12i_was_present_at
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P13_DESTROYED">
            <summary>
            crm:P13_destroyed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P13I_WAS_DESTROYED_BY">
            <summary>
            crm:P13i_was_destroyed_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P14_CARRIED_OUT_BY">
            <summary>
            crm:P14_carried_out_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P14I_PERFORMED">
            <summary>
            crm:P14i_performed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P15_WAS_INFLUENCED_BY">
            <summary>
            crm:P15_was_influenced_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P15I_INFLUENCED">
            <summary>
            crm:P15i_influenced
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P16_USED_SPECIFIC_OBJECT">
            <summary>
            crm:P16_used_specific_object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P16I_WAS_USED_FOR">
            <summary>
            crm:P16i_was_used_for
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P17_WAS_MOTIVATED_BY">
            <summary>
            crm:P17_was_motivated_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P17I_MOTIVATED">
            <summary>
            crm:P17i_motivated
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P19_WAS_INTENDED_USE_OF">
            <summary>
            crm:P19_was_intended_use_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P19I_WAS_MADE_FOR">
            <summary>
            crm:P19i_was_made_for
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P20_HAD_SPECIFIC_PURPOSE">
            <summary>
            crm:P20_had_specific_purpose
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P20I_WAS_PURPOSE_OF">
            <summary>
            crm:P20i_was_purpose_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P21_HAD_GENERAL_PURPOSE">
            <summary>
            crm:P21_had_general_purpose
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P21I_WAS_PURPOSE_OF">
            <summary>
            crm:P21i_was_purpose_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P22_TRANSFERRED_TITLE_TO">
            <summary>
            crm:P22_transferred_title_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P22I_ACQUIRED_TITLE_THROUGH">
            <summary>
            crm:P22i_acquired_title_through
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P23_TRANSFERRED_TITLE_FROM">
            <summary>
            crm:P23_transferred_title_from
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P23I_SURRENDERED_TITLE_THROUGH">
            <summary>
            crm:P23i_surrendered_title_through
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P24_TRANSFERRED_TITLE_OF">
            <summary>
            crm:P24_transferred_title_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P24I_CHANGED_OWNERSHIP_THROUGH">
            <summary>
            crm:P24i_changed_ownership_through
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P25_MOVED">
            <summary>
            crm:P25_moved
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P25I_MOVED_BY">
            <summary>
            crm:P25i_moved_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P26_MOVED_TO">
            <summary>
            crm:P26_moved_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P26I_WAS_DESTINATION_OF">
            <summary>
            crm:P26i_was_destination_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P27_MOVED_FROM">
            <summary>
            crm:P27_moved_from
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P27I_WAS_ORIGIN_OF">
            <summary>
            crm:P27i_was_origin_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P28_CUSTODY_SURRENDERED_BY">
            <summary>
            crm:P28_custody_surrendered_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P28I_SURRENDERED_CUSTODY_THROUGH">
            <summary>
            crm:P28i_surrendered_custody_through
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P29_CUSTODY_RECEIVED_BY">
            <summary>
            crm:P29_custody_received_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P29I_RECEIVED_CUSTODY_THROUGH">
            <summary>
            crm:P29i_received_custody_through
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P30_TRANSFERRED_CUSTODY_OF">
            <summary>
            crm:P30_transferred_custody_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P30I_CUSTODY_TRANSFERRED_THROUGH">
            <summary>
            crm:P30i_custody_transferred_through
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P31_HAS_MODIFIED">
            <summary>
            crm:P31_has_modified
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P31I_WAS_MODIFIED_BY">
            <summary>
            crm:P31i_was_modified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P32_USED_GENERAL_TECHNIQUE">
            <summary>
            crm:P32_used_general_technique
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P32I_WAS_TECHNIQUE_OF">
            <summary>
            crm:P32i_was_technique_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P33_USED_SPECIFIC_TECHNIQUE">
            <summary>
            crm:P33_used_specific_technique
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P33I_WAS_USED_BY">
            <summary>
            crm:P33i_was_used_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P34_CONCERNED">
            <summary>
            crm:P34_concerned
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P34I_WAS_ASSESSED_BY">
            <summary>
            crm:P34i_was_assessed_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P35_HAS_IDENTIFIED">
            <summary>
            crm:P35_has_identified
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P35I_WAS_IDENTIFIED_BY">
            <summary>
            crm:P35i_was_identified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P37_ASSIGNED">
            <summary>
            crm:P37_assigned
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P37I_WAS_ASSIGNED_BY">
            <summary>
            crm:P37i_was_assigned_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P38_DEASSIGNED">
            <summary>
            crm:P38_deassigned
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P38I_WAS_DEASSIGNED_BY">
            <summary>
            crm:P38i_was_deassigned_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P39_MEASURED">
            <summary>
            crm:P39_measured
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P39I_WAS_MEASURED_BY">
            <summary>
            crm:P39i_was_measured_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P40_OBSERVED_DIMENSION">
            <summary>
            crm:P40_observed_dimension
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P40I_WAS_OBSERVED_IN">
            <summary>
            crm:P40i_was_observed_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P41_CLASSIFIED">
            <summary>
            crm:P41_classified
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P41I_WAS_CLASSIFIED_BY">
            <summary>
            crm:P41i_was_classified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P42_ASSIGNED">
            <summary>
            crm:P42_assigned
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P42I_WAS_ASSIGNED_BY">
            <summary>
            crm:P42i_was_assigned_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P43_HAS_DIMENSION">
            <summary>
            crm:P43_has_dimension
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P43I_IS_DIMENSION_OF">
            <summary>
            crm:P43i_is_dimension_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P44_HAS_CONDITION">
            <summary>
            crm:P44_has_condition
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P44I_IS_CONDITION_OF">
            <summary>
            crm:P44i_is_condition_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P45_CONSISTS_OF">
            <summary>
            crm:P45_consists_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P45I_IS_INCORPORATED_IN">
            <summary>
            crm:P45i_is_incorporated_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P46_IS_COMPOSED_OF">
            <summary>
            crm:P46_is_composed_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P46I_FORMS_PART_OF">
            <summary>
            crm:P46i_forms_part_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P48_HAS_PREFERRED_IDENTIFIER">
            <summary>
            crm:P48_has_preferred_identifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P48I_IS_PREFERRED_IDENTIFIER_OF">
            <summary>
            crm:P48i_is_preferred_identifier_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P49_HAS_FORMER_OR_CURRENT_KEEPER">
            <summary>
            crm:P49_has_former_or_current_keeper
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P49I_IS_FORMER_OR_CURRENT_KEEPER_OF">
            <summary>
            crm:P49i_is_former_or_current_keeper_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P50_HAS_CURRENT_KEEPER">
            <summary>
            crm:P50_has_current_keeper
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P50I_IS_CURRENT_KEEPER_OF">
            <summary>
            crm:P50i_is_current_keeper_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P51_HAS_FORMER_OR_CURRENT_OWNER">
            <summary>
            crm:P51_has_former_or_current_owner
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P51I_IS_FORMER_OR_CURRENT_OWNER_OF">
            <summary>
            crm:P51i_is_former_or_current_owner_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P52_HAS_CURRENT_OWNER">
            <summary>
            crm:P52_has_current_owner
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P52I_IS_CURRENT_OWNER_OF">
            <summary>
            crm:P52i_is_current_owner_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P53_HAS_FORMER_OR_CURRENT_LOCATION">
            <summary>
            crm:P53_has_former_or_current_location
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P53I_IS_FORMER_OR_CURRENT_LOCATION_OF">
            <summary>
            crm:P53i_is_former_or_current_location_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P54_HAS_CURRENT_PERMANENT_LOCATION">
            <summary>
            crm:P54_has_current_permanent_location
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P54I_IS_CURRENT_PERMANENT_LOCATION_OF">
            <summary>
            crm:P54i_is_current_permanent_location_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P55_HAS_CURRENT_LOCATION">
            <summary>
            crm:P55_has_current_location
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P55I_CURRENTLY_HOLDS">
            <summary>
            crm:P55i_currently_holds
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P56_BEARS_FEATURE">
            <summary>
            crm:P56_bears_feature
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P56I_IS_FOUND_ON">
            <summary>
            crm:P56i_is_found_on
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P57_HAS_NUMBER_OF_PARTS">
            <summary>
            crm:P57_has_number_of_parts
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P58_HAS_SECTION_DEFINITION">
            <summary>
            crm:P58_has_section_definition
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P58I_DEFINES_SECTION">
            <summary>
            crm:P58i_defines_section
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P59_HAS_SECTION">
            <summary>
            crm:P59_has_section
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P59I_IS_LOCATED_ON_OR_WITHIN">
            <summary>
            crm:P59i_is_located_on_or_within
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P62_DEPICTS">
            <summary>
            crm:P62_depicts
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P62I_IS_DEPICTED_BY">
            <summary>
            crm:P62i_is_depicted_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P65_SHOWS_VISUAL_ITEM">
            <summary>
            crm:P65_shows_visual_item
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P65I_IS_SHOWN_BY">
            <summary>
            crm:P65i_is_shown_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P67_REFERS_TO">
            <summary>
            crm:P67_refers_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P67I_IS_REFERRED_TO_BY">
            <summary>
            crm:P67i_is_referred_to_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P68_FORESEES_USE_OF">
            <summary>
            crm:P68_foresees_use_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P68I_USE_FORESEEN_BY">
            <summary>
            crm:P68i_use_foreseen_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P69_IS_ASSOCIATED_WITH">
            <summary>
            crm:P69_is_associated_with
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P70_DOCUMENTS">
            <summary>
            crm:P70_documents
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P70I_IS_DOCUMENTED_IN">
            <summary>
            crm:P70i_is_documented_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P71_LISTS">
            <summary>
            crm:P71_lists
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P71I_IS_LISTED_IN">
            <summary>
            crm:P71i_is_listed_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P72_HAS_LANGUAGE">
            <summary>
            crm:P72_has_language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P72I_IS_LANGUAGE_OF">
            <summary>
            crm:P72i_is_language_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P73_HAS_TRANSLATION">
            <summary>
            crm:P73_has_translation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P73I_IS_TRANSLATION_OF">
            <summary>
            crm:P73i_is_translation_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P74_HAS_CURRENT_OR_FORMER_RESIDENCE">
            <summary>
            crm:P74_has_current_or_former_residence
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P74I_IS_CURRENT_OR_FORMER_RESIDENCE_OF">
            <summary>
            crm:P74i_is_current_or_former_residence_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P75_POSSESSES">
            <summary>
            crm:P75_possesses
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P75I_IS_POSSESSED_BY">
            <summary>
            crm:P75i_is_possessed_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P76_HAS_CONTACT_POINT">
            <summary>
            crm:P76_has_contact_point
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P76I_PROVIDES_ACCESS_TO">
            <summary>
            crm:P76i_provides_access_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P78_IS_IDENTIFIED_BY">
            <summary>
            crm:P78_is_identified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P78I_IDENTIFIES">
            <summary>
            crm:P78i_identifies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P79_BEGINNING_IS_QUALIFIED_BY">
            <summary>
            crm:P79_beginning_is_qualified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P80_END_IS_QUALIFIED_BY">
            <summary>
            crm:P80_end_is_qualified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P81_ONGOING_THROUGHOUT">
            <summary>
            crm:P81_ongoing_throughout
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P82_AT_SOME_TIME_WITHIN">
            <summary>
            crm:P82_at_some_time_within
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P83_HAD_AT_LEAST_DURATION">
            <summary>
            crm:P83_had_at_least_duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P83I_WAS_MINIMUM_DURATION_OF">
            <summary>
            crm:P83i_was_minimum_duration_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P84_HAD_AT_MOST_DURATION">
            <summary>
            crm:P84_had_at_most_duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P84I_WAS_MAXIMUM_DURATION_OF">
            <summary>
            crm:P84i_was_maximum_duration_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P86_FALLS_WITHIN">
            <summary>
            crm:P86_falls_within
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P86I_CONTAINS">
            <summary>
            crm:P86i_contains
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P87_IS_IDENTIFIED_BY">
            <summary>
            crm:P87_is_identified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P87I_IDENTIFIES">
            <summary>
            crm:P87i_identifies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P88_CONSISTS_OF">
            <summary>
            crm:P88_consists_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P88I_FORMS_PART_OF">
            <summary>
            crm:P88i_forms_part_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P89_FALLS_WITHIN">
            <summary>
            crm:P89_falls_within
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P89I_CONTAINS">
            <summary>
            crm:P89i_contains
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P90_HAS_VALUE">
            <summary>
            crm:P90_has_value
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P91_HAS_UNIT">
            <summary>
            crm:P91_has_unit
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P91I_IS_UNIT_OF">
            <summary>
            crm:P91i_is_unit_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P92_BROUGHT_INTO_EXISTENCE">
            <summary>
            crm:P92_brought_into_existence
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P92I_WAS_BROUGHT_INTO_EXISTENCE_BY">
            <summary>
            crm:P92i_was_brought_into_existence_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P93_TOOK_OUT_OF_EXISTENCE">
            <summary>
            crm:P93_took_out_of_existence
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P93I_WAS_TAKEN_OUT_OF_EXISTENCE_BY">
            <summary>
            crm:P93i_was_taken_out_of_existence_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P94_HAS_CREATED">
            <summary>
            crm:P94_has_created
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P94I_WAS_CREATED_BY">
            <summary>
            crm:P94i_was_created_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P95_HAS_FORMED">
            <summary>
            crm:P95_has_formed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P95I_WAS_FORMED_BY">
            <summary>
            crm:P95i_was_formed_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P96_BY_MOTHER">
            <summary>
            crm:P96_by_mother
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P96I_GAVE_BIRTH">
            <summary>
            crm:P96i_gave_birth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P97_FROM_FATHER">
            <summary>
            crm:P97_from_father
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P97I_WAS_FATHER_FOR">
            <summary>
            crm:P97i_was_father_for
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P98_BROUGHT_INTO_LIFE">
            <summary>
            crm:P98_brought_into_life
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P98I_WAS_BORN">
            <summary>
            crm:P98i_was_born
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P99_DISSOLVED">
            <summary>
            crm:P99_dissolved
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P99I_WAS_DISSOLVED_BY">
            <summary>
            crm:P99i_was_dissolved_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P100_WAS_DEATH_OF">
            <summary>
            crm:P100_was_death_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P100I_DIED_IN">
            <summary>
            crm:P100i_died_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P101_HAD_AS_GENERAL_USE">
            <summary>
            crm:P101_had_as_general_use
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P101I_WAS_USE_OF">
            <summary>
            crm:P101i_was_use_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P102_HAS_TITLE">
            <summary>
            crm:P102_has_title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P102I_IS_TITLE_OF">
            <summary>
            crm:P102i_is_title_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P103_WAS_INTENDED_FOR">
            <summary>
            crm:P103_was_intended_for
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P103I_WAS_INTENTION_OF">
            <summary>
            crm:P103i_was_intention_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P104_IS_SUBJECT_TO">
            <summary>
            crm:P104_is_subject_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P104I_APPLIES_TO">
            <summary>
            crm:P104i_applies_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P105_RIGHT_HELD_BY">
            <summary>
            crm:P105_right_held_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P105I_HAS_RIGHT_ON">
            <summary>
            crm:P105i_has_right_on
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P106_IS_COMPOSED_OF">
            <summary>
            crm:P106_is_composed_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P106I_FORMS_PART_OF">
            <summary>
            crm:P106i_forms_part_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P107_HAS_CURRENT_OR_FORMER_MEMBER">
            <summary>
            crm:P107_has_current_or_former_member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P107I_IS_CURRENT_OR_FORMER_MEMBER_OF">
            <summary>
            crm:P107i_is_current_or_former_member_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P108_HAS_PRODUCED">
            <summary>
            crm:P108_has_produced
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P108I_WAS_PRODUCED_BY">
            <summary>
            crm:P108i_was_produced_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P109_HAS_CURRENT_OR_FORMER_CURATOR">
            <summary>
            crm:P109_has_current_or_former_curator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P109I_IS_CURRENT_OR_FORMER_CURATOR_OF">
            <summary>
            crm:P109i_is_current_or_former_curator_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P110_AUGMENTED">
            <summary>
            crm:P110_augmented
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P110I_WAS_AUGMENTED_BY">
            <summary>
            crm:P110i_was_augmented_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P111_ADDED">
            <summary>
            crm:P111_added
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P111I_WAS_ADDED_BY">
            <summary>
            crm:P111i_was_added_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P112_DIMINISHED">
            <summary>
            crm:P112_diminished
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P112I_WAS_DIMINISHED_BY">
            <summary>
            crm:P112i_was_diminished_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P113_REMOVED">
            <summary>
            crm:P113_removed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P113I_WAS_REMOVED_BY">
            <summary>
            crm:P113i_was_removed_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P114_IS_EQUAL_IN_TIME_TO">
            <summary>
            crm:P114_is_equal_in_time_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P115_FINISHES">
            <summary>
            crm:P115_finishes
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P115I_IS_FINISHED_BY">
            <summary>
            crm:P115i_is_finished_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P116_STARTS">
            <summary>
            crm:P116_starts
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P116I_IS_STARTED_BY">
            <summary>
            crm:P116i_is_started_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P117_OCCURS_DURING">
            <summary>
            crm:P117_occurs_during
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P117I_INCLUDES">
            <summary>
            crm:P117i_includes
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P118_OVERLAPS_IN_TIME_WITH">
            <summary>
            crm:P118_overlaps_in_time_with
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P118I_IS_OVERLAPPED_IN_TIME_BY">
            <summary>
            crm:P118i_is_overlapped_in_time_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P119_MEETS_IN_TIME_WITH">
            <summary>
            crm:P119_meets_in_time_with
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P119I_IS_MET_IN_TIME_BY">
            <summary>
            crm:P119i_is_met_in_time_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P120_OCCURS_BEFORE">
            <summary>
            crm:P120_occurs_before
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P120I_OCCURS_AFTER">
            <summary>
            crm:P120i_occurs_after
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P121_OVERLAPS_WITH">
            <summary>
            crm:P121_overlaps_with
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P122_BORDERS_WITH">
            <summary>
            crm:P122_borders_with
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P123_RESULTED_IN">
            <summary>
            crm:P123_resulted_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P123I_RESULTED_FROM">
            <summary>
            crm:P123i_resulted_from
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P124_TRANSFORMED">
            <summary>
            crm:P124_transformed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P124I_WAS_TRANSFORMED_BY">
            <summary>
            crm:P124i_was_transformed_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P125_USED_OBJECT_OF_TYPE">
            <summary>
            crm:P125_used_object_of_type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P125I_WAS_TYPE_OF_OBJECT_USED_IN">
            <summary>
            crm:P125i_was_type_of_object_used_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P126_EMPLOYED">
            <summary>
            crm:P126_employed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P126I_WAS_EMPLOYED_IN">
            <summary>
            crm:P126i_was_employed_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P127_HAS_BROADER_TERM">
            <summary>
            crm:P127_has_broader_term
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P127I_HAS_NARROWER_TERM">
            <summary>
            crm:P127i_has_narrower_term
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P128_CARRIES">
            <summary>
            crm:P128_carries
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P128I_IS_CARRIED_BY">
            <summary>
            crm:P128i_is_carried_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P129_IS_ABOUT">
            <summary>
            crm:P129_is_about
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P129I_IS_SUBJECT_OF">
            <summary>
            crm:P129i_is_subject_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P130_SHOWS_FEATURES_OF">
            <summary>
            crm:P130_shows_features_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P130I_FEATURES_ARE_ALSO_FOUND_ON">
            <summary>
            crm:P130i_features_are_also_found_on
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P131_IS_IDENTIFIED_BY">
            <summary>
            crm:P131_is_identified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P131I_IDENTIFIES">
            <summary>
            crm:P131i_identifies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P132_OVERLAPS_WITH">
            <summary>
            crm:P132_overlaps_with
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P133_IS_SEPARATED_FROM">
            <summary>
            crm:P133_is_separated_from
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P134_CONTINUED">
            <summary>
            crm:P134_continued
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P134I_WAS_CONTINUED_BY">
            <summary>
            crm:P134i_was_continued_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P135_CREATED_TYPE">
            <summary>
            crm:P135_created_type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P135I_WAS_CREATED_BY">
            <summary>
            crm:P135i_was_created_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P136_WAS_BASED_ON">
            <summary>
            crm:P136_was_based_on
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P136I_SUPPORTED_TYPE_CREATION">
            <summary>
            crm:P136i_supported_type_creation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P137_EXEMPLIFIES">
            <summary>
            crm:P137_exemplifies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P137I_IS_EXEMPLIFIED_BY">
            <summary>
            crm:P137i_is_exemplified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P138_REPRESENTS">
            <summary>
            crm:P138_represents
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P138I_HAS_REPRESENTATION">
            <summary>
            crm:P138i_has_representation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P139_HAS_ALTERNATIVE_FORM">
            <summary>
            crm:P139_has_alternative_form
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P140_ASSIGNED_ATTRIBUTE_TO">
            <summary>
            crm:P140_assigned_attribute_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P140I_WAS_ATTRIBUTED_BY">
            <summary>
            crm:P140i_was_attributed_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P141_ASSIGNED">
            <summary>
            crm:P141_assigned
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P141I_WAS_ASSIGNED_BY">
            <summary>
            crm:P141i_was_assigned_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P142_USED_CONSTITUENT">
            <summary>
            crm:P142_used_constituent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P142I_WAS_USED_IN">
            <summary>
            crm:P142i_was_used_in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P143_JOINED">
            <summary>
            crm:P143_joined
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P143I_WAS_JOINED_BY">
            <summary>
            crm:P143i_was_joined_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P144_JOINED_WITH">
            <summary>
            crm:P144_joined_with
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P144I_GAINED_MEMBER_BY">
            <summary>
            crm:P144i_gained_member_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P145_SEPARATED">
            <summary>
            crm:P145_separated
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P145I_LEFT_BY">
            <summary>
            crm:P145i_left_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P146_SEPARATED_FROM">
            <summary>
            crm:P146_separated_from
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P146I_LOST_MEMBER_BY">
            <summary>
            crm:P146i_lost_member_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P147_CURATED">
            <summary>
            crm:P147_curated
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P147I_WAS_CURATED_BY">
            <summary>
            crm:P147i_was_curated_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P148_HAS_COMPONENT">
            <summary>
            crm:P148_has_component
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P148I_IS_COMPONENT_OF">
            <summary>
            crm:P148i_is_component_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P149_IS_IDENTIFIED_BY">
            <summary>
            crm:P149_is_identified_by
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.CRM.P149I_IDENTIFIES">
            <summary>
            crm:P149i_identifies
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC">
            <summary>
            DC represents the Dublin Core vocabulary (with DCAM, DCTERMS and DCTYPE extensions).
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.PREFIX">
            <summary>
            dc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.BASE_URI">
            <summary>
            http://purl.org/dc/elements/1.1/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DEREFERENCE_URI">
            <summary>
            https://www.dublincore.org/specifications/dublin-core/dcmi-terms/dublin_core_elements.rdf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.CONTRIBUTOR">
            <summary>
            dc:contributor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.COVERAGE">
            <summary>
            dc:coverage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.CREATOR">
            <summary>
            dc:creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DATE">
            <summary>
            dc:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DESCRIPTION">
            <summary>
            dc:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.FORMAT">
            <summary>
            dc:format
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.IDENTIFIER">
            <summary>
            dc:identifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.LANGUAGE">
            <summary>
            dc:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.PUBLISHER">
            <summary>
            dc:publisher
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.RELATION">
            <summary>
            dc:relation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.RIGHTS">
            <summary>
            dc:rights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.SOURCE">
            <summary>
            dc:source
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.SUBJECT">
            <summary>
            dc:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.TITLE">
            <summary>
            dc:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.TYPE">
            <summary>
            dc:type
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC.DCAM">
            <summary>
            DCAM extensions
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.PREFIX">
            <summary>
            dcam
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.BASE_URI">
            <summary>
            http://purl.org/dc/dcam/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.DEREFERENCE_URI">
            <summary>
            https://www.dublincore.org/specifications/dublin-core/dcmi-terms/dublin_core_abstract_model.rdf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.MEMBER_OF">
            <summary>
            dcam:memberOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCAM.VOCABULARY_ENCODING_SCHEME">
            <summary>
            dcam:VocabularyEncodingScheme
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC.DCTERMS">
            <summary>
            DCTERMS extensions
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PREFIX">
            <summary>
            dcterms
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.BASE_URI">
            <summary>
            http://purl.org/dc/terms/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DEREFERENCE_URI">
            <summary>
            https://www.dublincore.org/specifications/dublin-core/dcmi-terms/dublin_core_terms.rdf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ABSTRACT">
            <summary>
            dcterms:abstract
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ACCESS_RIGHTS">
            <summary>
            dcterms:accessRights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ACCRUAL_METHOD">
            <summary>
            dcterms:accrualMethod
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ACCRUAL_PERIODICITY">
            <summary>
            dcterms:accrualPeriodicity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ACCRUAL_POLICY">
            <summary>
            dcterms:accrualPolicy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.AGENT">
            <summary>
            dcterms:Agent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.AGENT_CLASS">
            <summary>
            dcterms:AgentClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ALTERNATIVE">
            <summary>
            dcterms:alternative
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.AUDIENCE">
            <summary>
            dcterms:audience
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.AVAILABLE">
            <summary>
            dcterms:available
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.BIBLIOGRAPHIC_CITATION">
            <summary>
            dcterms:bibliographicCitation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.BIBLIOGRAPHIC_RESOURCE">
            <summary>
            dcterms:BibliographicResource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.CONFORMS_TO">
            <summary>
            dcterms:conformsTo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.CONTRIBUTOR">
            <summary>
            dcterms:contributor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.COVERAGE">
            <summary>
            dcterms:coverage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.CREATED">
            <summary>
            dcterms:created
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.CREATOR">
            <summary>
            dcterms:creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DATE">
            <summary>
            dcterms:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DATE_ACCEPTED">
            <summary>
            dcterms:dateAccepted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DATE_COPYRIGHTED">
            <summary>
            dcterms:dateCopyrighted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DATE_SUBMITTED">
            <summary>
            dcterms:dateSubmitted
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DESCRIPTION">
            <summary>
            dcterms:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.EDUCATION_LEVEL">
            <summary>
            dcterms:educationLevel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.EXTENT">
            <summary>
            dcterms:extent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.FILE_FORMAT">
            <summary>
            dcterms:FileFormat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.FORMAT">
            <summary>
            dcterms:format
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.FREQUENCY">
            <summary>
            dcterms:Frequency
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.HAS_FORMAT">
            <summary>
            dcterms:hasFormat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.HAS_PART">
            <summary>
            dcterms:hasPart
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.HAS_VERSION">
            <summary>
            dcterms:hasVersion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IDENTIFIER">
            <summary>
            dcterms:identifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.INSTRUCTIONAL_METHOD">
            <summary>
            dcterms:instructionalMethod
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_FORMAT_OF">
            <summary>
            dcterms:isFormatOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_PART_OF">
            <summary>
            dcterms:isPartOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_REFERENCED_BY">
            <summary>
            dcterms:isReferencedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_REPLACED_BY">
            <summary>
            dcterms:isReplacedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_REQUIRED_BY">
            <summary>
            dcterms:isRequiredBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ISSUED">
            <summary>
            dcterms:issued
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IS_VERSION_OF">
            <summary>
            dcterms:isVersionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.JURISDICTION">
            <summary>
            dcterms:Jurisdiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LANGUAGE">
            <summary>
            dcterms:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LICENSE">
            <summary>
            dcterms:license
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LICENSE_DOCUMENT">
            <summary>
            dcterms:LicenseDocument
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LINGUISTIC_SYSTEM">
            <summary>
            dcterms:LinguisticSystem
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LOCATION">
            <summary>
            dcterms:Location
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LOCATION_PERIOD_OR_JURISDICTION">
            <summary>
            dcterms:LocationPeriodOrJurisdiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MEDIATOR">
            <summary>
            dcterms:mediator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MEDIA_TYPE">
            <summary>
            dcterms:MediaType
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MEDIA_TYPE_OR_EXTENT">
            <summary>
            dcterms:MediaTypeOrExtent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MEDIUM">
            <summary>
            dcterms:medium
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.METHOD_OF_ACCRUAL">
            <summary>
            dcterms:MethodOfAccrual
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.METHOD_OF_INSTRUCTION">
            <summary>
            dcterms:MethodOfInstruction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MODIFIED">
            <summary>
            dcterms:modified
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PERIOD_OF_TIME">
            <summary>
            dcterms:PeriodOfTime
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PHYSICAL_MEDIUM">
            <summary>
            dcterms:PhysicalMedium
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PHYSICAL_RESOURCE">
            <summary>
            dcterms:PhysicalResource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.POLICY">
            <summary>
            dcterms:Policy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PROVENANCE">
            <summary>
            dcterms:provenance
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PROVENANCE_STATEMENT">
            <summary>
            dcterms:ProvenanceStatement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PUBLISHER">
            <summary>
            dcterms:publisher
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.REFERENCES">
            <summary>
            dcterms:references
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RELATION">
            <summary>
            dcterms:relation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.REPLACES">
            <summary>
            dcterms:replaces
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.REQUIRES">
            <summary>
            dcterms:requires
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RIGHTS">
            <summary>
            dcterms:rights
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RIGHTS_STATEMENT">
            <summary>
            dcterms:RightsStatement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RIGHTS_HOLDER">
            <summary>
            dcterms:rightsHolder
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.SIZE_OR_DURATION">
            <summary>
            dcterms:SizeOrDuration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.SOURCE">
            <summary>
            dcterms:source
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.SPATIAL">
            <summary>
            dcterms:spatial
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.STANDARD">
            <summary>
            dcterms:Standard
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.SUBJECT">
            <summary>
            dcterms:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TABLE_OF_CONTENTS">
            <summary>
            dcterms:tableOfContents
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TEMPORAL">
            <summary>
            dcterms:temporal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TITLE">
            <summary>
            dcterms:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TYPE">
            <summary>
            dcterms:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.VALID">
            <summary>
            dcterms:valid
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DCMITYPE">
            <summary>
            dcterms:DCMIType
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.DDC">
            <summary>
            dcterms:DDC
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.IMT">
            <summary>
            dcterms:IMT
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LCC">
            <summary>
            dcterms:LCC
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.LCSH">
            <summary>
            dcterms:LCSH
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.MESH">
            <summary>
            dcterms:MESH
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.NLM">
            <summary>
            dcterms:NLM
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.TGN">
            <summary>
            dcterms:TGN
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.UDC">
            <summary>
            dcterms:UDC
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.BOX">
            <summary>
            dcterms:Box
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ISO3166">
            <summary>
            dcterms:ISO3166
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ISO639_2">
            <summary>
            dcterms:ISO639-2
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.ISO639_3">
            <summary>
            dcterms:ISO639-3
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.PERIOD">
            <summary>
            dcterms:Period
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.POINT">
            <summary>
            dcterms:Point
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RFC1766">
            <summary>
            dcterms:RFC1766
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RFC3066">
            <summary>
            dcterms:RFC3066
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RFC4646">
            <summary>
            dcterms:RFC4646
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.RFC5646">
            <summary>
            dcterms:RFC5646
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.URI">
            <summary>
            dcterms:URI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTERMS.W3CDTF">
            <summary>
            dcterms:W3CDTF
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DC.DCTYPE">
            <summary>
            DCTYPE extensions
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.PREFIX">
            <summary>
            dctype
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.BASE_URI">
            <summary>
            http://purl.org/dc/dcmitype/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.DEREFERENCE_URI">
            <summary>
            https://www.dublincore.org/specifications/dublin-core/dcmi-terms/dublin_core_type.rdf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.COLLECTION">
            <summary>
            dctype:Collection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.DATASET">
            <summary>
            dctype:Dataset
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.EVENT">
            <summary>
            dctype:Event
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.IMAGE">
            <summary>
            dctype:Image
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.INTERACTIVE_RESOURCE">
            <summary>
            dctype:InteractiveResource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.MOVING_IMAGE">
            <summary>
            dctype:MovingImage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.PHYSICAL_OBJECT">
            <summary>
            dctype:PhysicalObject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.SERVICE">
            <summary>
            dctype:Service
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.SOFTWARE">
            <summary>
            dctype:Software
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.SOUND">
            <summary>
            dctype:Sound
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.STILL_IMAGE">
            <summary>
            dctype:StillImage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DC.DCTYPE.TEXT">
            <summary>
            dctype:Text
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.DOAP">
            <summary>
            DOAP represents the Description-of-a-Project vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.PREFIX">
            <summary>
            doap
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.BASE_URI">
            <summary>
            http://usefulinc.com/ns/doap#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.DEREFERENCE_URI">
            <summary>
            http://usefulinc.com/ns/doap#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.PROJECT">
            <summary>
            doap:Project
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.VERSION">
            <summary>
            doap:Version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.SPECIFICATION">
            <summary>
            doap:Specification
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.REPOSITORY_CLASS">
            <summary>
            doap:Repository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.SVN_REPOSITORY">
            <summary>
            doap:SVNRepository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.GIT_REPOSITORY">
            <summary>
            doap:GitRepository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.BK_REPOSITORY">
            <summary>
            doap:BKRepository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.CVS_REPOSITORY">
            <summary>
            doap:CVSRepository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.ARCH_REPOSITORY">
            <summary>
            doap:ArchRepository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.HG_REPOSITORY">
            <summary>
            doap:HgRepository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.DARCS_REPOSITORY">
            <summary>
            doap:DarcsRepository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.BAZAAR_BRANCH">
            <summary>
            doap:BazaarBranch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.GIT_BRANCH">
            <summary>
            doap:GitBranch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.NAME">
            <summary>
            doap:name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.HOMEPAGE">
            <summary>
            doap:homepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.OLD_HOMEPAGE">
            <summary>
            doap:old-homepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.CREATED">
            <summary>
            doap:created
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.SHORTDESC">
            <summary>
            doap:shortdesc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.DESCRIPTION">
            <summary>
            doap:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.RELEASE">
            <summary>
            doap:release
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.MAILING_LIST">
            <summary>
            doap:mailing-list
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.SUPPORT_FORUM">
            <summary>
            doap:support-forum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.DEVELOPER_FORUM">
            <summary>
            doap:developer-forum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.CATEGORY">
            <summary>
            doap:category
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.LICENSE">
            <summary>
            doap:license
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.REPOSITORY_PROPERTY">
            <summary>
            doap:repository
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.REPOSITORYOF">
            <summary>
            doap:repositoryOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.ANON_ROOT">
            <summary>
            doap:anon-root
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.BROWSE">
            <summary>
            doap:browse
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.MODULE">
            <summary>
            doap:module
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.LOCATION">
            <summary>
            doap:location
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.DOWNLOAD_PAGE">
            <summary>
            doap:download-page
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.DOWNLOAD_MIRROR">
            <summary>
            doap:download-mirror
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.REVISION">
            <summary>
            doap:revision
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.FILE_RELEASE">
            <summary>
            doap:file-release
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.WIKI">
            <summary>
            doap:wiki
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.BUG_DATABASE">
            <summary>
            doap:bug-database
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.SCREENSHOTS">
            <summary>
            doap:screenshots
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.MAINTAINER">
            <summary>
            doap:maintainer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.DEVELOPER">
            <summary>
            doap:developer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.DOCUMENTER">
            <summary>
            doap:documenter
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.TRANSLATOR">
            <summary>
            doap:translator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.TESTER">
            <summary>
            doap:tester
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.HELPER">
            <summary>
            doap:helper
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.PROGRAMMING_LANGUAGE">
            <summary>
            doap:programming-language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.OS">
            <summary>
            doap:os
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.IMPLEMENTS">
            <summary>
            doap:implements
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.SERVICE_ENDPOINT">
            <summary>
            doap:service-endpoint
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.LANGUAGE">
            <summary>
            doap:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.VENDOR">
            <summary>
            doap:vendor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.PLATFORM">
            <summary>
            doap:platform
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.AUDIENCE">
            <summary>
            doap:audience
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.DOAP.BLOG">
            <summary>
            doap:blog
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.EARL">
            <summary>
            EARL represents the Evaluation-And-Report-Language vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.PREFIX">
            <summary>
            earl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.BASE_URI">
            <summary>
            http://www.w3.org/ns/earl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/ns/earl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.ASSERTED_BY">
            <summary>
            earl:assertedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.ASSERTION">
            <summary>
            earl:Assertion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.ASSERTOR">
            <summary>
            earl:Assertor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.AUTOMATIC">
            <summary>
            earl:automatic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.CANT_TELL">
            <summary>
            earl:cantTell
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.CANNOT_TELL">
            <summary>
            earl:CannotTell
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.FAIL">
            <summary>
            earl:Fail
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.FAILED">
            <summary>
            earl:failed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.INFO">
            <summary>
            earl:info
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.INAPPLICABLE">
            <summary>
            earl:inapplicable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.MAIN_ASSERTOR">
            <summary>
            earl:mainAssertor
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.MANUAL">
            <summary>
            earl:manual
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.MODE">
            <summary>
            earl:mode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.NOT_APPLICABLE">
            <summary>
            earl:NotApplicable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.NOT_TESTED">
            <summary>
            earl:NotTested
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.OUTCOME">
            <summary>
            earl:outcome
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.OUTCOME_VALUE">
            <summary>
            earl:OutcomeValue
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.PASS">
            <summary>
            earl:Pass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.PASSED">
            <summary>
            earl:passed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.POINTER">
            <summary>
            earl:pointer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.RESULT">
            <summary>
            earl:result
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.SEMIAUTO">
            <summary>
            earl:semiAuto
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.SOFTWARE">
            <summary>
            earl:Software
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.SUBJECT">
            <summary>
            earl:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.TEST">
            <summary>
            earl:test
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.TEST_CASE">
            <summary>
            earl:TestCase
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.TEST_CRITERION">
            <summary>
            earl:TestCriterion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.TEST_MODE">
            <summary>
            earl:TestMode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.TEST_REQUIREMENT">
            <summary>
            earl:TestRequirement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.TEST_RESULT">
            <summary>
            earl:TestResult
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.TEST_SUBJECT">
            <summary>
            earl:TestSubject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.UNDISCLOSED">
            <summary>
            earl:undisclosed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.UNKNOWN_MODE">
            <summary>
            earl:unknownMode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.EARL.UNTESTED">
            <summary>
            earl:untested
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.FOAF">
            <summary>
            FOAF represents the Friend-of-a-Friend vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PREFIX">
            <summary>
            foaf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BASE_URI">
            <summary>
            http://xmlns.com/foaf/0.1/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DEREFERENCE_URI">
            <summary>
            http://xmlns.com/foaf/0.1/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.AGENT">
            <summary>
            foaf:Agent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PERSON">
            <summary>
            foaf:Person
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.NAME">
            <summary>
            foaf:name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TITLE">
            <summary>
            foaf:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IMG">
            <summary>
            foaf:img
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DEPICTION">
            <summary>
            foaf:depiction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DEPICTS">
            <summary>
            foaf:depicts
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FAMILY_NAME">
            <summary>
            foaf:familyName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GIVEN_NAME">
            <summary>
            foaf:givenName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.KNOWS">
            <summary>
            foaf:knows
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SKYPE_ID">
            <summary>
            foaf:skypeID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BASED_NEAR">
            <summary>
            foaf:based_near
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.AGE">
            <summary>
            foaf:age
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MADE">
            <summary>
            foaf:made
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MAKER">
            <summary>
            foaf:maker
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PRIMARY_TOPIC">
            <summary>
            foaf:primaryTopic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IS_PRIMARY_TOPIC_OF">
            <summary>
            foaf:isPrimaryTopicOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PROJECT">
            <summary>
            foaf:Project
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ORGANIZATION">
            <summary>
            foaf:Organization
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GROUP">
            <summary>
            foaf:Group
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DOCUMENT">
            <summary>
            foaf:Document
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.IMAGE">
            <summary>
            foaf:Image
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MEMBER">
            <summary>
            foaf:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FOCUS">
            <summary>
            foaf:focus
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FUNDED_BY">
            <summary>
            foaf:fundedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GEEK_CODE">
            <summary>
            foaf:geekcode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.THEME">
            <summary>
            foaf:theme
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.NICK">
            <summary>
            foaf:nick
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MBOX">
            <summary>
            foaf:mbox
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.HOMEPAGE">
            <summary>
            foaf:homepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WEBLOG">
            <summary>
            foaf:weblog
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.OPEN_ID">
            <summary>
            foaf:openid
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.JABBER_ID">
            <summary>
            foaf:jabberID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.AIM_CHAT_ID">
            <summary>
            foaf:aimChatID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ICQ_CHAT_ID">
            <summary>
            foaf:icqChatID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MSN_CHAT_ID">
            <summary>
            foaf:msnChatID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.YAHOO_CHAT_ID">
            <summary>
            foaf:yahooChatID
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MYERS_BRIGGS">
            <summary>
            foaf:myersBriggs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.DNA_CHECKSUM">
            <summary>
            foaf:dnaChecksum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MEMBERSHIP_CLASS">
            <summary>
            foaf:membershipClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.HOLDS_ACCOUNT">
            <summary>
            foaf:holdsAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.FIRSTNAME">
            <summary>
            foaf:firstName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SURNAME">
            <summary>
            foaf:surname
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PLAN">
            <summary>
            foaf:plan
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.MBOX_SHA1SUM">
            <summary>
            foaf:mbox_sha1sum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.INTEREST">
            <summary>
            foaf:interest
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TOPIC_INTEREST">
            <summary>
            foaf:topic_interest
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TOPIC">
            <summary>
            foaf:topic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PAGE">
            <summary>
            foaf:page
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WORKPLACE_HOMEPAGE">
            <summary>
            foaf:workplaceHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.WORKINFO_HOMEPAGE">
            <summary>
            foaf:workinfoHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SCHOOL_HOMEPAGE">
            <summary>
            foaf:schoolHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PUBLICATIONS">
            <summary>
            foaf:publications
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.CURRENT_PROJECT">
            <summary>
            foaf:currentProject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PAST_PROJECT">
            <summary>
            foaf:pastProject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT">
            <summary>
            foaf:account
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_ACCOUNT">
            <summary>
            foaf:OnlineAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_CHAT_ACCOUNT">
            <summary>
            foaf:OnlineChatAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_ECOMMERCE_ACCOUNT">
            <summary>
            foaf:OnlineEcommerceAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ONLINE_GAMING_ACCOUNT">
            <summary>
            foaf:OnlineGamingAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT_NAME">
            <summary>
            foaf:accountName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.ACCOUNT_SERVICE_HOMEPAGE">
            <summary>
            foaf:accountServiceHomepage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PERSONAL_PROFILE_DOCUMENT">
            <summary>
            foaf:PersonalProfileDocument
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.TIPJAR">
            <summary>
            foaf:tipjar
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.SHA1">
            <summary>
            foaf:sha1
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.THUMBNAIL">
            <summary>
            foaf:thumbnail
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.LOGO">
            <summary>
            foaf:logo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.PHONE">
            <summary>
            foaf:phone
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.STATUS">
            <summary>
            foaf:status
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.GENDER">
            <summary>
            foaf:gender
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.FOAF.BIRTHDAY">
            <summary>
            foaf:birthday
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.GEO">
            <summary>
            GEO represents the W3C GEO vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.PREFIX">
            <summary>
            geo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.BASE_URI">
            <summary>
            http://www.w3.org/2003/01/geo/wgs84_pos#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/2003/01/geo/wgs84_pos#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LAT">
            <summary>
            geo:lat
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LONG">
            <summary>
            geo:long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LAT_LONG">
            <summary>
            geo:lat_long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.ALT">
            <summary>
            geo:alt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.POINT">
            <summary>
            geo:Point
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.SPATIAL_THING">
            <summary>
            geo:SpatialThing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.GEO.LOCATION">
            <summary>
            geo:location
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.OWL">
            <summary>
            OWL represents the OWL vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.PREFIX">
            <summary>
            owl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BASE_URI">
            <summary>
            http://www.w3.org/2002/07/owl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/2002/07/owl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONTOLOGY">
            <summary>
            owl:Ontology
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.IMPORTS">
            <summary>
            owl:imports
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.CLASS">
            <summary>
            owl:Class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INDIVIDUAL">
            <summary>
            owl:Individual
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.THING">
            <summary>
            owl:Thing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.NOTHING">
            <summary>
            owl:Nothing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.NAMED_INDIVIDUAL">
            <summary>
            owl:NamedIndividual
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.RESTRICTION">
            <summary>
            owl:Restriction
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ON_PROPERTY">
            <summary>
            owl:onProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.EQUIVALENT_CLASS">
            <summary>
            owl:equivalentClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DEPRECATED_CLASS">
            <summary>
            owl:DeprecatedClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.EQUIVALENT_PROPERTY">
            <summary>
            owl:equivalentProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DEPRECATED_PROPERTY">
            <summary>
            owl:DeprecatedProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INVERSE_OF">
            <summary>
            owl:inverseOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DATATYPE_PROPERTY">
            <summary>
            owl:DatatypeProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.OBJECT_PROPERTY">
            <summary>
            owl:ObjectProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.TRANSITIVE_PROPERTY">
            <summary>
            owl:TransitiveProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SYMMETRIC_PROPERTY">
            <summary>
            owl:SymmetricProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.FUNCTIONAL_PROPERTY">
            <summary>
            owl:FunctionalProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INVERSE_FUNCTIONAL_PROPERTY">
            <summary>
            owl:InverseFunctionalProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ANNOTATION_PROPERTY">
            <summary>
            owl:AnnotationProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONTOLOGY_PROPERTY">
            <summary>
            owl:OntologyProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ALL_VALUES_FROM">
            <summary>
            owl:allValuesFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SOME_VALUES_FROM">
            <summary>
            owl:someValuesFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.HAS_VALUE">
            <summary>
            owl:hasValue
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MIN_CARDINALITY">
            <summary>
            owl:minCardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MAX_CARDINALITY">
            <summary>
            owl:maxCardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.CARDINALITY">
            <summary>
            owl:cardinality
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SAME_AS">
            <summary>
            owl:sameAs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DIFFERENT_FROM">
            <summary>
            owl:differentFrom
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MEMBERS">
            <summary>
            owl:members
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DISTINCT_MEMBERS">
            <summary>
            owl:distinctMembers
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INTERSECTION_OF">
            <summary>
            owl:intersectionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.UNION_OF">
            <summary>
            owl:unionOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.COMPLEMENT_OF">
            <summary>
            owl:complementOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ONE_OF">
            <summary>
            owl:oneOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DATA_RANGE">
            <summary>
            owl:DataRange
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BACKWARD_COMPATIBLE_WITH">
            <summary>
            owl:backwardCompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.INCOMPATIBLE_WITH">
            <summary>
            owl:incompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DISJOINT_WITH">
            <summary>
            owl:disjointWith
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.PRIOR_VERSION">
            <summary>
            owl:priorVersion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.VERSION_INFO">
            <summary>
            owl:versionInfo
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.VERSION_IRI">
            <summary>
            owl:versionIRI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.DISJOINT_UNION_OF">
            <summary>
            owl:disjointUnionOf [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ALL_DISJOINT_CLASSES">
            <summary>
            owl:AllDisjointClasses [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ALL_DIFFERENT">
            <summary>
            owl:AllDifferent [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ALL_DISJOINT_PROPERTIES">
            <summary>
            owl:AllDisjointProperties [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ASYMMETRIC_PROPERTY">
            <summary>
            owl:AsymmetricProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.REFLEXIVE_PROPERTY">
            <summary>
            owl:ReflexiveProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.IRREFLEXIVE_PROPERTY">
            <summary>
            owl:IrreflexiveProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.QUALIFIED_CARDINALITY">
            <summary>
            owl:qualifiedCardinality [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MIN_QUALIFIED_CARDINALITY">
            <summary>
            owl:minQualifiedCardinality [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.MAX_QUALIFIED_CARDINALITY">
            <summary>
            owl:maxQualifiedCardinality [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ON_CLASS">
            <summary>
            owl:onClass [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ON_DATARANGE">
            <summary>
            owl:onDataRange [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.PROPERTY_DISJOINT_WITH">
            <summary>
            owl:propertyDisjointWith [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.HAS_SELF">
            <summary>
            owl:hasSelf [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.NEGATIVE_PROPERTY_ASSERTION">
            <summary>
            owl:NegativePropertyAssertion [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.SOURCE_INDIVIDUAL">
            <summary>
            owl:sourceIndividual [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ASSERTION_PROPERTY">
            <summary>
            owl:assertionProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.TARGET_INDIVIDUAL">
            <summary>
            owl:targetIndividual [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.TARGET_VALUE">
            <summary>
            owl:targetValue [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.HAS_KEY">
            <summary>
            owl:hasKey [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.PROPERTY_CHAIN_AXIOM">
            <summary>
            owl:propertyChainAxiom [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.TOP_PROPERTY">
            <summary>
            owl:topProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.TOP_OBJECT_PROPERTY">
            <summary>
            owl:topObjectProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.TOP_DATA_PROPERTY">
            <summary>
            owl:topDataProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BOTTOM_PROPERTY">
            <summary>
            owl:bottomProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BOTTOM_OBJECT_PROPERTY">
            <summary>
            owl:bottomObjectProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.BOTTOM_DATA_PROPERTY">
            <summary>
            owl:bottomDataProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.AXIOM">
            <summary>
            owl:Axiom [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ANNOTATED_SOURCE">
            <summary>
            owl:annotatedSource [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ANNOTATED_PROPERTY">
            <summary>
            owl:annotatedProperty [OWL2]
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.OWL.ANNOTATED_TARGET">
            <summary>
            owl:annotatedTarget [OWL2]
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.RDF">
            <summary>
            RDF represents the RDF vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PREFIX">
            <summary>
            rdf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.BASE_URI">
            <summary>
            http://www.w3.org/1999/02/22-rdf-syntax-ns#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/1999/02/22-rdf-syntax-ns#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.BAG">
            <summary>
            rdf:Bag
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.SEQ">
            <summary>
            rdf:Seq
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.ALT">
            <summary>
            rdf:Alt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.STATEMENT">
            <summary>
            rdf:Statement
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PROPERTY">
            <summary>
            rdf:Property
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.XML_LITERAL">
            <summary>
            rdf:XMLLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.HTML">
            <summary>
            rdf:HTML
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.JSON">
            <summary>
            rdf:JSON
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.LIST">
            <summary>
            rdf:List
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.NIL">
            <summary>
            rdf:nil
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.LI">
            <summary>
            rdf:li
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.SUBJECT">
            <summary>
            rdf:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.PREDICATE">
            <summary>
            rdf:predicate
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.OBJECT">
            <summary>
            rdf:object
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.TYPE">
            <summary>
            rdf:type
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.VALUE">
            <summary>
            rdf:value
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.FIRST">
            <summary>
            rdf:first
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDF.REST">
            <summary>
            rdf:rest
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.RDFS">
            <summary>
            RDFS represents the RDFS vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.PREFIX">
            <summary>
            rdfs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.BASE_URI">
            <summary>
            http://www.w3.org/2000/01/rdf-schema#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/2000/01/rdf-schema#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.RESOURCE">
            <summary>
            rdfs:Resource
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CLASS">
            <summary>
            rdfs:Class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.LITERAL">
            <summary>
            rdfs:Literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CONTAINER">
            <summary>
            rdfs:Container
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.DATATYPE">
            <summary>
            rdfs:Datatype
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.CONTAINER_MEMBERSHIP_PROPERTY">
            <summary>
            rdfs:ContainerMembershipProperty
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.RANGE">
            <summary>
            rdfs:range
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.DOMAIN">
            <summary>
            rdfs:domain
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SUB_CLASS_OF">
            <summary>
            rdfs:subClassOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SUB_PROPERTY_OF">
            <summary>
            rdfs:subPropertyOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.LABEL">
            <summary>
            rdfs:label
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.COMMENT">
            <summary>
            rdfs:comment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.MEMBER">
            <summary>
            rdfs:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.SEE_ALSO">
            <summary>
            rdfs:seeAlso
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFS.IS_DEFINED_BY">
            <summary>
            rdfs:isDefinedBy
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.RDFSHARP">
            <summary>
            RDFSHARP represents the vocabulary of this library.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFSHARP.PREFIX">
            <summary>
            rdfsharp
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFSHARP.BASE_URI">
            <summary>
            https://rdfsharp.codeplex.com/
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.RDFSHARP.DEREFERENCE_URI">
            <summary>
            https://rdfsharp.codeplex.com/
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SHACL">
            <summary>
            SHACL represents the W3C SHACL Core vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PREFIX">
            <summary>
            sh
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.BASE_URI">
            <summary>
            http://www.w3.org/ns/shacl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/ns/shacl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SHAPE">
            <summary>
            sh:Shape
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE_SHAPE">
            <summary>
            sh:NodeShape
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PROPERTY_SHAPE">
            <summary>
            sh:PropertyShape
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DEACTIVATED">
            <summary>
            sh:deactivated
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MESSAGE">
            <summary>
            sh:message
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SEVERITY_PROPERTY">
            <summary>
            sh:severity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.TARGET_CLASS">
            <summary>
            sh:targetClass
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.TARGET_NODE">
            <summary>
            sh:targetNode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.TARGET_OBJECTS_OF">
            <summary>
            sh:targetObjectsOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.TARGET_SUBJECTS_OF">
            <summary>
            sh:targetSubjectsOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.BLANK_NODE">
            <summary>
            sh:BlankNode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.BLANK_NODE_OR_IRI">
            <summary>
            sh:BlankNodeOrIRI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.BLANK_NODE_OR_LITERAL">
            <summary>
            sh:BlankNodeOrLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.IRI">
            <summary>
            sh:IRI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.IRI_OR_LITERAL">
            <summary>
            sh:IRIOrLiteral
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LITERAL">
            <summary>
            sh:Literal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.VALIDATION_REPORT">
            <summary>
            sh:ValidationReport
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CONFORMS">
            <summary>
            sh:conforms
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.RESULT">
            <summary>
            sh:result
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SHAPES_GRAPH_WELL_FORMED">
            <summary>
            sh:shapesGraphWellFormed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.ABSTRACT_RESULT">
            <summary>
            sh:AbstractResult
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.VALIDATION_RESULT">
            <summary>
            sh:ValidationResult
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SEVERITY_CLASS">
            <summary>
            sh:Severity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.INFO">
            <summary>
            sh:Info
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.VIOLATION">
            <summary>
            sh:Violation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.WARNING">
            <summary>
            sh:Warning
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DETAIL">
            <summary>
            sh:detail
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.FOCUS_NODE">
            <summary>
            sh:focusNode
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.RESULT_MESSAGE">
            <summary>
            sh:resultMessage
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.RESULT_PATH">
            <summary>
            sh:resultPath
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.RESULT_SEVERITY">
            <summary>
            sh:resultSeverity
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SOURCE_CONSTRAINT">
            <summary>
            sh:sourceConstraint
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SOURCE_SHAPE">
            <summary>
            sh:sourceShape
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SOURCE_CONSTRAINT_COMPONENT">
            <summary>
            sh:sourceConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.VALUE">
            <summary>
            sh:value
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SHAPES_GRAPH">
            <summary>
            sh:shapesGraph
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SUGGESTED_SHAPES_GRAPH">
            <summary>
            sh:suggestedShapesGraph
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.ENTAILMENT">
            <summary>
            sh:entailment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PATH">
            <summary>
            sh:path
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.INVERSE_PATH">
            <summary>
            sh:inversePath
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.ALTERNATIVE_PATH">
            <summary>
            sh:alternativePath
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.ZERO_OR_MORE_PATH">
            <summary>
            sh:zeroOrMorePath
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.ONE_OR_MORE_PATH">
            <summary>
            sh:oneOrMorePath
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.ZERO_OR_ONE_PATH">
            <summary>
            sh:zeroOrOnePath
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DEFAULT_VALUE">
            <summary>
            sh:defaultValue
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DESCRIPTION">
            <summary>
            sh:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.GROUP">
            <summary>
            sh:group
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NAME">
            <summary>
            sh:name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.ORDER">
            <summary>
            sh:order
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PROPERTY_GROUP">
            <summary>
            sh:PropertyGroup
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PARAMETERIZABLE">
            <summary>
            sh:Parameterizable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PARAMETER_CLASS">
            <summary>
            sh:Parameter
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PARAMETER_PROPERTY">
            <summary>
            sh:parameter
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LABEL_TEMPLATE">
            <summary>
            sh:labelTemplate
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.OPTIONAL">
            <summary>
            sh:optional
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CONSTRAINT_COMPONENT">
            <summary>
            sh:ConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.VALIDATOR_PROPERTY">
            <summary>
            sh:validator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE_VALIDATOR">
            <summary>
            sh:nodeValidator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PROPERTY_VALIDATOR">
            <summary>
            sh:propertyValidator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.VALIDATOR_CLASS">
            <summary>
            sh:Validator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_ASK_VALIDATOR">
            <summary>
            sh:SPARQLAskValidator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_SELECT_VALIDATOR">
            <summary>
            sh:SPARQLSelectValidator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.AND_CONSTRAINT_COMPONENT">
            <summary>
            sh:AndConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.AND_CONSTRAINT_COMPONENT_AND">
            <summary>
            sh:AndConstraintComponent-and
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.AND">
            <summary>
            sh:and
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CLASS_CONSTRAINT_COMPONENT">
            <summary>
            sh:ClassConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CLASS_CONSTRAINT_COMPONENT_CLASS">
            <summary>
            sh:ClassConstraintComponent-class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CLASS">
            <summary>
            sh:class
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CLOSED_CONSTRAINT_COMPONENT">
            <summary>
            sh:ClosedConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CLOSED_CONSTRAINT_COMPONENT_CLOSED">
            <summary>
            sh:ClosedConstraintComponent-closed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CLOSED_CONSTRAINT_COMPONENT_IGNORED_PROPERTIES">
            <summary>
            sh:ClosedConstraintComponent-ignoredProperties
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CLOSED">
            <summary>
            sh:closed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.IGNORED_PROPERTIES">
            <summary>
            sh:ignoredProperties
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DATATYPE_CONSTRAINT_COMPONENT">
            <summary>
            sh:DatatypeConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DATATYPE_CONSTRAINT_COMPONENT_DATATYPE">
            <summary>
            sh:DatatypeConstraintComponent-datatype
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DATATYPE">
            <summary>
            sh:datatype
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DISJOINT_CONSTRAINT_COMPONENT">
            <summary>
            sh:DisjointConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DISJOINT_CONSTRAINT_COMPONENT_DISJOINT">
            <summary>
            sh:DisjointConstraintComponent-disjoint
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DISJOINT">
            <summary>
            sh:disjoint
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.EQUALS_CONSTRAINT_COMPONENT">
            <summary>
            sh:EqualsConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.EQUALS_CONSTRAINT_COMPONENT_EQUALS">
            <summary>
            sh:EqualsConstraintComponent-equals
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.EQUALS">
            <summary>
            sh:equals
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.HAS_VALUE_CONSTRAINT_COMPONENT">
            <summary>
            sh:HasValueConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.HAS_VALUE_CONSTRAINT_COMPONENT_HAS_VALUE">
            <summary>
            sh:HasValueConstraintComponent-hasValue
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.HAS_VALUE">
            <summary>
            sh:hasValue
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.IN_CONSTRAINT_COMPONENT">
            <summary>
            sh:InConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.IN_CONSTRAINT_COMPONENT_IN">
            <summary>
            sh:InConstraintComponent-in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.IN">
            <summary>
            sh:in
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LANGUAGE_IN_CONSTRAINT_COMPONENT">
            <summary>
            sh:LanguageInConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LANGUAGE_IN_CONSTRAINT_COMPONENT_LANGUAGE_IN">
            <summary>
            sh:LanguageInConstraintComponent-languageIn
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LANGUAGE_IN">
            <summary>
            sh:languageIn
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LESS_THAN_CONSTRAINT_COMPONENT">
            <summary>
            sh:LessThanConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LESS_THAN_CONSTRAINT_COMPONENT_LESS_THAN">
            <summary>
            sh:LessThanConstraintComponent-lessThan
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LESS_THAN">
            <summary>
            sh:lessThan
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LESS_THAN_OR_EQUALS_CONSTRAINT_COMPONENT">
            <summary>
            sh:LessThanOrEqualsConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LESS_THAN_OR_EQUALS_CONSTRAINT_COMPONENT_LESS_THAN_OR_EQUALS">
            <summary>
            sh:LessThanOrEqualsConstraintComponent-lessThanOrEquals
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.LESS_THAN_OR_EQUALS">
            <summary>
            sh:lessThanOrEquals
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_COUNT_CONSTRAINT_COMPONENT">
            <summary>
            sh:MaxCountConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_COUNT_CONSTRAINT_COMPONENT_MAX_COUNT">
            <summary>
            sh:MaxCountConstraintComponent-maxCount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_COUNT">
            <summary>
            sh:maxCount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_EXCLUSIVE_CONSTRAINT_COMPONENT">
            <summary>
            sh:MaxExclusiveConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_EXCLUSIVE_CONSTRAINT_COMPONENT_MAX_EXCLUSIVE">
            <summary>
            sh:MaxExclusiveConstraintComponent-maxExclusive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_EXCLUSIVE">
            <summary>
            sh:maxExclusive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_INCLUSIVE_CONSTRAINT_COMPONENT">
            <summary>
            sh:MaxInclusiveConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_INCLUSIVE_CONSTRAINT_COMPONENT_MAX_INCLUSIVE">
            <summary>
            sh:MaxInclusiveConstraintComponent-maxInclusive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_INCLUSIVE">
            <summary>
            sh:maxInclusive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_LENGTH_CONSTRAINT_COMPONENT">
            <summary>
            sh:MaxLengthConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_LENGTH_CONSTRAINT_COMPONENT_MAX_LENGTH">
            <summary>
            sh:MaxLengthConstraintComponent-maxLength
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MAX_LENGTH">
            <summary>
            sh:maxLength
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_COUNT_CONSTRAINT_COMPONENT">
            <summary>
            sh:MinCountConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_COUNT_CONSTRAINT_COMPONENT_MIN_COUNT">
            <summary>
            sh:MinCountConstraintComponent-minCount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_COUNT">
            <summary>
            sh:minCount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_EXCLUSIVE_CONSTRAINT_COMPONENT">
            <summary>
            sh:MinExclusiveConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_EXCLUSIVE_CONSTRAINT_COMPONENT_MIN_EXCLUSIVE">
            <summary>
            sh:MinExclusiveConstraintComponent-minExclusive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_EXCLUSIVE">
            <summary>
            sh:minExclusive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_INCLUSIVE_CONSTRAINT_COMPONENT">
            <summary>
            sh:MinInclusiveConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_INCLUSIVE_CONSTRAINT_COMPONENT_MIN_INCLUSIVE">
            <summary>
            sh:MinInclusiveConstraintComponent-minInclusive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_INCLUSIVE">
            <summary>
            sh:minInclusive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_LENGTH_CONSTRAINT_COMPONENT">
            <summary>
            sh:MinLengthConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_LENGTH_CONSTRAINT_COMPONENT_MIN_LENGTH">
            <summary>
            sh:MinLengthConstraintComponent-minLength
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.MIN_LENGTH">
            <summary>
            sh:minLength
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE_CONSTRAINT_COMPONENT">
            <summary>
            sh:NodeConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE_CONSTRAINT_COMPONENT_NODE">
            <summary>
            sh:NodeConstraintComponent-node
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE">
            <summary>
            sh:node
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE_KIND_CONSTRAINT_COMPONENT">
            <summary>
            sh:NodeKindConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE_KIND_CONSTRAINT_COMPONENT_NODE_KIND">
            <summary>
            sh:NodeKindConstraintComponent-nodeKind
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE_KIND">
            <summary>
            sh:nodeKind
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NODE_KIND_CLASS">
            <summary>
            sh:NodeKind
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NOT_CONSTRAINT_COMPONENT">
            <summary>
            sh:NotConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NOT_CONSTRAINT_COMPONENT_NOT">
            <summary>
            sh:NotConstraintComponent-not
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NOT">
            <summary>
            sh:not
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.OR_CONSTRAINT_COMPONENT">
            <summary>
            sh:OrConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.OR_CONSTRAINT_COMPONENT_OR">
            <summary>
            sh:OrConstraintComponent-or
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.OR">
            <summary>
            sh:or
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PATTERN_CONSTRAINT_COMPONENT">
            <summary>
            sh:PatternConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PATTERN_CONSTRAINT_COMPONENT_PATTERN">
            <summary>
            sh:PatternConstraintComponent-pattern
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PATTERN_CONSTRAINT_COMPONENT_FLAGS">
            <summary>
            sh:PatternConstraintComponent-flags
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.FLAGS">
            <summary>
            sh:flags
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PATTERN">
            <summary>
            sh:pattern
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PROPERTY_CONSTRAINT_COMPONENT">
            <summary>
            sh:PropertyConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PROPERTY_CONSTRAINT_COMPONENT_PROPERTY">
            <summary>
            sh:PropertyConstraintComponent-property
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PROPERTY">
            <summary>
            sh:property
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MAX_COUNT_CONSTRAINT_COMPONENT">
            <summary>
            sh:QualifiedMaxCountConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MAX_COUNT_CONSTRAINT_COMPONENT_QUALIFIED_MAX_COUNT">
            <summary>
            sh:QualifiedMaxCountConstraintComponent-qualifiedMaxCount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MAX_COUNT_CONSTRAINT_COMPONENT_QUALIFIED_VALUE_SHAPE">
            <summary>
            sh:QualifiedMaxCountConstraintComponent-qualifiedValueShape
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MAX_COUNT_CONSTRAINT_COMPONENT_QUALIFIED_VALUE_SHAPES_DISJOINT">
            <summary>
            sh:QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MIN_COUNT_CONSTRAINT_COMPONENT">
            <summary>
            sh:QualifiedMinCountConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MIN_COUNT_CONSTRAINT_COMPONENT_QUALIFIED_MIN_COUNT">
            <summary>
            sh:QualifiedMinCountConstraintComponent-qualifiedMinCount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MIN_COUNT_CONSTRAINT_COMPONENT_QUALIFIED_VALUE_SHAPE">
            <summary>
            sh:QualifiedMinCountConstraintComponent-qualifiedValueShape
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MIN_COUNT_CONSTRAINT_COMPONENT_QUALIFIED_VALUE_SHAPES_DISJOINT">
            <summary>
            sh:QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MAX_COUNT">
            <summary>
            sh:qualifiedMaxCount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_MIN_COUNT">
            <summary>
            sh:qualifiedMinCount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.QUALIFIED_VALUE_SHAPE">
            <summary>
            sh:qualifiedValueShape
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.UNIQUE_LANG_CONSTRAINT_COMPONENT">
            <summary>
            sh:UniqueLangConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.UNIQUE_LANG_CONSTRAINT_COMPONENT_UNIQUE_LANG">
            <summary>
            sh:UniqueLangConstraintComponent-uniqueLang
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.UNIQUE_LANG">
            <summary>
            sh:uniqueLang
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.XONE_CONSTRAINT_COMPONENT">
            <summary>
            sh:XoneConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.XONE_CONSTRAINT_COMPONENT_XONE">
            <summary>
            sh:XoneConstraintComponent-xone
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.XONE">
            <summary>
            sh:xone
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_EXECUTABLE">
            <summary>
            sh:SPARQLExecutable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_ASK_EXECUTABLE">
            <summary>
            sh:SPARQLAskExecutable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.ASK">
            <summary>
            sh:ask
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_CONSTRUCT_EXECUTABLE">
            <summary>
            sh:SPARQLConstructExecutable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.CONSTRUCT">
            <summary>
            sh:construct
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_SELECT_EXECUTABLE">
            <summary>
            sh:SPARQLSelectExecutable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SELECT">
            <summary>
            sh:select
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_UPDATE_EXECUTABLE">
            <summary>
            sh:SPARQLUpdateExecutable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.UPDATE">
            <summary>
            sh:update
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PREFIXES">
            <summary>
            sh:prefixes
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PREFIX_DECLARATION">
            <summary>
            sh:PrefixDeclaration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.DECLARE">
            <summary>
            sh:declare
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.PREFIX_PROPERTY">
            <summary>
            sh:prefix
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.NAMESPACE">
            <summary>
            sh:namespace
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_CONSTRAINT_COMPONENT">
            <summary>
            sh:SPARQLConstraintComponent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_CONSTRAINT_COMPONENT_SPARQL">
            <summary>
            sh:SPARQLConstraintComponent-sparql
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL">
            <summary>
            sh:sparql
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SHACL.SPARQL_CONSTRAINT">
            <summary>
            sh:SPARQLConstraint
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SIOC">
            <summary>
            SIOC represents the Semantically-Interlinked Online Communities vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PREFIX">
            <summary>
            sioc
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.BASE_URI">
            <summary>
            http://rdfs.org/sioc/ns#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.DEREFERENCE_URI">
            <summary>
            http://rdfs.org/sioc/ns#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.COMMUNITY">
            <summary>
            sioc:Community
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CONTAINER">
            <summary>
            sioc:Container
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FORUM">
            <summary>
            sioc:Forum
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ITEM">
            <summary>
            sioc:Item
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.POST">
            <summary>
            sioc:Post
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ROLE">
            <summary>
            sioc:Role
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SPACE">
            <summary>
            sioc:Space
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SITE">
            <summary>
            sioc:Site
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.THREAD">
            <summary>
            sioc:Thread
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.USER_ACCOUNT">
            <summary>
            sioc:UserAccount
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.USER_GROUP">
            <summary>
            sioc:Usergroup
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ABOUT">
            <summary>
            sioc:about
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ACCOUNT_OF">
            <summary>
            sioc:account_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ADDRESSED_TO">
            <summary>
            sioc:addressed_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ADMINISTRATOR_OF">
            <summary>
            sioc:administrator_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ATTACHMENT">
            <summary>
            sioc:attachment
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.AVATAR">
            <summary>
            sioc:avatar
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CONTAINER_OF">
            <summary>
            sioc:container_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CONTENT">
            <summary>
            sioc:content
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CREATOR_OF">
            <summary>
            sioc:creator_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.EARLIER_VERSION">
            <summary>
            sioc:earlier_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.EMAIL">
            <summary>
            sioc:email
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.EMAIL_SHA1">
            <summary>
            sioc:email_sha1
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.EMBEDS_KNOWLEDGE">
            <summary>
            sioc:embeds_knowledge
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FEED">
            <summary>
            sioc:feed
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FOLLOWS">
            <summary>
            sioc:follows
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FUNCTION_OF">
            <summary>
            sioc:function_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_ADMINISTRATOR">
            <summary>
            sioc:has_administrator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_CONTAINER">
            <summary>
            sioc:has_container
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_CREATOR">
            <summary>
            sioc:has_creator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_DISCUSSION">
            <summary>
            sioc:has_discussion
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_FUNCTION">
            <summary>
            sioc:has_function
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_HOST">
            <summary>
            sioc:has_host
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_MEMBER">
            <summary>
            sioc:has_member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_MODERATOR">
            <summary>
            sioc:has_moderator
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_MODIFIER">
            <summary>
            sioc:has_modifier
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_OWNER">
            <summary>
            sioc:has_owner
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_PARENT">
            <summary>
            sioc:has_parent
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_REPLY">
            <summary>
            sioc:has_reply
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_SCOPE">
            <summary>
            sioc:has_scope
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_SPACE">
            <summary>
            sioc:has_space
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_SUBSCRIBER">
            <summary>
            sioc:has_subscriber
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_USERGROUP">
            <summary>
            sioc:has_usergroup
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HOST_OF">
            <summary>
            sioc:host_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.ID">
            <summary>
            sioc:id
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.IP_ADDRESS">
            <summary>
            sioc:ip_address
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LAST_ACTIVITY_DATE">
            <summary>
            sioc:last_activity_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LAST_ITEM_DATE">
            <summary>
            sioc:last_item_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LAST_REPLY_DATE">
            <summary>
            sioc:last_reply_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LATER_VERSION">
            <summary>
            sioc:later_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LATEST_VERSION">
            <summary>
            sioc:latest_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LINK">
            <summary>
            sioc:link
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LINKS_TO">
            <summary>
            sioc:links_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.MEMBER_OF">
            <summary>
            sioc:member_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.MODERATOR_OF">
            <summary>
            sioc:moderator_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.MODIFIER_OF">
            <summary>
            sioc:modifier_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NAME">
            <summary>
            sioc:name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NEXT_BY_DATE">
            <summary>
            sioc:next_by_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NEXT_VERSION">
            <summary>
            sioc:next_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NOTE">
            <summary>
            sioc:note
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_AUTHORS">
            <summary>
            sioc:num_authors
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_ITEMS">
            <summary>
            sioc:num_items
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_REPLIES">
            <summary>
            sioc:num_replies
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_THREADS">
            <summary>
            sioc:num_threads
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.NUM_VIEWS">
            <summary>
            sioc:num_views
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.OWNER_OF">
            <summary>
            sioc:owner_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PARENT_OF">
            <summary>
            sioc:parent_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PREVIOUS_BY_DATE">
            <summary>
            sioc:previous_by_date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PREVIOUS_VERSION">
            <summary>
            sioc:previous_version
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.RELATED_TO">
            <summary>
            sioc:related_to
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.REPLY_OF">
            <summary>
            sioc:reply_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SCOPE_OF">
            <summary>
            sioc:scope_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SIBLING">
            <summary>
            sioc:sibling
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SPACE_OF">
            <summary>
            sioc:space_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SUBSCRIBER_OF">
            <summary>
            sioc:subscriber_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.TOPIC">
            <summary>
            sioc:topic
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.USERGROUP_OF">
            <summary>
            sioc:usergroup_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.USER">
            <summary>
            sioc:User
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.TITLE">
            <summary>
            sioc:title
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CONTENT_ENCODED">
            <summary>
            sioc:content_ecoded
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.CREATED_AT">
            <summary>
            sioc:created_at
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.DESCRIPTION">
            <summary>
            sioc:description
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.FIRST_NAME">
            <summary>
            sioc:first_name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.LAST_NAME">
            <summary>
            sioc:last_name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.GROUP_OF">
            <summary>
            sioc:group_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_GROUP">
            <summary>
            sioc:has_group
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.HAS_PART">
            <summary>
            sioc:has_part
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.MODIFIED_AT">
            <summary>
            sioc:modified_at
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.PART_OF">
            <summary>
            sioc:part_of
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.REFERENCE">
            <summary>
            sioc:reference
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SIOC.SUBJECT">
            <summary>
            sioc:subject
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SKOS">
            <summary>
            SKOS represents the W3C SKOS vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.PREFIX">
            <summary>
            skos
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BASE_URI">
            <summary>
            http://www.w3.org/2004/02/skos/core#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/2004/02/skos/core#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CONCEPT">
            <summary>
            skos:Concept
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CONCEPT_SCHEME">
            <summary>
            skos:ConceptScheme
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.IN_SCHEME">
            <summary>
            skos:inScheme
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HAS_TOP_CONCEPT">
            <summary>
            skos:hasTopConcept
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.TOP_CONCEPT_OF">
            <summary>
            skos:topConceptOf
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.ALT_LABEL">
            <summary>
            skos:altLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HIDDEN_LABEL">
            <summary>
            skos:hiddenLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.PREF_LABEL">
            <summary>
            skos:prefLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NOTATION">
            <summary>
            skos:notation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CHANGE_NOTE">
            <summary>
            skos:changeNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.DEFINITION">
            <summary>
            skos:definition
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EXAMPLE">
            <summary>
            skos:example
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EDITORIAL_NOTE">
            <summary>
            skos:editorialNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.HISTORY_NOTE">
            <summary>
            skos:historyNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NOTE">
            <summary>
            skos:note
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SCOPE_NOTE">
            <summary>
            skos:scopeNote
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROADER">
            <summary>
            skos:broader
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROADER_TRANSITIVE">
            <summary>
            skos:broaderTransitive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROWER">
            <summary>
            skos:narrower
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROWER_TRANSITIVE">
            <summary>
            skos:narrowerTransitive
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.RELATED">
            <summary>
            skos:related
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SEMANTIC_RELATION">
            <summary>
            skos:semanticRelation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SUBJECT">
            <summary>
            skos:subject
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.COLLECTION">
            <summary>
            skos:Collection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.ORDERED_COLLECTION">
            <summary>
            skos:OrderedCollection
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MEMBER">
            <summary>
            skos:member
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MEMBER_LIST">
            <summary>
            skos:memberList
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.BROAD_MATCH">
            <summary>
            skos:broadMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.CLOSE_MATCH">
            <summary>
            skos:closeMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.NARROW_MATCH">
            <summary>
            skos:narrowMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.RELATED_MATCH">
            <summary>
            skos:relatedMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.EXACT_MATCH">
            <summary>
            skos:exactMatch
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.MAPPING_RELATION">
            <summary>
            skos:mappingRelation
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL">
            <summary>
            SKOS-XL extensions
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.PREFIX">
            <summary>
            skosxl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.BASE_URI">
            <summary>
            http://www.w3.org/2008/05/skos-xl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/2008/05/skos-xl#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.LABEL">
            <summary>
            skosxl:Label
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.ALT_LABEL">
            <summary>
            skosxl:altLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.HIDDEN_LABEL">
            <summary>
            skosxl:hiddenLabel
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.LABEL_RELATION">
            <summary>
            skosxl:labelRelation
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.LITERAL_FORM">
            <summary>
            skosxl:literalForm
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SKOS.SKOSXL.PREF_LABEL">
            <summary>
            skosxl:prefLabel
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SWRL">
            <summary>
            SWRL represents the W3C Semantic Web Rule Language vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SWRL.PREFIX">
            <summary>
            swrl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SWRL.BASE_URI">
            <summary>
            https://www.w3.org/2003/11/swrl
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SWRL.DEREFERENCE_URI">
            <summary>
            https://www.w3.org/2003/11/swrl
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.SWRL.SWRLB">
            <summary>
            SWRLB represents the W3C Semantic Web Rule Language - BuiltIns vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SWRL.SWRLB.PREFIX">
            <summary>
            swrlb
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SWRL.SWRLB.BASE_URI">
            <summary>
            https://www.w3.org/2003/11/swrlb
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.SWRL.SWRLB.DEREFERENCE_URI">
            <summary>
            https://www.w3.org/2003/11/swrlb
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.VS">
            <summary>
            VS represents the Vocabulary-Status vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.VS.PREFIX">
            <summary>
            vs
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.VS.BASE_URI">
            <summary>
            http://www.w3.org/2003/06/sw-vocab-status/ns#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.VS.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/2003/06/sw-vocab-status/ns#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.VS.TERM_STATUS">
            <summary>
            vs:term_status
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.VS.STABLE">
            <summary>
            vs:stable
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.VS.TESTING">
            <summary>
            vs:testing
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.VS.UNSTABLE">
            <summary>
            vs:unstable
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.XML">
            <summary>
            XML represents the XML vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.PREFIX">
            <summary>
            xml
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.BASE_URI">
            <summary>
            http://www.w3.org/XML/1998/namespace
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/XML/1998/namespace
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.LANG">
            <summary>
            xml:lang
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XML.BASE">
            <summary>
            xml:base
            </summary>
        </member>
        <member name="T:RDFSharp.Model.RDFVocabulary.XSD">
            <summary>
            XSD represents the XSD vocabulary.
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.PREFIX">
            <summary>
            xsd
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BASE_URI">
            <summary>
            http://www.w3.org/2001/XMLSchema#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DEREFERENCE_URI">
            <summary>
            http://www.w3.org/2001/XMLSchema#
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.STRING">
            <summary>
            xsd:string
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BOOLEAN">
            <summary>
            xsd:boolean
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DECIMAL">
            <summary>
            xsd:decimal
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.FLOAT">
            <summary>
            xsd:float
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DOUBLE">
            <summary>
            xsd:double
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.POSITIVE_INTEGER">
            <summary>
            xsd:positiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NEGATIVE_INTEGER">
            <summary>
            xsd:negativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NON_POSITIVE_INTEGER">
            <summary>
            xsd:nonPositiveInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NON_NEGATIVE_INTEGER">
            <summary>
            xsd:nonNegativeInteger
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.INTEGER">
            <summary>
            xsd:integer
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.LONG">
            <summary>
            xsd:long
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_LONG">
            <summary>
            xsd:unsignedLong
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.INT">
            <summary>
            xsd:int
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_INT">
            <summary>
            xsd:unsignedInt
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.SHORT">
            <summary>
            xsd:short
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_SHORT">
            <summary>
            xsd:unsignedShort
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BYTE">
            <summary>
            xsd:byte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.UNSIGNED_BYTE">
            <summary>
            xsd:unsignedByte
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DURATION">
            <summary>
            xsd:duration
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DATETIME">
            <summary>
            xsd:dateTime
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DATETIMESTAMP">
            <summary>
            xsd:dateTimeStamp
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.TIME">
            <summary>
            xsd:time
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.DATE">
            <summary>
            xsd:date
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_YEAR_MONTH">
            <summary>
            xsd:gYearMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_YEAR">
            <summary>
            xsd:gYear
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_MONTH">
            <summary>
            xsd:gMonth
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_MONTH_DAY">
            <summary>
            xsd:gMonthDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.G_DAY">
            <summary>
            xsd:gDay
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.HEX_BINARY">
            <summary>
            xsd:hexBinary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.BASE64_BINARY">
            <summary>
            xsd:base64Binary
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.ANY_URI">
            <summary>
            xsd:anyURI
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.QNAME">
            <summary>
            xsd:QName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NOTATION">
            <summary>
            xsd:NOTATION
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.LANGUAGE">
            <summary>
            xsd:language
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NORMALIZED_STRING">
            <summary>
            xsd:normalizedString
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.TOKEN">
            <summary>
            xsd:token
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NMTOKEN">
            <summary>
            xsd:NMToken
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NAME">
            <summary>
            xsd:Name
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.NCNAME">
            <summary>
            xsd:NCName
            </summary>
        </member>
        <member name="F:RDFSharp.Model.RDFVocabulary.XSD.ID">
            <summary>
            xsd:ID
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPatternGroupMember">
            <summary>
            RDFPatternGroupMember defines an object which can be member of a pattern group
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroupMember.PatternGroupMemberID">
            <summary>
            Unique identifier of the pattern group member
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFPatternGroupMember.LazyPatternGroupMemberID">
            <summary>
            Lazy evaluation of the pattern group member identifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroupMember.PatternGroupMemberStringID">
            <summary>
            Unique identifier of the pattern group member (string)
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroupMember.IsEvaluable">
            <summary>
            Flag indicating that the pattern group member is evaluable by the engine
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroupMember.#ctor">
            <summary>
            Default-ctor to build a pattern group member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroupMember.ToString">
            <summary>
            Gives the string representation of the pattern group member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroupMember.Equals(RDFSharp.Query.RDFPatternGroupMember)">
            <summary>
            Performs the equality comparison between two pattern group members
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPatternMember">
            <summary>
            RDFPatternMember defines an object which can be member of a pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternMember.PatternMemberID">
            <summary>
            Unique identifier of the pattern member
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFPatternMember.LazyPatternMemberID">
            <summary>
            Lazy evaluation of the pattern member identifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternMember.ToString">
            <summary>
            Gives the string representation of the pattern member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternMember.Equals(RDFSharp.Query.RDFPatternMember)">
            <summary>
            Performs the equality comparison between two pattern members
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternMember.#ctor">
            <summary>
            Default-ctor to build a pattern member
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryMember">
            <summary>
            RDFQueryMember defines an object which can be member of a query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryMember.QueryMemberID">
            <summary>
            Unique identifier of the query member
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryMember.LazyQueryMemberID">
            <summary>
            Lazy evaluation of the query member identifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryMember.QueryMemberStringID">
            <summary>
            Unique identifier of the query member (string)
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryMember.IsEvaluable">
            <summary>
            Flag indicating that the query member is evaluable by the engine
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryMember.#ctor">
            <summary>
            Default-ctor to build a query member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryMember.ToString">
            <summary>
            Gives the string representation of the query member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryMember.Equals(RDFSharp.Query.RDFQueryMember)">
            <summary>
            Performs the equality comparison between two query members
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAvgAggregator">
            <summary>
            RDFAvgAggregator represents an AVG aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build an AVG aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.ToString">
            <summary>
            Gets the string representation of the AVG aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAvgAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFCountAggregator">
            <summary>
            RDFCountAggregator represents a COUNT aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a COUNT aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.ToString">
            <summary>
            Gets the string representation of the COUNT aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFCountAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFGroupConcatAggregator">
            <summary>
            RDFGroupConcatAggregator represents a GROUP_CONCAT aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFGroupConcatAggregator.Separator">
            <summary>
            Separator of the group values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a GROUP_CONCAT aggregator on the given variable, with the given projection name and given separator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.ToString">
            <summary>
            Gets the string representation of the GROUP_CONCAT aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupConcatAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFMaxAggregator">
            <summary>
            RDFMinAggregator represents a MAX aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFMaxAggregator.AggregatorFlavor">
            <summary>
            Flavor of the aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors)">
            <summary>
            Default-ctor to build a MAX aggregator on the given variable, with the given projection name and given flavor
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ToString">
            <summary>
            Gets the string representation of the MAX aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ExecutePartitionNumeric(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow (NUMERIC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ExecutePartitionString(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow (STRING)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.UpdateProjectionTableNumeric(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table (NUMERIC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMaxAggregator.UpdateProjectionTableString(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table (STRING)
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFMinAggregator">
            <summary>
            RDFMinAggregator represents a MIN aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFMinAggregator.AggregatorFlavor">
            <summary>
            Flavor of the aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors)">
            <summary>
            Default-ctor to build a MIN aggregator on the given variable, with the given projection name and given flavor
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ToString">
            <summary>
            Gets the string representation of the MIN aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ExecutePartitionNumeric(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow (NUMERIC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ExecutePartitionString(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow (STRING)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.UpdateProjectionTableNumeric(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table (NUMERIC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFMinAggregator.UpdateProjectionTableString(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table (STRING)
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPartitionAggregator">
            <summary>
            RDFPartitionAggregator represents a PARTITION aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a PARTITION aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.ToString">
            <summary>
            Gets the string representation of the PARTITION aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPartitionAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSampleAggregator">
            <summary>
            RDFSampleAggregator represents a SAMPLE aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a SAMPLE aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.ToString">
            <summary>
            Gets the string representation of the SAMPLE aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSampleAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSumAggregator">
            <summary>
            RDFSumAggregator represents a SUM aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a SUM aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.ToString">
            <summary>
            Gets the string representation of the SUM aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSumAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanAndFilter">
            <summary>
            RDFBooleanAndFilter represents a filter applying an "AND" on the logics of the given filters.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanAndFilter.LeftFilter">
            <summary>
            Left Filter
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanAndFilter.RightFilter">
            <summary>
            Right Filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.#ctor(RDFSharp.Query.RDFFilter,RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build an "AND" filter on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanAndFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanNotFilter">
            <summary>
            RDFBooleanNotFilter represents a filter applying a negation on the logics of the given filter.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanNotFilter.Filter">
            <summary>
            Filter to be negated
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.#ctor(RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build a negation filter on the given filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanNotFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBooleanOrFilter">
            <summary>
            RDFBooleanOrFilter represents a filter applying an "OR" on the logics of the given filters.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanOrFilter.LeftFilter">
            <summary>
            Left Filter
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBooleanOrFilter.RightFilter">
            <summary>
            Right Filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.#ctor(RDFSharp.Query.RDFFilter,RDFSharp.Query.RDFFilter)">
            <summary>
            Default-ctor to build an "OR" filter on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBooleanOrFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFBoundFilter">
            <summary>
            RDFBoundFilter represents a filter checking if a variable is bound to a value.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFBoundFilter.VariableName">
            <summary>
            Name of the variable to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFBoundFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFComparisonFilter">
            <summary>
            RDFComparisonFilter represents a filter applying a comparison between the given RDF terms.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.ComparisonFlavor">
            <summary>
            Comparison to be applied between the given pattern members
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.LeftMember">
            <summary>
            Left Pattern Member
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFComparisonFilter.RightMember">
            <summary>
            Right Pattern Member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.#ctor(RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build a comparison filter of the given type on the given filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFComparisonFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDatatypeFilter">
            <summary>
            RDFDatatypeFilter represents a filter on the datatype of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDatatypeFilter.VariableName">
            <summary>
            Name of the variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDatatypeFilter.Datatype">
            <summary>
            Datatype to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDatatypeFilter.DatatypeRegex">
            <summary>
            Regex to be applied for datatype filtering
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Model.RDFModelEnums.RDFDatatypes)">
            <summary>
            Default-ctor to build a filter on the given variable for the given datatype
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDatatypeFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFExistsFilter">
            <summary>
            RDFExistsFilter represents a filter for checking existence of given RDF pattern.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFExistsFilter.Pattern">
            <summary>
            Pattern to be evaluated
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFExistsFilter.PatternResults">
            <summary>
            Results of the pattern evaluation on the RDF data source
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFExistsFilter.#ctor(RDFSharp.Query.RDFPattern)">
            <summary>
            Default-ctor to build a filter on the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFExistsFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFExistsFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the pattern in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFInFilter">
            <summary>
            RDFInFilter represents a filter checking if a RDF term is found in a given set of RDF terms.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFInFilter.TermToSearch">
            <summary>
            RDF term to be searched
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFInFilter.InTerms">
            <summary>
            List of RDF terms in which the term should be searched
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInFilter.#ctor(RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Default-ctor to build a filter on the given term and given search list
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsBlankFilter">
            <summary>
            RDFIsBlankFilter represents a filter for Blank Uri values of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsBlankFilter.VariableName">
            <summary>
            Name of the variable to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsBlankFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsLiteralFilter">
            <summary>
            RDFIsLiteralFilter represents a filter for literal values of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsLiteralFilter.VariableName">
            <summary>
            Name of the variable to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsLiteralFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFIsUriFilter">
            <summary>
            RDFIsUriFilter represents a filter for Uri values of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFIsUriFilter.VariableName">
            <summary>
            Name of the variable to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.#ctor(RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a filter on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFIsUriFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFLangMatchesFilter">
            <summary>
            RDFLangMatchesFilter represents a filter on the language of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLangMatchesFilter.VariableName">
            <summary>
            Name of the variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLangMatchesFilter.Language">
            <summary>
            Language to be filtered
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFLangMatchesFilter.AnyLanguageRegex">
            <summary>
            Regex to intercept values having any language tag
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLangMatchesFilter.ExactLanguageRegex">
            <summary>
            Regex to intercept values having specific language tag
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.#ctor(RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a filter on the given variable for the given language
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLangMatchesFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFNotExistsFilter">
            <summary>
            RDFNotExistsFilter represents a filter for checking absence of given RDF pattern.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFNotExistsFilter.#ctor(RDFSharp.Query.RDFPattern)">
            <summary>
            Default-ctor to build a filter on the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFNotExistsFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFNotExistsFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the pattern in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFRegexFilter">
            <summary>
            RDFRegexFilter represents a filter applying a regular expression on the values of a variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFRegexFilter.VariableName">
            <summary>
            Name of the variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFRegexFilter.RegEx">
            <summary>
            Regular Expression to be filtered
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.#ctor(RDFSharp.Query.RDFVariable,System.Text.RegularExpressions.Regex)">
            <summary>
            Default-ctor to build a filter on the given variable for the given regular expression
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFRegexFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSameTermFilter">
            <summary>
            RDFSameTermFilter represents an equality filter between a variable and a RDF term.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSameTermFilter.VariableName">
            <summary>
            Name of the variable to be filtered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSameTermFilter.RDFTerm">
            <summary>
            RDF Term to be filtered (can be a RDFResource, a RDFLiteral or a RDFVariable)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build an equality filter between the given variable and the given RDF term
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSameTermFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the column corresponding to the variable in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFValuesFilter">
            <summary>
            RDFValuesFilter represents an explicit binding of variables provided for filtering a SPARQL query.
            (This filter is NOT intended to be public: in fact, it is injected by RDFValues during evaluation).
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFValuesFilter.Values">
            <summary>
            SPARQL values wrapped by the filter
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFValuesFilter.ValuesTable">
            <summary>
            Tabular representation of the SPARQL values wrapped by the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValuesFilter.#ctor(RDFSharp.Query.RDFValues)">
            <summary>
            Default-ctor to build a SPARQL values filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValuesFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the columns corresponding to the variables in the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDistinctModifier">
            <summary>
            RDFDistinctModifier is a modifier which drops duplicate rows for the level of detail of a SELECT query.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.#ctor">
            <summary>
            Default-ctor to build a Distinct modifier on a query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.ToString">
            <summary>
            Gives the string representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDistinctModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFGroupByModifier">
            <summary>
            RDFGroupByModifier represents an aggregator modifier to be applied on a query results table.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFGroupByModifier.PartitionVariables">
            <summary>
            List of variables on which query results are grouped
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFGroupByModifier.Aggregators">
            <summary>
            List of aggregators applied on the result groups
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.#ctor(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Default-ctor to build a GroupBy modifier on the given variables
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ToString">
            <summary>
            Gives the string representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.AddAggregator(RDFSharp.Query.RDFAggregator)">
            <summary>
            Adds the given aggregator to the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ConsistencyChecks(System.Data.DataTable)">
            <summary>
            Performs consistency checks
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ExecutePartitionAlgorythm(System.Data.DataTable)">
            <summary>
            Executes partition algorythm
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ExecuteProjectionAlgorythm">
            <summary>
            Executes projection algorythm
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.ExecuteFilterAlgorythm(System.Data.DataTable)">
            <summary>
            Execute filter algorythm
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFGroupByModifier.GetPartitionKey(System.Data.DataRow)">
            <summary>
            Calculates the partition key on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFLimitModifier">
            <summary>
            RDFLimitModifier is a modifier which applies an upper-bound counter to the number of query results to be considered.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLimitModifier.Limit">
            <summary>
            Maximum number of results taken from the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.#ctor(System.Int32)">
            <summary>
            Default-ctor to build a Limit modifier on a query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.ToString">
            <summary>
            Gives the string representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLimitModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOffsetModifier">
            <summary>
            RDFOffsetModifier is a modifier which makes the first N query results to be not considered.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOffsetModifier.Offset">
            <summary>
            Number of results not considered from the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.#ctor(System.Int32)">
            <summary>
            Default-ctor to build an Offset modifier on a query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.ToString">
            <summary>
            Gives the string representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOffsetModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOrderByModifier">
            <summary>
            RDFOrderByModifier is a modifier which applies a sort on the results of a SELECT query for the given variable.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOrderByModifier.Variable">
            <summary>
            Variable to be ordered
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOrderByModifier.OrderByFlavor">
            <summary>
            Flavor of variable ordering (ASC/DESC)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors)">
            <summary>
            Default-ctor to build an OrderBy modifier of the given flavor on the given variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.ToString">
            <summary>
            Gives the string representation of the modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOrderByModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the column corresponding to the variable in the given datatable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFClearOperation">
            <summary>
            RDFClearOperation is the SPARQL "CLEAR" operation implementation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFClearOperation.IsSilent">
            <summary>
            Flag indicating that the operation will hide errors from the SPARQL UPDATE endpoint
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFClearOperation.FromContext">
            <summary>
            Represents the Uri of the remote graph from which RDF data will be removed
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFClearOperation.OperationFlavor">
            <summary>
            Represents the flavor adopted in case of an implicit SPARQL CLEAR operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFClearOperation.#ctor(System.Uri)">
            <summary>
            Default-ctor to build an explicit CLEAR operation for the given remote graph Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFClearOperation.#ctor(RDFSharp.Query.RDFQueryEnums.RDFClearOperationFlavor)">
            <summary>
            Default-ctor to build an implicit CLEAR operation with the given flavor
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFClearOperation.ToString">
            <summary>
            Gives the string representation of the CLEAR operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFClearOperation.Silent">
            <summary>
            Sets the operation as silent, so that errors will not be delivered to the application
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDeleteDataOperation">
            <summary>
            RDFDeleteDataOperation is the SPARQL "DELETE DATA" operation implementation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteDataOperation.ToString">
            <summary>
            Gives the string representation of the DELETE DATA operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteDataOperation.AddDeleteTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given ground pattern to the templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteDataOperation.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the operation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDeleteInsertWhereOperation">
            <summary>
            RDFDeleteWhereOperation is the SPARQL "DELETE/INSERT WHERE" operation implementation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteInsertWhereOperation.ToString">
            <summary>
            Gives the string representation of the DELETE/INSERT WHERE operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteInsertWhereOperation.AddDeleteTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the DELETE templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteInsertWhereOperation.AddInsertTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the INSERT templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteInsertWhereOperation.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteInsertWhereOperation.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteInsertWhereOperation.AddModifier(RDFSharp.Query.RDFDistinctModifier)">
            <summary>
            Adds the given modifier to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteInsertWhereOperation.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the operation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDeleteWhereOperation">
            <summary>
            RDFDeleteWhereOperation is the SPARQL "DELETE WHERE" operation implementation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteWhereOperation.ToString">
            <summary>
            Gives the string representation of the DELETE WHERE operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteWhereOperation.AddDeleteTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteWhereOperation.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteWhereOperation.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteWhereOperation.AddModifier(RDFSharp.Query.RDFDistinctModifier)">
            <summary>
            Adds the given modifier to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDeleteWhereOperation.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the operation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFInsertDataOperation">
            <summary>
            RDFInsertDataOperation is the SPARQL "INSERT DATA" operation implementation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertDataOperation.ToString">
            <summary>
            Gives the string representation of the INSERT DATA operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertDataOperation.AddInsertTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given ground pattern to the templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertDataOperation.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the operation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFInsertWhereOperation">
            <summary>
            RDFInsertWhereOperation is the SPARQL "INSERT WHERE" operation implementation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertWhereOperation.ToString">
            <summary>
            Gives the string representation of the INSERT WHERE operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertWhereOperation.AddInsertTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertWhereOperation.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertWhereOperation.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertWhereOperation.AddModifier(RDFSharp.Query.RDFDistinctModifier)">
            <summary>
            Adds the given modifier to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFInsertWhereOperation.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the operation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFLoadOperation">
            <summary>
            RDFLoadOperation is the SPARQL "LOAD" operation implementation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLoadOperation.IsSilent">
            <summary>
            Flag indicating that the operation will hide errors from the SPARQL UPDATE endpoint
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLoadOperation.FromContext">
            <summary>
            Represents the Uri of the remote graph from which RDF data will be fetched
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFLoadOperation.ToContext">
            <summary>
            Represents the Uri of the graph into which RDF data will be inserted
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLoadOperation.#ctor(System.Uri)">
            <summary>
            Default-ctor to build a LOAD operation for the given remote graph Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLoadOperation.ToString">
            <summary>
            Gives the string representation of the LOAD operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLoadOperation.SetContext(System.Uri)">
            <summary>
            Sets the context of the graph into which RDF data will be inserted
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFLoadOperation.Silent">
            <summary>
            Sets the operation as silent, so that errors will not be delivered to the application
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOperationResult">
            <summary>
            RDFOperationResult is a container for SPARQL UPDATE operation results
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOperationResult.DeleteResults">
            <summary>
            Tabular response of the SPARQL DELETE operation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOperationResult.InsertResults">
            <summary>
            Tabular response of the SPARQL INSERT operation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOperationResult.DeleteResultsCount">
            <summary>
            Gets the number of results produced by the SPARQL DELETE operation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOperationResult.InsertResultsCount">
            <summary>
            Gets the number of results produced by the SPARQL INSERT operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationResult.#ctor">
            <summary>
            Default-ctor to build an empty operation result
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAskQuery">
            <summary>
            RDFAskQuery is the SPARQL "ASK" query implementation.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.#ctor">
            <summary>
            Default-ctor to build an empty ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ToString">
            <summary>
            Gives the string representation of the ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously applies the query to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToStoreAsync(RDFSharp.Store.RDFStore)">
            <summary>
            Asynchronously applies the query to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToFederation(RDFSharp.Query.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToFederationAsync(RDFSharp.Query.RDFFederation)">
            <summary>
            Asynchronously applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointQueryOptions)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToSPARQLEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Asynchronously applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQuery.ApplyToSPARQLEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointQueryOptions)">
            <summary>
            Asynchronously applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAskQueryResult">
            <summary>
            RDFAskResult is a container for SPARQL "ASK" query results.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAskQueryResult.AskResult">
            <summary>
            Boolean response of the ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.#ctor">
            <summary>
            Default-ctor to build an empty ASK result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.ToSparqlXmlResult(System.IO.Stream)">
            <summary>
            Writes the "SPARQL Query Results XML Format" stream corresponding to the ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.ToSparqlXmlResultAsync(System.IO.Stream)">
            <summary>
            Asynchronously writes the "SPARQL Query Results XML Format" stream corresponding to the ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.ToSparqlXmlResult(System.String)">
            <summary>
            Writes the "SPARQL Query Results XML Format" file corresponding to the ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.ToSparqlXmlResultAsync(System.String)">
            <summary>
            Asynchronously writes the "SPARQL Query Results XML Format" file corresponding to the ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.FromSparqlXmlResult(System.IO.Stream)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" stream into an ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.FromSparqlXmlResultAsync(System.IO.Stream)">
            <summary>
            Asynchronously reads the given "SPARQL Query Results XML Format" stream into an ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.FromSparqlXmlResult(System.String)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" file into an ASK query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAskQueryResult.FromSparqlXmlResultAsync(System.String)">
            <summary>
            Asynchronously reads the given "SPARQL Query Results XML Format" file into an ASK query result
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFConstructQuery">
            <summary>
            RDFConstructQuery is the SPARQL "CONSTRUCT" query implementation.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.Templates">
            <summary>
            List of template patterns carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQuery.Variables">
            <summary>
            List of variables carried by the template patterns of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.#ctor">
            <summary>
            Default-ctor to build an empty CONSTRUCT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ToString">
            <summary>
            Gives the string representation of the CONSTRUCT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddTemplate(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the templates of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddModifier(RDFSharp.Query.RDFDistinctModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddModifier(RDFSharp.Query.RDFLimitModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddModifier(RDFSharp.Query.RDFOffsetModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously applies the query to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToStoreAsync(RDFSharp.Store.RDFStore)">
            <summary>
            Asynchronously applies the query to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToFederation(RDFSharp.Query.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToFederationAsync(RDFSharp.Query.RDFFederation)">
            <summary>
            Asynchronously applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointQueryOptions)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToSPARQLEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Asynchronously applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQuery.ApplyToSPARQLEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointQueryOptions)">
            <summary>
            Asynchronously applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFConstructQueryResult">
            <summary>
            RDFConstructQueryResult is a container for SPARQL "CONSTRUCT" query results.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQueryResult.ConstructResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFConstructQueryResult.ConstructResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.#ctor">
            <summary>
            Default-ctor to build an empty CONSTRUCT result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.ToRDFGraph">
            <summary>
            Gets a graph corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.ToRDFGraphAsync">
            <summary>
            Asynchronously gets a graph corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets a query result corresponding to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFConstructQueryResult.FromRDFGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously gets a query result corresponding to the given graph
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDescribeQuery">
            <summary>
            RDFDescribeQuery is the SPARQL "DESCRIBE" query implementation.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.DescribeTerms">
            <summary>
            List of RDF terms to be described by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQuery.Variables">
            <summary>
            List of variables carried by the template patterns of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.#ctor">
            <summary>
            Default-ctor to build an empty DESCRIBE query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ToString">
            <summary>
            Gives the string representation of the DESCRIBE query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddDescribeTerm(RDFSharp.Model.RDFResource)">
            <summary>
            Adds the given resource to the describe terms of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddDescribeTerm(RDFSharp.Query.RDFVariable)">
            <summary>
            Adds the given variable to the describe terms of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddModifier(RDFSharp.Query.RDFDistinctModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddModifier(RDFSharp.Query.RDFLimitModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddModifier(RDFSharp.Query.RDFOffsetModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously applies the query to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToStoreAsync(RDFSharp.Store.RDFStore)">
            <summary>
            Asynchronously applies the query to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToFederation(RDFSharp.Query.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToFederationAsync(RDFSharp.Query.RDFFederation)">
            <summary>
            Asynchronously applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointQueryOptions)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToSPARQLEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Asynchronously applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQuery.ApplyToSPARQLEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointQueryOptions)">
            <summary>
            Asynchronously applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFDescribeQueryResult">
            <summary>
            RDFDescribeQueryResult is a container for SPARQL "DESCRIBE" query results.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQueryResult.DescribeResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFDescribeQueryResult.DescribeResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.#ctor">
            <summary>
            Default-ctor to build an empty DESCRIBE result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.ToRDFGraph">
            <summary>
            Gets a graph corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.ToRDFGraphAsync">
            <summary>
            Asynchronously gets a graph corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.ToRDFMemoryStore">
            <summary>
            Gets a memory store corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.ToRDFMemoryStoreAsync">
            <summary>
            Asynchronously gets a memory store corresponding to the query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets a query result corresponding to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.FromRDFGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously gets a query result corresponding to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.FromRDFMemoryStore(RDFSharp.Store.RDFMemoryStore)">
            <summary>
            Gets a query result corresponding to the given memory store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFDescribeQueryResult.FromRDFMemoryStoreAsync(RDFSharp.Store.RDFMemoryStore)">
            <summary>
            Asynchronously gets a query result corresponding to the given memory store
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSelectQuery">
            <summary>
            RDFSelectQuery is the SPARQL "SELECT" query implementation.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQuery.ProjectionVars">
            <summary>
            Dictionary of projection variables and associated ordinals
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.#ctor">
            <summary>
            Default-ctor to build an empty SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ToString">
            <summary>
            Gives the string representation of the SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddPatternGroup(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddProjectionVariable(RDFSharp.Query.RDFVariable)">
            <summary>
            Adds the given variable to the results of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddModifier(RDFSharp.Query.RDFModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddPrefix(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.AddSubQuery(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the query to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously applies the query to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the query to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToStoreAsync(RDFSharp.Store.RDFStore)">
            <summary>
            Asynchronously applies the query to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToFederation(RDFSharp.Query.RDFFederation)">
            <summary>
            Applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToFederationAsync(RDFSharp.Query.RDFFederation)">
            <summary>
            Asynchronously applies the query to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointQueryOptions)">
            <summary>
            Applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToSPARQLEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Asynchronously applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToSPARQLEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointQueryOptions)">
            <summary>
            Asynchronously applies the query to the given SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToDataSource(RDFSharp.Model.RDFDataSource)">
            <summary>
            Applies the query to the given data source
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.ApplyToDataSourceAsync(RDFSharp.Model.RDFDataSource)">
            <summary>
            Asynchronously applies the query to the given data source
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.Optional">
            <summary>
            Sets the query to be joined as optional with the previous query member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQuery.UnionWithNext">
            <summary>
            Sets the query to be joined as union with the next query member
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSelectQueryResult">
            <summary>
            RDFSelectQueryResult is a container for SPARQL "SELECT" query results.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQueryResult.SelectResults">
            <summary>
            Tabular response of the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSelectQueryResult.SelectResultsCount">
            <summary>
            Gets the number of results produced by the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.#ctor">
            <summary>
            Default-ctor to build an empty SELECT result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.ToSparqlXmlResult(System.IO.Stream)">
            <summary>
            Writes the "SPARQL Query Results XML Format" stream corresponding to the SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.ToSparqlXmlResultAsync(System.IO.Stream)">
            <summary>
            Asynchronously writes the "SPARQL Query Results XML Format" stream corresponding to the SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.ToSparqlXmlResult(System.String)">
            <summary>
            Writes the "SPARQL Query Results XML Format" file corresponding to the SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.ToSparqlXmlResultAsync(System.String)">
            <summary>
            Asynchronously writes the "SPARQL Query Results XML Format" file corresponding to the SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.FromSparqlXmlResult(System.String)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" file into a SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.FromSparqlXmlResultAsync(System.String)">
            <summary>
            Asynchronously reads the given "SPARQL Query Results XML Format" file into a SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.FromSparqlXmlResult(System.IO.Stream)">
            <summary>
            Reads the given "SPARQL Query Results XML Format" stream into a SELECT query result
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSelectQueryResult.FromSparqlXmlResultAsync(System.IO.Stream)">
            <summary>
            Asynchronously reads the given "SPARQL Query Results XML Format" stream into a SELECT query result
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAggregator">
            <summary>
            RDFAggregator represents an aggregation function applied by a GroupBy modifier
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.AggregatorVariable">
            <summary>
            Variable on which the aggregator is applied
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.ProjectionVariable">
            <summary>
            Variable used for projection of aggregator results
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.IsDistinct">
            <summary>
            Flag indicating that the aggregator discards duplicates
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.HavingClause">
            <summary>
            Tuple indicating that the aggregator is also an having-clause
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregator.AggregatorContext">
            <summary>
            Context for keeping track of aggregator's execution
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build an aggregator on the given variable and with the given projection name
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.ToString">
            <summary>
            Gives the string representation of the aggregator function
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.ExecutePartition(System.String,System.Data.DataRow)">
            <summary>
            Executes the partition on the given tablerow
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.ExecuteProjection(System.Collections.Generic.List{RDFSharp.Query.RDFVariable})">
            <summary>
            Executes the projection producing result's table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.UpdateProjectionTable(System.String,System.Data.DataTable)">
            <summary>
            Helps in finalization step by updating the projection's result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.GetRowValueAsNumber(System.Data.DataRow)">
            <summary>
            Gets the row value for the aggregator as number
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.GetRowValueAsString(System.Data.DataRow)">
            <summary>
            Gets the row value for the aggregator as string
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.PrintHavingClause(System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the having-clause of the aggregator
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.Distinct">
            <summary>
            Sets the aggregator to discard duplicates
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregator.SetHavingClause(RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Sets the aggregator to also represent an having-clause
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFAggregatorContext">
            <summary>
            RDFAggregatorContext represents a registry for keeping track of aggregator's execution
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregatorContext.ExecutionRegistry">
            <summary>
            Registry to keep track of aggregator execution flow
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFAggregatorContext.ExecutionCache">
            <summary>
            Cache to keep track of aggregator execution values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.#ctor">
            <summary>
            Default-ctor to build an empty aggregator context
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.AddPartitionKey``1(System.String,``0)">
            <summary>
            Adds the given partitionKey to the aggregator context
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.GetPartitionKeyExecutionResult``1(System.String,``0)">
            <summary>
            Gets the execution result for the given partition key
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.GetPartitionKeyExecutionCounter(System.String)">
            <summary>
            Gets the execution counter for the given partition key
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.UpdatePartitionKeyExecutionResult``1(System.String,``0)">
            <summary>
            Updates the execution result for the given partition key
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.UpdatePartitionKeyExecutionCounter(System.String)">
            <summary>
            Updates the execution counter for the given partition key
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.CheckPartitionKeyRowValueCache``1(System.String,``0)">
            <summary>
            Checks for presence of the given value in given partitionkey's cache
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFAggregatorContext.UpdatePartitionKeyRowValueCache``1(System.String,``0)">
            <summary>
            Updates the given partitionKey's cache with the given value
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFFederation">
            <summary>
            RDFFederation represents a logically integrated collection of RDF data sources
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFFederation.FederationName">
            <summary>
            Name of the federation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFFederation.DataSourcesCount">
            <summary>
            Count of the federation's data sources
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFFederation.DataSourcesEnumerator">
            <summary>
            Gets the enumerator on the federation's data sources for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFFederation.DataSources">
            <summary>
            List of data sources of the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.#ctor">
            <summary>
            Default ctor to build an empty federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.ToString">
            <summary>
            Gives the string representation of the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.System#Collections#Generic#IEnumerable{RDFSharp#Model#RDFDataSource}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the federation's data sources
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the federation's data sources
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.AddGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Adds the given graph to the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.AddStore(RDFSharp.Store.RDFStore)">
            <summary>
            Adds the given store to the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.AddFederation(RDFSharp.Query.RDFFederation)">
            <summary>
            Adds the given federation to the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.AddSPARQLEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Adds the given SPARQL endpoint to the federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFederation.ClearDataSources">
            <summary>
            Clears the data sources of the federation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFFilter">
            <summary>
            RDFFilter represents a filter to be applied on a query results table.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFilter.ToString">
            <summary>
            Gives the string representation of the filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFFilter.ApplyFilter(System.Data.DataRow,System.Boolean)">
            <summary>
            Applies the filter on the given datarow
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFModifier">
            <summary>
            RDFModifier represents a modifier to be applied on a query results table.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFModifier.ApplyModifier(System.Data.DataTable)">
            <summary>
            Applies the modifier on the given datatable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOperation">
            <summary>
            RDFOperation is the foundation class for modeling SPARQL UPDATE operations
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOperation.DeleteTemplates">
            <summary>
            Templates for SPARQL DELETE operation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOperation.InsertTemplates">
            <summary>
            Templates for SPARQL INSERT operation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFOperation.Variables">
            <summary>
            List of variables carried by the templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.#ctor">
            <summary>
            Default-ctor to build an empty operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.ApplyToGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the operation to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.ApplyToGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously applies the operation to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.ApplyToStore(RDFSharp.Store.RDFStore)">
            <summary>
            Applies the operation to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.ApplyToStoreAsync(RDFSharp.Store.RDFStore)">
            <summary>
            Asynchronously applies the operation to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.ApplyToSPARQLUpdateEndpoint(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the operation to the given SPARQL UPDATE endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.ApplyToSPARQLUpdateEndpoint(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointOperationOptions)">
            <summary>
            Applies the operation to the given SPARQL UPDATE endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.ApplyToSPARQLUpdateEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Asynchronously applies the operation to the given SPARQL UPDATE endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.ApplyToSPARQLUpdateEndpointAsync(RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointOperationOptions)">
            <summary>
            Asynchronously applies the operation to the given SPARQL UPDATE endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.AddDeleteGroundTemplate``1(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given ground pattern to the DELETE templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.AddDeleteNonGroundTemplate``1(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the DELETE templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.AddInsertGroundTemplate``1(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given ground pattern to the INSERT templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.AddInsertNonGroundTemplate``1(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the INSERT templates of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.AddPrefix``1(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.AddPatternGroup``1(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.AddModifier``1(RDFSharp.Query.RDFDistinctModifier)">
            <summary>
            Adds the given modifier to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.AddSubQuery``1(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperation.CollectVariables(RDFSharp.Query.RDFPattern)">
            <summary>
            Collects the variables contained in the given non-ground template
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPattern">
            <summary>
            RDFPattern represents a search pattern over a collection of RDF data.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Context">
            <summary>
            Member acting as context token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Subject">
            <summary>
            Member acting as subject token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Predicate">
            <summary>
            Member acting as predicate token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Object">
            <summary>
            Member acting as object token of the pattern
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.IsOptional">
            <summary>
            Flag indicating the pattern as optional
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.JoinAsUnion">
            <summary>
            Flag indicating the pattern to be joined as union
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPattern.Variables">
            <summary>
            List of variables carried by the pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.#ctor(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default ctor for SPO pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.#ctor(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default ctor for CSPO pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.ToString">
            <summary>
            Gives the string representation of the pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.Optional">
            <summary>
            Sets the pattern to be joined as optional with the previous pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPattern.UnionWithNext">
            <summary>
            Sets the pattern to be joined as union with the next pattern
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPatternGroup">
            <summary>
            RDFPatternGroup represents a named group of patterns having its own filters.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.PatternGroupName">
            <summary>
            Name of the pattern group, which must be unique in a query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.IsOptional">
            <summary>
            Flag indicating the pattern group to be joined as Optional
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.JoinAsUnion">
            <summary>
            Flag indicating the pattern group to be joined as Union
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.GroupMembers">
            <summary>
            List of members carried by the pattern group
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPatternGroup.Variables">
            <summary>
            List of variables carried by the patterns of the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty named pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String,System.Collections.Generic.List{RDFSharp.Query.RDFPattern})">
            <summary>
            List-ctor to build a named pattern group with the given list of patterns
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.#ctor(System.String,System.Collections.Generic.List{RDFSharp.Query.RDFPattern},System.Collections.Generic.List{RDFSharp.Query.RDFFilter})">
            <summary>
            List-ctor to build a named pattern group with the given list of patterns and filters
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.ToString">
            <summary>
            Gives the string representation of the patternGroup
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddPattern(RDFSharp.Query.RDFPattern)">
            <summary>
            Adds the given pattern to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddPropertyPath(RDFSharp.Query.RDFPropertyPath)">
            <summary>
            Adds the given property path to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddValues(RDFSharp.Query.RDFValues)">
            <summary>
            Adds the given SPARQL values to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddFilter(RDFSharp.Query.RDFFilter)">
            <summary>
            Adds the given filter to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.Optional">
            <summary>
            Sets the pattern group to be joined as optional with the previous query member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.UnionWithNext">
            <summary>
            Sets the pattern group to be joined as union with the next query member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetPatterns">
            <summary>
            Gets the group members of type: pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetPropertyPaths">
            <summary>
            Gets the group members of type: property path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetValues">
            <summary>
            Gets the group members of type: values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetFilters">
            <summary>
            Gets the group members of type: filter
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.AddInjectedValues(RDFSharp.Query.RDFValues)">
            <summary>
            Adds the given injected SPARQL values to the pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPatternGroup.GetEvaluablePatternGroupMembers">
            <summary>
            Gets the group members which can be evaluated
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPropertyPath">
            <summary>
            RDFPropertyPath represents a chain of properties connecting two terms in a RDF datasource.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPath.Start">
            <summary>
            Start of the path
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPath.Steps">
            <summary>
            Steps of the path
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPath.Depth">
            <summary>
            Depth of the path
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPath.End">
            <summary>
            End of the path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.#ctor(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build a path between the given terms
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.ToString">
            <summary>
            Gives the string representation of the path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.AddAlternativeSteps(System.Collections.Generic.List{RDFSharp.Query.RDFPropertyPathStep})">
            <summary>
            Adds the given alternative steps to the path. If only one is given, it is considered sequence.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.AddSequenceStep(RDFSharp.Query.RDFPropertyPathStep)">
            <summary>
            Adds the given sequence step to the path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPath.GetPatternList">
            <summary>
            Gets the list of patterns corresponding to the path
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFPropertyPathStep">
            <summary>
            RDFPropertyPathStep represents a step of a property path
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPathStep.StepProperty">
            <summary>
            Property of the step
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPathStep.StepFlavor">
            <summary>
            Flavor of the step
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPathStep.IsInverseStep">
            <summary>
            Flag indicating that the step has inverse evaluation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFPropertyPathStep.StepOrdinal">
            <summary>
            Ordinal of the step
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPathStep.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a step of a property path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPathStep.SetFlavor(RDFSharp.Query.RDFQueryEnums.RDFPropertyPathStepFlavors)">
            <summary>
            Sets the flavor of the step
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPathStep.SetOrdinal(System.Int32)">
            <summary>
            Sets the ordinal of the step
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFPropertyPathStep.Inverse">
            <summary>
            Sets the step as inverse
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQuery">
            <summary>
            RDFQuery is the foundation class for modeling SPARQL queries
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.QueryMembers">
            <summary>
            List of members carried by the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.Prefixes">
            <summary>
            List of prefixes registered for the query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.IsOptional">
            <summary>
            Flag indicating the subquery to be joined as Optional
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.JoinAsUnion">
            <summary>
            Flag indicating the subquery to be joined as Union
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQuery.IsSubQuery">
            <summary>
            Flag indicating that the query is a subquery
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.#ctor">
            <summary>
            Default-ctor to build an empty query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.AddPatternGroup``1(RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Adds the given pattern group to the body of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.AddModifier``1(RDFSharp.Query.RDFDistinctModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.AddModifier``1(RDFSharp.Query.RDFLimitModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.AddModifier``1(RDFSharp.Query.RDFOffsetModifier)">
            <summary>
            Adds the given modifier to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.AddPrefix``1(RDFSharp.Model.RDFNamespace)">
            <summary>
            Adds the given prefix declaration to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.AddSubQuery``1(RDFSharp.Query.RDFSelectQuery)">
            <summary>
            Adds the given subquery to the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetPatternGroups">
            <summary>
            Gets the query members of type: pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetModifiers">
            <summary>
            Gets the query members of type: modifier
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetSubQueries">
            <summary>
            Gets the query members of type: query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetValues">
            <summary>
            Gets the SPARQL values of the query, including those from patterngroups and subqueries
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.InjectValues(System.Collections.Generic.List{RDFSharp.Query.RDFValues})">
            <summary>
            Injects the given list of SPARQL values to patterngroups and subqueries of the query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetPrefixes">
            <summary>
            Gets the prefixes of the query, including those from subqueries
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.GetEvaluableQueryMembers">
            <summary>
            Gets the query members which can be evaluated
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQuery.SubQuery">
            <summary>
            Sets the query as a subquery
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSPARQLEndpoint">
            <summary>
            RDFSPARQLEndpoint represents a SPARQL endpoint
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSPARQLEndpoint.BaseAddress">
            <summary>
            Base address of the SPARQL endpoint
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSPARQLEndpoint.QueryParams">
            <summary>
            Collection of query params sent to the SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpoint.#ctor(System.Uri)">
            <summary>
            Default-ctor to build a SPARQL enpoint with given base address
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpoint.ToString">
            <summary>
            Gives the string representation of the variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpoint.AddDefaultGraphUri(System.String)">
            <summary>
            Adds a "default-graph-uri" parameter to be sent to the SPARQL endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpoint.AddNamedGraphUri(System.String)">
            <summary>
            Adds a "named-graph-uri" parameter to be sent to the SPARQL endpoint
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSPARQLEndpointQueryOptions">
            <summary>
            RDFSPARQLEndpointQueryOptions customizes the default behavior of a SPARQL endpoint query
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSPARQLEndpointQueryOptions.TimeoutMilliseconds">
            <summary>
            Represents the timeout observed for the query sent to the SPARQL endpoint (defaults to: -1)
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSPARQLEndpointQueryOptions.ErrorBehavior">
            <summary>
            Represents the behavior used by the query in case of runtime errors (defaults to: ThrowException)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpointQueryOptions.#ctor">
            <summary>
            Default-ctor to configure options for a SPARQL endpoint query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpointQueryOptions.#ctor(System.Int32)">
            <summary>
            Custom-ctor to configure options for a SPARQL endpoint query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpointQueryOptions.#ctor(System.Int32,RDFSharp.Query.RDFQueryEnums.RDFSPARQLEndpointQueryErrorBehaviors)">
            <summary>
            Custom-ctor to configure options for a SPARQL endpoint query
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFSPARQLEndpointOperationOptions">
            <summary>
            RDFSPARQLEndpointOperationOptions customizes the default behavior of a SPARQL UPDATE endpoint operation
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFSPARQLEndpointOperationOptions.RequestContentType">
            <summary>
            Represents the Content-Type header to be used when posting the operation to the SPARQL UPDATE endpoint (defaults to: application/sparql-update)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpointOperationOptions.#ctor">
            <summary>
            Default-ctor to configure options for a SPARQL UPDATE endpoint operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFSPARQLEndpointOperationOptions.#ctor(RDFSharp.Query.RDFQueryEnums.RDFSPARQLEndpointOperationContentTypes)">
            <summary>
            Custom-ctor to configure options for a SPARQL UPDATE endpoint operation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFValues">
            <summary>
            RDFValues represents a binding of variables provided directly inside a SPARQL query.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFValues.Bindings">
            <summary>
            Dictionary of bindings representing the SPARQL values
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFValues.IsInjected">
            <summary>
            Flag indicating that the SPARQL values has been injected by Mirella
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.#ctor">
            <summary>
            Default-ctor to build an empty SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.ToString">
            <summary>
            Gives the string representation of the SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.AddColumn(RDFSharp.Query.RDFVariable,System.Collections.Generic.List{RDFSharp.Query.RDFPatternMember})">
            <summary>
            Adds the given column of bindings to the SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.GetDataTable">
            <summary>
            Gets the datatable representing the SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.MaxBindingsLength">
            <summary>
            Gets the current max length of the bindings
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFValues.GetValuesFilter">
            <summary>
            Gets the filter representation of the SPARQL values
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFVariable">
            <summary>
            RDFVariable represents a named "hole" in a pattern, to be filled with values during queries.
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFVariable.VariableName">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFVariable.#ctor(System.String)">
            <summary>
            Default-ctor to build a named SPARQL variable
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFVariable.ToString">
            <summary>
            Gives the string representation of the variable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOperationEngine">
            <summary>
            RDFOperationEngine is the engine for execution of SPARQL UPDATE operations
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateOperationOnGraphOrStore(RDFSharp.Query.RDFOperation,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL UPDATE operation on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateInsertDataOperation(RDFSharp.Query.RDFInsertDataOperation,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL INSERT DATA operation on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateInsertWhereOperation(RDFSharp.Query.RDFInsertWhereOperation,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL INSERT WHERE operation on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateDeleteDataOperation(RDFSharp.Query.RDFDeleteDataOperation,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL DELETE DATA operation on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateDeleteWhereOperation(RDFSharp.Query.RDFDeleteWhereOperation,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL DELETE WHERE operation on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateDeleteInsertWhereOperation(RDFSharp.Query.RDFDeleteInsertWhereOperation,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL DELETE/INSERT WHERE operation on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateLoadOperation(RDFSharp.Query.RDFLoadOperation,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL LOAD operation on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateClearOperation(RDFSharp.Query.RDFClearOperation,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL CLEAR operation on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.EvaluateOperationOnSPARQLUpdateEndpoint(RDFSharp.Query.RDFOperation,RDFSharp.Query.RDFSPARQLEndpoint,RDFSharp.Query.RDFSPARQLEndpointOperationOptions)">
            <summary>
            Evaluates the given operation on the given SPARQL UPDATE endpoint
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.ExecuteConstructQueryFromOperation(RDFSharp.Query.RDFOperation,RDFSharp.Model.RDFDataSource,System.String)">
            <summary>
            Executes the CONSTRUCT query for materialization of the operation templates
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.PopulateInsertOperationResults(System.Collections.Generic.List{RDFSharp.Query.RDFPattern},RDFSharp.Model.RDFDataSource)">
            <summary>
            Populates a datatble with data from the given INSERT templates
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationEngine.PopulateDeleteOperationResults(System.Collections.Generic.List{RDFSharp.Query.RDFPattern},RDFSharp.Model.RDFDataSource)">
            <summary>
            Populates a datatble with data from the given DELETE templates
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFOperationPrinter">
            <summary>
            RDFOperationPrinter is responsible for getting string representation of SPARQL UPDATE operation entities
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationPrinter.PrintInsertDataOperation(RDFSharp.Query.RDFInsertDataOperation)">
            <summary>
            Prints the string representation of a SPARQL INSERT DATA operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationPrinter.PrintInsertWhereOperation(RDFSharp.Query.RDFInsertWhereOperation)">
            <summary>
            Prints the string representation of a SPARQL INSERT WHERE operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationPrinter.PrintDeleteDataOperation(RDFSharp.Query.RDFDeleteDataOperation)">
            <summary>
            Prints the string representation of a SPARQL DELETE DATA operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationPrinter.PrintDeleteWhereOperation(RDFSharp.Query.RDFDeleteWhereOperation)">
            <summary>
            Prints the string representation of a SPARQL DELETE WHERE operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationPrinter.PrintDeleteInsertWhereOperation(RDFSharp.Query.RDFDeleteInsertWhereOperation)">
            <summary>
            Prints the string representation of a SPARQL DELETE/INSERT WHERE operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationPrinter.PrintLoadOperation(RDFSharp.Query.RDFLoadOperation)">
            <summary>
            Prints the string representation of a SPARQL LOAD operation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFOperationPrinter.PrintClearOperation(RDFSharp.Query.RDFClearOperation)">
            <summary>
            Prints the string representation of a SPARQL CLEAR operation
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEngine">
            <summary>
            RDFQueryEngine is the engine for execution of SPARQL queries (MIRELLA)
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryEngine.QueryMemberTemporaryResultTables">
            <summary>
            Dictionary of temporary result tables produced by evaluation of query members
            </summary>
        </member>
        <member name="P:RDFSharp.Query.RDFQueryEngine.QueryMemberFinalResultTables">
            <summary>
            Dictionary of final result tables produced by evaluation of query members
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEngine.SystemString">
            <summary>
            Default column type used for Mirella tables
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.#ctor">
            <summary>
            Default-ctor to initialize a query engine instance
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateSelectQuery(RDFSharp.Query.RDFSelectQuery,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL SELECT query on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateDescribeQuery(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL DESCRIBE query on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateConstructQuery(RDFSharp.Query.RDFConstructQuery,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL CONSTRUCT query on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateAskQuery(RDFSharp.Query.RDFAskQuery,RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given SPARQL ASK query on the given RDF datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluateQueryMembers(RDFSharp.Query.RDFQuery,System.Collections.Generic.List{RDFSharp.Query.RDFQueryMember},RDFSharp.Model.RDFDataSource)">
            <summary>
            Evaluates the given list of query members against the given datasource
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.EvaluatePatternGroup(RDFSharp.Query.RDFQuery,RDFSharp.Query.RDFPatternGroup,RDFSharp.Model.RDFDataSource)">
            <summary>
            Gets the intermediate result tables of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.FinalizePatternGroup(RDFSharp.Query.RDFQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Gets the final result table of the given pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyFilters(RDFSharp.Query.RDFQuery,RDFSharp.Query.RDFPatternGroup)">
            <summary>
            Applies the filters of the given pattern group to its result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyModifiers(RDFSharp.Query.RDFQuery,System.Data.DataTable)">
            <summary>
            Applies the query modifiers to the query result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.FillTemplates(System.Collections.Generic.List{RDFSharp.Query.RDFPattern},System.Data.DataTable,System.Boolean)">
            <summary>
            Fills the given templates with data from the given result table<br/>
            (needsContext flag is true only when the caller is a store operation)
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.DescribeTerms(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Model.RDFDataSource,System.Data.DataTable)">
            <summary>
            Describes the terms of the given DESCRIBE query with data from the given result table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.GetDescribeTermsFromQueryMembers(RDFSharp.Query.RDFDescribeQuery,System.Collections.Generic.IEnumerable{RDFSharp.Query.RDFQueryMember})">
            <summary>
            Exracts the describe terms from the given collection of query members
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Model.RDFDataSource)">
            <summary>
            Applies the given pattern to the given data source
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Model.RDFGraph)">
            <summary>
            Applies the given pattern to the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Store.RDFStore)">
            <summary>
            Applies the given pattern to the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Query.RDFFederation)">
            <summary>
            Applies the given pattern to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPattern(RDFSharp.Query.RDFPattern,RDFSharp.Query.RDFSPARQLEndpoint)">
            <summary>
            Applies the given pattern to the given federation
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ApplyPropertyPath(RDFSharp.Query.RDFPropertyPath,RDFSharp.Model.RDFDataSource)">
            <summary>
            Applies the given property path to the given graph
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEngine.DataColumnComparer">
            <summary>
            Utility class for comparison between data columns
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEngine.dtComparer">
            <summary>
            Static instance of the comparer used by the engine to compare data columns
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.AddColumn(System.Data.DataTable,System.String)">
            <summary>
            Adds a new column to the given table, avoiding duplicates
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.AddRow(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds a new row to the given table
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.PopulateTable(RDFSharp.Query.RDFPattern,System.Collections.Generic.List{RDFSharp.Model.RDFTriple},RDFSharp.Query.RDFQueryEnums.RDFPatternHoles,System.Data.DataTable)">
            <summary>
            Builds the table results of the pattern with values from the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.PopulateTable(RDFSharp.Query.RDFPattern,RDFSharp.Store.RDFMemoryStore,RDFSharp.Query.RDFQueryEnums.RDFPatternHoles,System.Data.DataTable)">
            <summary>
            Builds the table results of the pattern with values from the given store
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.InnerJoinTables(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Joins two datatables WITHOUT support for OPTIONAL data
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.OuterJoinTables(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Joins two datatables WITH support for OPTIONAL data
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.CombineTables(System.Collections.Generic.List{System.Data.DataTable},System.Boolean)">
            <summary>
            Combines the given list of data tables, depending on presence of common columns and dynamic detection of Optional / Union operators
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryEngine.ProjectTable(RDFSharp.Query.RDFSelectQuery,System.Data.DataTable)">
            <summary>
            Applies the projection operator on the given table, based on the given query's projection variables
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryPrinter">
            <summary>
            RDFQueryPrinter is responsible for getting string representation of SPARQL query entities
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintSelectQuery(RDFSharp.Query.RDFSelectQuery,System.Double,System.Boolean)">
            <summary>
            Prints the string representation of a SPARQL SELECT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintDescribeQuery(RDFSharp.Query.RDFDescribeQuery)">
            <summary>
            Prints the string representation of a SPARQL DESCRIBE query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintConstructQuery(RDFSharp.Query.RDFConstructQuery)">
            <summary>
            Prints the string representation of a SPARQL CONSTRUCT query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintAskQuery(RDFSharp.Query.RDFAskQuery)">
            <summary>
            Prints the string representation of a SPARQL ASK query
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintPatternGroup(RDFSharp.Query.RDFPatternGroup,System.Int32,System.Boolean,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the string representation of a pattern group
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintPattern(RDFSharp.Query.RDFPattern,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the string representation of a pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintPropertyPath(RDFSharp.Query.RDFPropertyPath,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the string representation of a property path
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintValues(RDFSharp.Query.RDFValues,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace},System.String)">
            <summary>
            Prints the string representation of a SPARQL values
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryPrinter.PrintPatternMember(RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Prints the string representation of a pattern member
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums">
            <summary>
            RDFQueryEnums represents a collector for all the enumerations used by the "RDFSharp.Query" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFPatternHoles">
            <summary>
            RDFPatternHoles represents an enumeration for possible positions of holes in a pattern.
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors">
            <summary>
            RDFOrderByFlavors represents an enumeration for possible directions of query results ordering on a given variable.
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors.ASC">
            <summary>
            Orders SPARQL results in ascending mode on the selected variable
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFOrderByFlavors.DESC">
            <summary>
            Orders SPARQL results in descending mode on the selected variable
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors">
            <summary>
            RDFComparisonFlavors represents an enumeration for possible comparison modes between two patten members.
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.LessOrEqualThan">
            <summary>
            Represents the less-or-equal comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.LessThan">
            <summary>
            Represents the less comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.EqualTo">
            <summary>
            Represents the equal comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.NotEqualTo">
            <summary>
            Represents the not-equal comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.GreaterThan">
            <summary>
            Represents the greater comparison operator
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFComparisonFlavors.GreaterOrEqualThan">
            <summary>
            Represents the greater-or-equal comparison operator
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFPropertyPathStepFlavors">
            <summary>
            RDFPropertyPathStepFlavors represents an enumeration for possible connection types within a property path.
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFPropertyPathStepFlavors.Sequence">
            <summary>
            Steps within a property path are connected with AND semantic
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFPropertyPathStepFlavors.Alternative">
            <summary>
            Steps within a property path are connected with OR semantic
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors">
            <summary>
            RDFMinMaxAggregatorFlavors represents an enumeration for supported flavors of MIN/MAX aggregators
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors.Numeric">
            <summary>
            MIN/MAX aggregator suitable for working on columns with numeric typedliteral values
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFMinMaxAggregatorFlavors.String">
            <summary>
            MIN/MAX aggregator suitable for working on columns with generic values
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFSPARQLEndpointQueryErrorBehaviors">
            <summary>
            RDFSPARQLEndpointQueryErrorBehaviors represents an enumeration for possible handling behaviors of SPARQL endpoint query errors
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFSPARQLEndpointQueryErrorBehaviors.ThrowException">
            <summary>
            An exception will be delivered to the application
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFSPARQLEndpointQueryErrorBehaviors.GiveEmptyResult">
            <summary>
            An empty SPARQL result will be delivered to the application
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFSPARQLEndpointOperationContentTypes">
            <summary>
            RDFSPARQLEndpointOperationContentTypes represents an enumeration for supported Content-Type headers to be sent for SPARQL UPDATE operations
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFSPARQLEndpointOperationContentTypes.Sparql_Update">
            <summary>
            Posts the SPARQL UPDATE operation with "application/sparql-update" Content-Type header
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFSPARQLEndpointOperationContentTypes.X_WWW_FormUrlencoded">
            <summary>
            Posts the SPARQL UPDATE operation with "application/x-www-form-urlencoded" Content-Type header
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryEnums.RDFClearOperationFlavor">
            <summary>
            RDFClearOperationFlavor represents an enumeration for supported flavors of implicit SPARQL CLEAR operation 
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFClearOperationFlavor.DEFAULT">
            <summary>
            Indicates to remove only triples belonging to the default graph
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFClearOperationFlavor.NAMED">
            <summary>
            Indicates to remove only triples belonging to the named graphs
            </summary>
        </member>
        <member name="F:RDFSharp.Query.RDFQueryEnums.RDFClearOperationFlavor.ALL">
            <summary>
            Indicates to remove only triples belonging to the both default and named graphs
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryException">
            <summary>
            RDFQueryException represents an exception thrown during creation and execution of SPARQL queries.
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFQueryException
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFQueryException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFQueryException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFQueryException
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryUtilities">
            <summary>
            RDFQueryUtilities is a collector of reusable utility methods for RDF query management
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.ParseRDFPatternMember(System.String)">
            <summary>
            Parses the given string to return an instance of pattern member
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.CompareRDFPatternMembers(RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Compares the given pattern members, throwing a "Type Error" whenever the comparison operator detects sematically incompatible members;
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.AbbreviateRDFPatternMember(RDFSharp.Query.RDFPatternMember,System.Collections.Generic.List{RDFSharp.Model.RDFNamespace})">
            <summary>
            Tries to abbreviate the string representation of the given pattern member by searching for it in the given list of namespaces
            </summary>
        </member>
        <member name="M:RDFSharp.Query.RDFQueryUtilities.RemoveDuplicates``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the duplicates from the given list of T elements
            </summary>
        </member>
        <member name="T:RDFSharp.Query.RDFQueryUtilities.RDFWebClient">
            <summary>
            RDFWebClient extends WebClient with support for customization of timeout
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyData">
            <summary>
            RDFOntologyData represents the data component (A-BOX) of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyData.FactsCount">
            <summary>
            Count of the facts composing the data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyData.LiteralsCount">
            <summary>
            Count of the literals composing the data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyData.FactsEnumerator">
            <summary>
            Gets the enumerator on the facts of the data for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyData.LiteralsEnumerator">
            <summary>
            Gets the enumerator on the literals of the data for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyData.Annotations">
            <summary>
            Annotations describing facts of the ontology data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyData.Relations">
            <summary>
            Relations describing facts of the ontology data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyData.Facts">
            <summary>
            Dictionary of facts composing the ontology data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyData.Literals">
            <summary>
            Dictionary of literals composing the ontology data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.#ctor">
            <summary>
            Default-ctor to build an empty ontology data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#OWL#RDFOntologyFact}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the data's facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the data's facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddFact(RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Adds the given fact to the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddLiteral(RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal to the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddStandardAnnotation(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Adds the given standard annotation to the given ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddCustomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Adds the given custom annotation to the given ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddClassTypeRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "ontologyFact -> rdf:type -> ontologyClass" relation to the data (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddSameAsRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aFact -> owl:sameAs -> bFact" relation to the data (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddDifferentFromRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aFact -> owl:differentFrom -> bFact" relation to the data (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddAllDifferentRelation(System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyFact})">
            <summary>
            Foreach of the given list of facts, adds the "aFact -> owl:differentFrom -> bFact" relation to the data [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddAssertionRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aFact -> objectProperty -> bFact" relation to the data (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddAssertionRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "ontologyFact -> datatypeProperty -> ontologyLiteral" relation to the data (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddNegativeAssertionRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Adds the "aFact -> objectProperty -> bFact" negative relation to the data [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddNegativeAssertionRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the "ontologyFact -> datatypeProperty -> ontologyLiteral" negative relation to the data [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.AddAxiomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation,System.String)">
            <summary>
            Adds the given owl:Axiom annotation to the given taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveFact(RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Removes the given fact from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.ReplaceFact(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Replaces all the occurrences of the given fact with the given new fact in the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveLiteral(RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Removes the given literal from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.ReplaceLiteral(RDFSharp.Semantics.OWL.RDFOntologyLiteral,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Replaces all the occurrences of the given literal with the given new literal in the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveStandardAnnotation(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Removes the given standard annotation from the given ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveCustomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Removes the given custom annotation from the given ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveClassTypeRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Removes the "ontologyFact -> rdf:type -> ontologyClass" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveSameAsRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Removes the "aFact -> owl:sameAs -> bFact" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveDifferentFromRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Removes the "aFact -> owl:differentFrom -> bFact" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveAllDifferentRelation(System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyFact})">
            <summary>
            Foreach of the given list of facts, removes the "aFact -> owl:differentFrom -> bFact" relation from the data [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveAssertionRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Removes the "aFact -> objectProperty -> bFact" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveAssertionRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Removes the "ontologyFact -> datatypeProperty -> ontologyLiteral" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveNegativeAssertionRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Removes the "aFact -> objectProperty -> bFact" negative relation from the data [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveNegativeAssertionRelation(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Removes the "ontologyFact -> datatypeProperty -> ontologyLiteral" negative relation from the data [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.RemoveAxiomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Removes the given owl:Axiom annotation [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.SelectFact(System.Int64)">
            <summary>
            Selects the fact represented by the given identifier
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.SelectFact(System.String)">
            <summary>
            Selects the fact represented by the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.SelectLiteral(System.Int64)">
            <summary>
            Selects the literal represented by the given identifier
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.SelectLiteral(System.String)">
            <summary>
            Selects the literal represented by the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.GetTaxonomyEntryRepresentative(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Gets the representative of the given taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.IntersectWith(RDFSharp.Semantics.OWL.RDFOntologyData)">
            <summary>
            Builds a new intersection data from this data and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.UnionWith(RDFSharp.Semantics.OWL.RDFOntologyData)">
            <summary>
            Builds a new union data from this data and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.DifferenceWith(RDFSharp.Semantics.OWL.RDFOntologyData)">
            <summary>
            Builds a new difference data from this data and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.ToRDFGraph(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology data, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyData.ToRDFGraphAsync(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously gets a graph representation of this ontology data, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyDataLens">
            <summary>
            RDFOntologyDataLens represents a magnifying glass on the knowledge available for a fact within an ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataLens.OntologyFact">
            <summary>
            Fact being observed by the data lens
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataLens.Ontology">
            <summary>
            Ontology being observed by the data lens
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.#ctor(RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Builds a data lens for the given fact on the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.SameFacts(System.Boolean)">
            <summary>
            Enlists the facts which are directly (or indirectly, if inference is requested) equivalent to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.SameFactsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the facts which are directly (or indirectly, if inference is requested) equivalent to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.DifferentFacts(System.Boolean)">
            <summary>
            Enlists the facts which are directly (or indirectly, if inference is requested) different from the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.DifferentFactsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the facts which are directly (or indirectly, if inference is requested) equivalent to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.ClassTypes(System.Boolean)">
            <summary>
            Enlists the classes to which the lens fact directly (or indirectly, if inference is requested) belongs
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.ClassTypesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the classes to which the lens fact directly (or indirectly, if inference is requested) belongs
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.ObjectAssertions(System.Boolean)">
            <summary>
            Enlists the object assertions which are directly (or indirectly, if inference is requested) assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.ObjectAssertionsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the object assertions which are directly (or indirectly, if inference is requested) assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.NegativeObjectAssertions(System.Boolean)">
            <summary>
            Enlists the negative object assertions which are directly (or indirectly, if inference is requested) assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.NegativeObjectAssertionsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the negative object assertions which are directly (or indirectly, if inference is requested) assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.DataAssertions(System.Boolean)">
            <summary>
            Enlists the data assertions which are directly (or indirectly, if inference is requested) assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.DataAssertionsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the data assertions which are directly (or indirectly, if inference is requested) assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.NegativeDataAssertions(System.Boolean)">
            <summary>
            Enlists the negative data assertions which are directly (or indirectly, if inference is requested) assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.NegativeDataAssertionsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the negative data assertions which are directly (or indirectly, if inference is requested) assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.ObjectAnnotations">
            <summary>
            Enlists the object annotations which are assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.ObjectAnnotationsAsync">
            <summary>
            Asynchronously enlists the object annotations which are assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.DataAnnotations">
            <summary>
            Enlists the literal annotations which are assigned to the lens fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataLens.DataAnnotationsAsync">
            <summary>
            Asynchronously enlists the literal annotations which are assigned to the lens fact
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata">
            <summary>
            RDFOntologyDataMetadata represents a collector for relations connecting ontology facts.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata.ClassType">
            <summary>
            "rdf:type" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata.SameAs">
            <summary>
            "owl:sameAs" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata.DifferentFrom">
            <summary>
            "owl:differentFrom" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata.Assertions">
            <summary>
            "ontology property -> ontology resource" custom relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata.NegativeAssertions">
            <summary>
            "ontology property -> ontology resource" custom negative relations [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata.Member">
            <summary>
            "skos:member" relations [SKOS]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata.MemberList">
            <summary>
            "skos:memberList" relations [SKOS]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataMetadata.#ctor">
            <summary>
            Default-ctor to build an empty ontology data metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyFact">
            <summary>
            RDFOntologyFact represents an instance of an ontology class within an ontology data.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyFact.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology fact with the given name.
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyLiteral">
            <summary>
            RDFOntologyLiteral represents an instance of literal within an ontology data.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyLiteral.#ctor(RDFSharp.Model.RDFLiteral)">
            <summary>
            Default-ctor to build an ontology literal from the given literal.
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyComplementClass">
            <summary>
            RDFOntologyComplementClass represents a complement class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyComplementClass.ComplementOf">
            <summary>
            Ontology class for which this class represents the complement
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyComplementClass.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Default-ctor to build an ontology complement class of the given class and with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyIntersectionClass">
            <summary>
            RDFOntologyIntersectionClass represents an intersection class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyIntersectionClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology intersection class with the given className
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyUnionClass">
            <summary>
            RDFOntologyUnionClass represents a union class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyUnionClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology union class with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyDataRangeClass">
            <summary>
            RDFOntologyDataRangeClass represents a datarange class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDataRangeClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology datarange class with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyEnumerateClass">
            <summary>
            RDFOntologyEnumerateClass represents an enumerate class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyEnumerateClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology enumerate class with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyAllValuesFromRestriction">
            <summary>
            RDFOntologyAllValuesFromRestriction represents an "owl:AllValuesFrom" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAllValuesFromRestriction.FromClass">
            <summary>
            Ontology class representing the only accepted class type of the restricted property's range members
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyAllValuesFromRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Default-ctor to build an "owl:AllValuesFrom" ontology restriction with the given name on the given property and the given fromClass
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyCardinalityRestriction">
            <summary>
            RDFOntologyCardinalityRestriction represents an "owl:Cardinality" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyCardinalityRestriction.MinCardinality">
            <summary>
            Minimum accepted cardinality for the restriction to be satisfied
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyCardinalityRestriction.MaxCardinality">
            <summary>
            Maximum accepted cardinality for the restriction to be satisfied
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyCardinalityRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyProperty,System.Int32,System.Int32)">
            <summary>
            Default-ctor to build an ontology cardinality restriction with the given name on the given property
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyHasSelfRestriction">
            <summary>
            RDFOntologyHasValueRestriction represents an "owl:HasSelf" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHasSelfRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Default-ctor to build an "owl:HasSelf" ontology restriction with the given name on the given property
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyHasValueRestriction">
            <summary>
            RDFOntologyHasValueRestriction represents an "owl:HasValue" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyHasValueRestriction.RequiredValue">
            <summary>
            Ontology resource representing the accepted value of the restricted property's range members
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHasValueRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build an "owl:HasValue" ontology restriction with the given name on the given property and the given requiredValue
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHasValueRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build an "owl:HasValue" ontology restriction with the given name on the given property and the given required value
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyQualifiedCardinalityRestriction">
            <summary>
            RDFOntologyQualifiedCardinalityRestriction represents an "owl:QualifiedCardinality" restriction class definition within an ontology model [OWL2].
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyQualifiedCardinalityRestriction.MinQualifiedCardinality">
            <summary>
            Minimum accepted qualified cardinality for the restriction to be satisfied
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyQualifiedCardinalityRestriction.MaxQualifiedCardinality">
            <summary>
            Maximum accepted qualified cardinality for the restriction to be satisfied
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyQualifiedCardinalityRestriction.OnClass">
            <summary>
            Ontology class on which the ontology qualified restriction is applied
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyQualifiedCardinalityRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyClass,System.Int32,System.Int32)">
            <summary>
            Default-ctor to build an ontology qualified cardinality restriction with the given name on the given property and given class
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyRestriction">
            <summary>
            RDFOntologyRestriction represents a restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyRestriction.OnProperty">
            <summary>
            Ontology property on which the ontology restriction is applied
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Default-ctor to build an ontology restriction with the given name on the given ontology property
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologySomeValuesFromRestriction">
            <summary>
            RDFOntologySomeValuesFromRestriction represents an "owl:SomeValuesFrom" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologySomeValuesFromRestriction.FromClass">
            <summary>
            Ontology class representing the accepted class type of the restricted property's range members
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologySomeValuesFromRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Default-ctor to build an "owl:SomeValuesFrom" ontology restriction with the given name on the given property and the given fromClass
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyClass">
            <summary>
            RDFOntologyClass represents a class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClass.Deprecated">
            <summary>
            Flag indicating that this ontology class is "owl:DeprecatedClass"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClass.Nature">
            <summary>
            Nature of the ontology class (RDFS/OWL)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClass.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyClassNature)">
            <summary>
            Default-ctor to build an ontology class with the given name and nature
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClass.SetDeprecated(System.Boolean)">
            <summary>
            Sets or unsets this ontology class as "owl:DeprecatedClass"
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyClassModel">
            <summary>
            RDFOntologyClassModel represents the class-oriented model component (T-BOX) of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.ClassesCount">
            <summary>
            Count of the classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.DeprecatedClassesCount">
            <summary>
            Count of the deprecated classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RestrictionsCount">
            <summary>
            Count of the restrictions classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.EnumeratesCount">
            <summary>
            Count of the enumerate classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.DataRangesCount">
            <summary>
            Count of the datarange classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.CompositesCount">
            <summary>
            Count of the composite classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.ClassesEnumerator">
            <summary>
            Gets the enumerator on the class model's classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.DeprecatedClassesEnumerator">
            <summary>
            Gets the enumerator on the class model's deprecated classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RestrictionsEnumerator">
            <summary>
            Gets the enumerator on the class model's restriction classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.EnumeratesEnumerator">
            <summary>
            Gets the enumerator on the class model's enumerate classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.DataRangesEnumerator">
            <summary>
            Gets the enumerator on the class model's datarange classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.CompositesEnumerator">
            <summary>
            Gets the enumerator on the class model's composite classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.Annotations">
            <summary>
            Annotations describing classes of the ontology class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.Relations">
            <summary>
            Relations describing classes of the ontology class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModel.Classes">
            <summary>
            Dictionary of classes composing the ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.#ctor">
            <summary>
            Default-ctor to build an empty class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#OWL#RDFOntologyClass}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the class model's classes
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the ontology class model's classes
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddClass(RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Adds the given class to the ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddRestriction(RDFSharp.Semantics.OWL.RDFOntologyRestriction)">
            <summary>
            Adds the given restriction class to the ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddStandardAnnotation(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Adds the given standard annotation to the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddCustomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Adds the given custom annotation to the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddSubClassOfRelation(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "childClass -> rdfs:subClassOf -> motherClass" relation to the class model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddEquivalentClassRelation(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aClass -> owl:equivalentClass -> bClass" relation to the class model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddDisjointWithRelation(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aClass -> owl:disjointWith -> bClass" relation to the class model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddOneOfRelation(RDFSharp.Semantics.OWL.RDFOntologyEnumerateClass,System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyFact})">
            <summary>
            Foreach of the given facts, adds the "ontologyEnumerateClass -> owl:oneOf -> ontologyFact" relation to the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddOneOfRelation(RDFSharp.Semantics.OWL.RDFOntologyDataRangeClass,System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyLiteral})">
            <summary>
            Foreach of the given literals, adds the "ontologyDataRangeClass -> owl:oneOf -> ontologyLiteral" relation to the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddIntersectionOfRelation(RDFSharp.Semantics.OWL.RDFOntologyIntersectionClass,System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyClass})">
            <summary>
            Foreach of the given classes, adds the "ontologyIntersectionClass -> owl:intersectionOf -> ontologyClass" relation to the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddUnionOfRelation(RDFSharp.Semantics.OWL.RDFOntologyUnionClass,System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyClass})">
            <summary>
            Foreach of the given classes, adds the "ontologyUnionClass -> owl:unionOf -> ontologyClass" relation to the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddDisjointUnionRelation(RDFSharp.Semantics.OWL.RDFOntologyUnionClass,System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyClass})">
            <summary>
            Foreach of the given classes, adds the "ontologyUnionClass -> owl:unionOf -> ontologyClass" and the<br/>
            "ontologyClassA -> owl:disjointWith -> ontologyClassB" relations to the class model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddAllDisjointClassesRelation(System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyClass})">
            <summary>
            Foreach of the given classes, adds the "ontologyClassA -> owl:disjointWith -> ontologyClassB" relations to the class model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddHasKeyRelation(RDFSharp.Semantics.OWL.RDFOntologyClass,System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyProperty})">
            <summary>
            For each of the given properties, adds the "ontologyClass -> owl:hasKey -> keyProperty" relation to the class model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.AddAxiomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation,System.String)">
            <summary>
            Adds the given owl:Axiom annotation to the given taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveClass(RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Removes the given class from the ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveRestriction(RDFSharp.Semantics.OWL.RDFOntologyRestriction)">
            <summary>
            Removes the given restriction class from the ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveStandardAnnotation(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Removes the given standard annotation from the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveCustomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Removes the given custom annotation from the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveSubClassOfRelation(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Removes the "childClass -> rdfs:subClassOf -> motherClass" relation from the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveEquivalentClassRelation(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Removes the "aClass -> owl:equivalentClass -> bClass" relation from the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveDisjointWithRelation(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Removes the "aClass -> owl:disjointWith -> bClass" relation from the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveOneOfRelation(RDFSharp.Semantics.OWL.RDFOntologyEnumerateClass,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Removes the "ontologyEnumerateClass -> owl:oneOf -> ontologyFact" relation from the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveOneOfRelation(RDFSharp.Semantics.OWL.RDFOntologyDataRangeClass,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Removes the "ontologyDataRangeClass -> owl:oneOf -> ontologyLiteral" relation from the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveIntersectionOfRelation(RDFSharp.Semantics.OWL.RDFOntologyIntersectionClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Removes the "ontologyIntersectionClass -> owl:intersectionOf -> ontologyClass" relation from the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveUnionOfRelation(RDFSharp.Semantics.OWL.RDFOntologyUnionClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Removes the "ontologyUnionClass -> owl:unionOf -> ontologyClass" relation from the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveDisjointUnionRelation(RDFSharp.Semantics.OWL.RDFOntologyUnionClass,System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyClass})">
            <summary>
            Foreach of the given classes, removes the "ontologyUnionClass -> owl:unionOf -> ontologyClass" and the<br/>
            "ontologyClassA -> owl:disjointWith -> ontologyClassB" relations from the class model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveAllDisjointClassesRelation(System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyClass})">
            <summary>
            Foreach of the given classes, removes the "ontologyClassA -> owl:disjointWith -> ontologyClassB" relations from the class model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveHasKeyRelation(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Removes the "ontologyClass -> owl:hasKey -> keyProperty" relation from the class model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.RemoveAxiomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Removes the given owl:Axiom annotation [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.SelectClass(System.Int64)">
            <summary>
            Selects the ontology class represented by the given identifier
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.SelectClass(System.String)">
            <summary>
            Selects the ontology class represented by the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.GetTaxonomyEntryRepresentative(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Gets the representative of the given taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.IntersectWith(RDFSharp.Semantics.OWL.RDFOntologyClassModel)">
            <summary>
            Builds a new intersection class model from this class model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.UnionWith(RDFSharp.Semantics.OWL.RDFOntologyClassModel)">
            <summary>
            Builds a new union class model from this class model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.DifferenceWith(RDFSharp.Semantics.OWL.RDFOntologyClassModel)">
            <summary>
            Builds a new difference class model from this class model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.ToRDFGraph(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology class model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModel.ToRDFGraphAsync(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously gets a graph representation of this ontology class model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens">
            <summary>
            RDFOntologyClassModelLens represents a magnifying glass on the knowledge available for a class within an ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.OntologyClass">
            <summary>
            Class being observed by the class model lens
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.Ontology">
            <summary>
            Ontology being observed by the class model lens
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.#ctor(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Builds a class model lens for the given class on the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.SubClasses(System.Boolean)">
            <summary>
            Enlists the classes which are directly (or indirectly, if inference is requested) children of the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.SubClassesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the classes which are directly (or indirectly, if inference is requested) children of the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.SuperClasses(System.Boolean)">
            <summary>
            Enlists the classes which are directly (or indirectly, if inference is requested) parents of the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.SuperClassesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the classes which are directly (or indirectly, if inference is requested) parents of the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.EquivalentClasses(System.Boolean)">
            <summary>
            Enlists the classes which are directly (or indirectly, if inference is requested) equivalent to the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.EquivalentClassesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the classes which are directly (or indirectly, if inference is requested) equivalent to the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.DisjointClasses(System.Boolean)">
            <summary>
            Enlists the classes which are directly (or indirectly, if inference is requested) disjoint from the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.DisjointClassesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the classes which are directly (or indirectly, if inference is requested) disjoint from the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.Keys">
            <summary>
            Enlists the properties which are keys of the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.KeysAsync">
            <summary>
            Asynchronously enlists the properties which are keys of the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.Members(System.Boolean)">
            <summary>
            Enlists the facts/literals which are directly (or indirectly, if inference is requested) members of the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.MembersAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the facts/literals which are directly (or indirectly, if inference is requested) members of the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.ObjectAnnotations">
            <summary>
            Enlists the object annotations which are assigned to the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.ObjectAnnotationsAsync">
            <summary>
            Asynchronously enlists the object annotations which are assigned to the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.DataAnnotations">
            <summary>
            Enlists the literal annotations which are assigned to the lens class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelLens.DataAnnotationsAsync">
            <summary>
            Asynchronously enlists the literal annotations which are assigned to the lens class
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata">
            <summary>
            RDFOntologyClassModelMetadata represents a collector for relations describing ontology classes.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata.SubClassOf">
            <summary>
            "rdfs:subClassOf" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata.EquivalentClass">
            <summary>
            "owl:equivalentClass" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata.DisjointWith">
            <summary>
            "owl:disjointWith" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata.OneOf">
            <summary>
            "owl:oneOf" relations (specific for enumerate and datarange classes)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata.IntersectionOf">
            <summary>
            "owl:intersectionOf" relations (specific for intersection classes)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata.UnionOf">
            <summary>
            "owl:unionOf" relations (specific for union classes)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata.HasKey">
            <summary>
            "owl:hasKey" relations [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyClassModelMetadata.#ctor">
            <summary>
            Default-ctor to build an empty ontology class model metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty">
            <summary>
            RDFOntologyAnnotationProperty represents an annotation property definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology annotation property from the given non-blank resource
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty">
            <summary>
            RDFOntologyDatatypeProperty represents a datatype property definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology datatype property from the given non-blank resource
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty">
            <summary>
            RDFOntologyObjectProperty represents an object property definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.Symmetric">
            <summary>
            Flag indicating that the ontology property is "owl:SymmetricProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.Transitive">
            <summary>
            Flag indicating that the ontology property is "owl:TransitiveProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.InverseFunctional">
            <summary>
            Flag indicating that the ontology property is "owl:InverseFunctionalProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.Asymmetric">
            <summary>
            Flag indicating that the ontology property is "owl:AsymmetricProperty" [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.Reflexive">
            <summary>
            Flag indicating that the ontology property is "owl:ReflexiveProperty" [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.Irreflexive">
            <summary>
            Flag indicating that the ontology property is "owl:IrreflexiveProperty" [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology object property from the given non-blank resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.SetSymmetric(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:SymmetricProperty"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.SetReflexive(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:ReflexiveProperty" [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.SetIrreflexive(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:IrreflexiveProperty"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.SetAsymmetric(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:AsymmetricProperty" [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.SetTransitive(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:TransitiveProperty"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyObjectProperty.SetInverseFunctional(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:InverseFunctionalProperty"
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyProperty">
            <summary>
            RDFOntologyProperty represents a property definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyProperty.Deprecated">
            <summary>
            Flag indicating that this ontology property is "owl:DeprecatedProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyProperty.Functional">
            <summary>
            Flag indicating that this ontology property is "owl:FunctionalProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyProperty.Domain">
            <summary>
            Domain class of the ontology property
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyProperty.Range">
            <summary>
            Range class of the ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyProperty.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology RDF property with the given non-blank name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyProperty.SetDomain(RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Sets the domain of this ontology property to the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyProperty.SetRange(RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Sets the range of this ontology property to the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyProperty.SetFunctional(System.Boolean)">
            <summary>
            Sets or unsets this ontology property as "owl:FunctionalProperty"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyProperty.SetDeprecated(System.Boolean)">
            <summary>
            Sets or unsets this ontology property as "owl:DeprecatedProperty"
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel">
            <summary>
            RDFOntologyPropertyModel represents the property-oriented model component (T-BOX) of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.PropertiesCount">
            <summary>
            Count of the properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.DeprecatedPropertiesCount">
            <summary>
            Count of the deprecated properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AnnotationPropertiesCount">
            <summary>
            Count of the annotation properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.DatatypePropertiesCount">
            <summary>
            Count of the datatype properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.ObjectPropertiesCount">
            <summary>
            Count of the object properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.FunctionalPropertiesCount">
            <summary>
            Count of the functional properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.SymmetricPropertiesCount">
            <summary>
            Count of the symmetric properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AsymmetricPropertiesCount">
            <summary>
            Count of the asymmetric properties composing the property model [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.ReflexivePropertiesCount">
            <summary>
            Count of the reflexive properties composing the property model [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.IrreflexivePropertiesCount">
            <summary>
            Count of the irreflexive properties composing the property model [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.TransitivePropertiesCount">
            <summary>
            Count of the transitive properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.InverseFunctionalPropertiesCount">
            <summary>
            Count of the inverse functional properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.PropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.DeprecatedPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's deprecated properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AnnotationPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's annotation properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.DatatypePropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's datatype properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.ObjectPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's object properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.FunctionalPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's functional properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.SymmetricPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's symmetric properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AsymmetricPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's asymmetric properties for iteration [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.ReflexivePropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's reflexive properties for iteration [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.IrreflexivePropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's irreflexive properties for iteration [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.TransitivePropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's transitive properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.InverseFunctionalPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's inverse functional properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.Annotations">
            <summary>
            Annotations describing properties of the ontology property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.Relations">
            <summary>
            Relations describing properties of the ontology property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.Properties">
            <summary>
            Dictionary of properties composing the ontology property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.#ctor">
            <summary>
            Default-ctor to build an empty property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#OWL#RDFOntologyProperty}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the property model's properties
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the property model's properties
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddProperty(RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Adds the given property to the ontology property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddStandardAnnotation(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Adds the given standard annotation to the given ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddCustomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Adds the given custom annotation to the given ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddSubPropertyOfRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "childProperty -> rdfs:subPropertyOf -> motherProperty" relation to the property model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddSubPropertyOfRelation(RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "childProperty -> rdfs:subPropertyOf -> motherProperty" relation to the property model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddEquivalentPropertyRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aProperty -> owl:equivalentProperty -> bProperty" relation to the property model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddEquivalentPropertyRelation(RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aProperty -> owl:equivalentProperty -> bProperty" relation to the property model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddPropertyDisjointWithRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aProperty -> owl:propertyDisjointWith -> bProperty" relation to the property model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddPropertyDisjointWithRelation(RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aProperty -> owl:propertyDisjointWith -> bProperty" relation to the property model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddInverseOfRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "aProperty -> owl:inverseOf -> bProperty" relation to the property model (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddAllDisjointPropertiesRelation(System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyObjectProperty})">
            <summary>
            Foreach of the given properties, adds the "ontologyPropertyA -> owl:propertyDisjointWith -> ontologyPropertyB" relations to the property model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddAllDisjointPropertiesRelation(System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty})">
            <summary>
            Foreach of the given properties, adds the "ontologyPropertyA -> owl:propertyDisjointWith -> ontologyPropertyB" relations to the property model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddPropertyChainAxiomRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyObjectProperty})">
            <summary>
            For each of the given properties, adds the "ontologyProperty -> owl:propertyChainAxiom -> chainProperty" relation to the property model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.AddAxiomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation,System.String)">
            <summary>
            Adds the given owl:Axiom annotation to the given taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveProperty(RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Removes the given property from the ontology property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveStandardAnnotation(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Removes the given standard annotation from the given ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveCustomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Removes the given custom annotation from the given ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveSubPropertyOfRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Removes the "childProperty -> rdfs:subPropertyOf -> motherProperty" relation from the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveSubPropertyOfRelation(RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty)">
            <summary>
            Removes the "childProperty -> rdfs:subPropertyOf -> motherProperty" relation from the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveEquivalentPropertyRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Removes the "aProperty -> owl:equivalentProperty -> bProperty" relation from the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveEquivalentPropertyRelation(RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty)">
            <summary>
            Removes the "aProperty -> owl:equivalentProperty -> bProperty" relation from the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemovePropertyDisjointWithRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Removes the "aProperty -> owl:propertyDisjointWith -> bProperty" relation from the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemovePropertyDisjointWithRelation(RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty)">
            <summary>
            Removes the "aProperty -> owl:propertyDisjointWith -> bProperty" relation from the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveInverseOfRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Removes the "aProperty -> owl:inverseOf -> bProperty" relation from the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveAllDisjointPropertiesRelation(System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyObjectProperty})">
            <summary>
            Foreach of the given properties, removes the "ontologyPropertyA -> owl:propertyDisjointWith -> ontologyPropertyB" relations from the property model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveAllDisjointPropertiesRelation(System.Collections.Generic.List{RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty})">
            <summary>
            Foreach of the given properties, removes the "ontologyPropertyA -> owl:propertyDisjointWith -> ontologyPropertyB" relations from the property model [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemovePropertyChainAxiomRelation(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Removes the "ontologyProperty -> owl:propertyChainAxiom -> chainProperty" relation from the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.RemoveAxiomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Removes the given owl:Axiom annotation [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.SelectProperty(System.Int64)">
            <summary>
            Selects the ontology property represented by the given identifier
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.SelectProperty(System.String)">
            <summary>
            Selects the ontology property represented by the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.GetTaxonomyEntryRepresentative(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Gets the representative of the given taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.IntersectWith(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel)">
            <summary>
            Builds a new intersection property model from this property model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.UnionWith(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel)">
            <summary>
            Builds a new union property model from this property model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.DifferenceWith(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel)">
            <summary>
            Builds a new difference property model from this property model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.ToRDFGraph(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology property model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModel.ToRDFGraphAsync(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously gets a graph representation of this ontology property model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens">
            <summary>
            RDFOntologyPropertyModelLens represents a magnifying glass on the knowledge available for a property within an ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.OntologyProperty">
            <summary>
            Property being observed by the property model lens
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.Ontology">
            <summary>
            Ontology being observed by the property model lens
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.#ctor(RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Builds a property model lens for the given property on the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.SubProperties(System.Boolean)">
            <summary>
            Enlists the properties which are directly (or indirectly, if inference is requested) children of the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.SubPropertiesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the properties which are directly (or indirectly, if inference is requested) children of the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.SuperProperties(System.Boolean)">
            <summary>
            Enlists the properties which are directly (or indirectly, if inference is requested) parent of the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.SuperPropertiesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the properties which are directly (or indirectly, if inference is requested) parent of the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.EquivalentProperties(System.Boolean)">
            <summary>
            Enlists the properties which are directly (or indirectly, if inference is requested) equivalent to the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.EquivalentPropertiesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the properties which are directly (or indirectly, if inference is requested) equivalent to the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.InverseProperties(System.Boolean)">
            <summary>
            Enlists the properties which are directly (or indirectly, if inference is requested) inverse of the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.InversePropertiesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the properties which are directly (or indirectly, if inference is requested) inverse of the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.DisjointProperties(System.Boolean)">
            <summary>
            Enlists the properties which are directly (or indirectly, if inference is requested) disjoint with the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.DisjointPropertiesAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the properties which are directly (or indirectly, if inference is requested) disjoint with the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.ChainAxioms">
            <summary>
            Enlists the properties which are chain axioms of the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.ChainAxiomsAsync">
            <summary>
            Asynchronously enlists the properties which are chain axioms of the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.ObjectAnnotations">
            <summary>
            Enlists the object annotations which are assigned to the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.ObjectAnnotationsAsync">
            <summary>
            Asynchronously enlists the object annotations which are assigned to the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.DataAnnotations">
            <summary>
            Enlists the literal annotations which are assigned to the lens property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelLens.DataAnnotationsAsync">
            <summary>
            Asynchronously enlists the literal annotations which are assigned to the lens property
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelMetadata">
            <summary>
            RDFOntologyPropertyModelMetadata represents a collector for relations describing ontology properties.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelMetadata.SubPropertyOf">
            <summary>
            "rdfs:subPropertyOf" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelMetadata.EquivalentProperty">
            <summary>
            "owl:equivalentProperty" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelMetadata.InverseOf">
            <summary>
            "owl:inverseOf" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelMetadata.PropertyDisjointWith">
            <summary>
            "owl:propertyDisjointWith" relations [OWL2]
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelMetadata.PropertyChainAxiom">
            <summary>
            "owl:propertyChainAxiom" relations [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyPropertyModelMetadata.#ctor">
            <summary>
            Default-ctor to build an empty ontology property model metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyModel">
            <summary>
            RDFOntologyModel represents the model component (T-BOX) of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyModel.ClassModel">
            <summary>
            Submodel containing the ontology classes
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyModel.PropertyModel">
            <summary>
            Submodel containing the ontology properties
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyModel.#ctor">
            <summary>
            Default-ctor to build an empty ontology model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyModel.IntersectWith(RDFSharp.Semantics.OWL.RDFOntologyModel)">
            <summary>
            Builds a new intersection model from this model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyModel.UnionWith(RDFSharp.Semantics.OWL.RDFOntologyModel)">
            <summary>
            Builds a new union model from this model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyModel.DifferenceWith(RDFSharp.Semantics.OWL.RDFOntologyModel)">
            <summary>
            Builds a new difference model from this model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyModel.ToRDFGraph(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyModel.ToRDFGraphAsync(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously gts a graph representation of this ontology model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntology">
            <summary>
            RDFOntology represents an ontology definition.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntology.Model">
            <summary>
            Model (T-BOX) of the ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntology.Data">
            <summary>
            Data (A-BOX) of the ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntology.Annotations">
            <summary>
            Annotations describing the ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology with the given name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFOntologyModel,RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyAnnotations)">
            <summary>
            Default-ctor to build an ontology with the given name and the given components
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.AddStandardAnnotation(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Adds the given standard annotation to the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.AddCustomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Adds the given custom annotation to the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.RemoveStandardAnnotation(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Removes the given standard annotation from the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.RemoveCustomAnnotation(RDFSharp.Semantics.OWL.RDFOntologyAnnotationProperty,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Removes the given custom annotation from the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.IntersectWith(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Builds a new intersection ontology from this ontology and the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.UnionWith(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Builds a new union ontology from this ontology and the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.DifferenceWith(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Builds a new difference ontology from this ontology and the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.Merge(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Merges the given ontology into this one, returning this one enhanced
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets an ontology representation of the given graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.FromRDFGraphAsync(RDFSharp.Model.RDFGraph)">
            <summary>
            Asynchronously gets an ontology representation of the given graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.ToRDFGraph(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntology.ToRDFGraphAsync(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously gets a graph representation of this ontology, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFBASEOntology">
            <summary>
            RDFBASEOntology represents a partial OWL-DL ontology implementation of structural vocabularies (RDF/RDFS/OWL/XSD).
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFBASEOntology.Instance">
            <summary>
            Singleton instance of the BASE ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFBASEOntology.#cctor">
            <summary>
            Default-ctor to initialize the BASE ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyAnnotations">
            <summary>
            RDFOntologyAnnotations represents a collector for annotations describing ontology resources.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.VersionInfo">
            <summary>
            "owl:versionInfo" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.VersionIRI">
            <summary>
            "owl:versionIRI" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.Comment">
            <summary>
            "rdfs:comment" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.Label">
            <summary>
            "rdfs:label" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.SeeAlso">
            <summary>
            "rdfs:seeAlso" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.IsDefinedBy">
            <summary>
            "rdfs:isDefinedBy" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.PriorVersion">
            <summary>
            "owl:priorVersion" annotations (specific for ontologies)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.BackwardCompatibleWith">
            <summary>
            "owl:BackwardCompatibleWith" annotations (specific for ontologies)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.IncompatibleWith">
            <summary>
            "owl:IncompatibleWith" annotations (specific for ontologies)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.Imports">
            <summary>
            "owl:imports" annotations (specific for ontologies)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.CustomAnnotations">
            <summary>
            Custom annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.AxiomAnnotations">
            <summary>
            Axiom annotations [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyAnnotations.#ctor">
            <summary>
            Default-ctor to build an empty ontology annotations metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation">
            <summary>
            RDFOntologyAxiomAnnotation represents an owl:Axiom annotation describing an ontology assertion
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation.Property">
            <summary>
            Represents the property of the axiom annotation
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation.Value">
            <summary>
            Represents the value of the axiom annotation
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation.#ctor(RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build an axiom annotation with the given property and value
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyChecker">
            <summary>
            RDFOntologyChecker is responsible for implicit RDFS/OWL-DL validation of ontologies during modeling
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckReservedClass(RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given class is a reserved BASE ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckSubClassOfCompatibility(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given childclass can be set subclassof the given motherclass
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckEquivalentClassCompatibility(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given aclass can be set equivalentclassof the given bclass
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckDisjointWithCompatibility(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given aclass can be set disjointwith the given bclass
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckReservedProperty(RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Checks if the given property is a reserved BASE ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckSubPropertyOfCompatibility(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given childproperty can be set subPropertyOf the given motherproperty;<br/>
            Does not accept property chain definitions, for OWL2-DL decidability preservation.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckSubPropertyOfCompatibility(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty)">
            <summary>
            Checks if the given childproperty can be set subPropertyOf the given motherproperty
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckEquivalentPropertyCompatibility(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given aProperty can be set equivalentPropertyOf the given bProperty;<br/>
            Does not accept property chain definitions, for OWL2-DL decidability preservation.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckEquivalentPropertyCompatibility(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty)">
            <summary>
            Checks if the given aProperty can be set equivalentPropertyOf the given bProperty
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckPropertyDisjointWithCompatibility(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given aProperty can be set propertyDisjointWith the given bProperty [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckPropertyDisjointWithCompatibility(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty)">
            <summary>
            Checks if the given aProperty can be set propertyDisjointWith the given bProperty [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckInverseOfPropertyCompatibility(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given aProperty can be set inverseOf the given bProperty
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckClassTypeCompatibility(RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given class can be assigned as classtype of facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckSameAsCompatibility(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given afact can be set sameas the given bfact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckDifferentFromCompatibility(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given afact can be set differentfrom the given bfact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckTransitiveAssertionCompatibility(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given "aFact -> objectProperty -> bFact" has transitive assertions
            which would cause transitive cycles (unallowed concept in OWL-DL)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckAssertionCompatibility(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given "aFact -> objectProperty -> bFact" can be an assertion
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckAssertionCompatibility(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Checks if the given "aFact -> datatypeProperty -> ontologyLiteral" can be an assertion
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckNegativeAssertionCompatibility(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given "aFact -> objectProperty -> bFact" can be a negative assertion
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyChecker.CheckNegativeAssertionCompatibility(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Checks if the given "aFact -> datatypeProperty -> ontologyLiteral" can be a negative assertion
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyHelper">
            <summary>
            RDFOntologyHelper contains utility methods supporting RDFS/OWL-DL modeling, validation and reasoning
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsSubClassOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given aClass is subClass of the given bClass within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSubClassesOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Enlists the subClasses of the given class within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSubClassesOfInternalVisitor(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Subsumes the "rdfs:subClassOf" taxonomy to discover direct and indirect subClasses of the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsSuperClassOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given aClass is superClass of the given bClass within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSuperClassesOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Enlists the superClasses of the given class within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSuperClassesOfInternalVisitor(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Subsumes the "rdfs:subClassOf" taxonomy to discover direct and indirect superClasses of the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsEquivalentClassOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given aClass is equivalentClass of the given bClass within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetEquivalentClassesOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Enlists the equivalentClasses of the given class within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetEquivalentClassesOfInternal(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.OWL.RDFOntologyClass})">
            <summary>
            Subsumes the "owl:equivalentClass" taxonomy to discover direct and indirect equivalentClasses of the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsDisjointClassWith(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given aClass is disjointClass with the given bClass within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetDisjointClassesWith(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Enlists the disjointClasses with the given class within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetDisjointClassesWithInternal(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.OWL.RDFOntologyClass})">
            <summary>
            Subsumes the "owl:disjointWith" taxonomy to discover direct and indirect disjointClasses of the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetKeyValuesOf(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyClass,System.Boolean)">
            <summary>
            Gets the key values for each member of the given class having a complete (or partial, if allowed) key representation [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsDomainOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Checks if the given ontology class is domain of the given ontology property within the given ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetDomainOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Enlists the domain classes of the given property within the given ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsRangeOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Checks if the given ontology class is range of the given ontology property within the given ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetRangeOf(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Enlists the range classes of the given property within the given ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsLiteralCompatibleClass(RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given ontology class is compatible with 'rdfs:Literal' within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsSubPropertyOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Checks if the given aProperty is subProperty of the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSubPropertiesOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Enlists the sub properties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSubPropertiesOfInternalVisitor(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Subsumes the "rdfs:subPropertyOf" taxonomy to discover direct and indirect subProperties of the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsSuperPropertyOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Checks if the given aProperty is superProperty of the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSuperPropertiesOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Enlists the super properties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSuperPropertiesOfInternalVisitor(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Subsumes the "rdfs:subPropertyOf" taxonomy to discover direct and indirect superProperties of the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsEquivalentPropertyOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Checks if the given aProperty is equivalentProperty of the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetEquivalentPropertiesOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Enlists the equivalentProperties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetEquivalentPropertiesOfInternal(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.OWL.RDFOntologyProperty})">
            <summary>
            Subsumes the "owl:equivalentProperty" taxonomy to discover direct and indirect equivalentProperties of the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsPropertyDisjointWith(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Checks if the given aProperty is disjointProperty with the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetPropertiesDisjointWith(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty)">
            <summary>
            Enlists the disjointProperties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetPropertiesDisjointWithInternal(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyProperty,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.OWL.RDFOntologyProperty})">
            <summary>
            Subsumes the "owl:propertyDisjointWith" taxonomy to discover direct and indirect disjointProperties of the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsPropertyChain(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given ontProperty is a property chain within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsPropertyChainStepOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given aProperty is a property chain step of the given bProperty within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetPropertyChainAxiomsData(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Gets the assertions for each property chain declared in the given ontology [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetPropertyChainStepsOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyResource,System.Collections.Generic.HashSet{System.Int64})">
            <summary>
            Gets the direct and indirect properties composing the path of the given property chain [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsInversePropertyOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given aProperty is inverse property of the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetInversePropertiesOf(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Enlists the inverse properties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsSameFactAs(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given aFact is sameAs the given bFact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSameFactsAs(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Enlists the sameFacts of the given fact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetSameFactsAsInternal(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.OWL.RDFOntologyFact})">
            <summary>
            Subsumes the "owl:sameAs" taxonomy to discover direct and indirect samefacts of the given facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsDifferentFactFrom(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given aFact is differentFrom the given bFact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetDifferentFactsFrom(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Enlists the different facts of the given fact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetDifferentFactsFromInternal(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.OWL.RDFOntologyFact})">
            <summary>
            Subsumes the "owl:differentFrom" taxonomy to discover direct and indirect differentFacts of the given facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsTransitiveAssertionOf(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given "aFact -> transProp" assertion links to the given bFact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetTransitiveAssertionsOf(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty)">
            <summary>
            Enlists the given "aFact -> transOntProp" assertions within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetTransitiveAssertionsOfInternal(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.OWL.RDFOntologyFact})">
            <summary>
            Enlists the transitive assertions of the given fact and the given property within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsAssertion(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given "aFact -> objectProperty -> bFact" is an assertion within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsAssertion(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Checks if the given "aFact -> datatypeProperty -> ontologyLiteral" is an assertion within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsNegativeAssertion(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Checks if the given "aFact -> objectProperty -> bFact" is a negative assertion within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsNegativeAssertion(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Checks if the given "aFact -> datatypeProperty -> ontologyLiteral" is a negative assertion within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.CheckIsMemberOf(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Checks if the given fact is member of the given class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetMembersOf(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Enlists the facts which are members of the given class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetMembersOfClass(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Enlists the facts which are members of the given class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetMembersOfComposite(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyClass,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.OWL.RDFOntologyData})">
            <summary>
            Enlists the facts which are members of the given composite within the given ontology.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetMembersOfEnumerate(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyEnumerateClass)">
            <summary>
            Enlists the facts which are members of the given enumeration within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetMembersOfRestriction(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyRestriction)">
            <summary>
            Enlists the facts which are members of the given restriction within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetMembersOfLiteralCompatibleClass(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Enlists the literals which are members of the given literal-compatible class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetMembersOfNonLiteralCompatibleClass(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyClass)">
            <summary>
            Enlists the facts which are members of the given non literal-compatible class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetInferences(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Gets an ontology made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetInferences(RDFSharp.Semantics.OWL.RDFOntologyModel)">
            <summary>
            Gets an ontology model made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetInferences(RDFSharp.Semantics.OWL.RDFOntologyClassModel)">
            <summary>
            Gets an ontology class model made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetInferences(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel)">
            <summary>
            Gets an ontology property model made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.GetInferences(RDFSharp.Semantics.OWL.RDFOntologyData)">
            <summary>
            Gets an ontology data made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ClearInferences(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ClearInferences(RDFSharp.Semantics.OWL.RDFOntologyModel)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ClearInferences(RDFSharp.Semantics.OWL.RDFOntologyClassModel)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ClearInferences(RDFSharp.Semantics.OWL.RDFOntologyPropertyModel)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ClearInferences(RDFSharp.Semantics.OWL.RDFOntologyData)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ToRDFOntologyClass(RDFSharp.Model.RDFResource,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyClassNature)">
            <summary>
            Gets an ontology class of the given nature from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ToRDFOntologyProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology property from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ToRDFOntologyObjectProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology object property from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ToRDFOntologyDatatypeProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology datatype property from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ToRDFOntologyAnnotationProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology annotation property from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ToRDFOntologyFact(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology fact from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ToRDFOntologyLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets an ontology literal from the given RDF literal
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ApplyToOntology(RDFSharp.Query.RDFSelectQuery,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Applies the given SPARQL SELECT query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ApplyToOntologyAsync(RDFSharp.Query.RDFSelectQuery,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously applies the given SPARQL SELECT query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ApplyToOntology(RDFSharp.Query.RDFAskQuery,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Applies the given SPARQL ASK query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ApplyToOntologyAsync(RDFSharp.Query.RDFAskQuery,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously applies the given SPARQL ASK query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ApplyToOntology(RDFSharp.Query.RDFConstructQuery,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Applies the given SPARQL CONSTRUCT query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ApplyToOntologyAsync(RDFSharp.Query.RDFConstructQuery,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously applies the given SPARQL CONSTRUCT query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ApplyToOntology(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Applies the given SPARQL DESCRIBE query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ApplyToOntologyAsync(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously applies the given SPARQL DESCRIBE query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyHelper.ReifyToRDFGraph(RDFSharp.Semantics.OWL.RDFOntologyTaxonomy,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior,System.String,RDFSharp.Semantics.OWL.RDFOntologyClassModel,RDFSharp.Semantics.OWL.RDFOntologyPropertyModel,RDFSharp.Semantics.OWL.RDFOntologyData)">
            <summary>
            Gets a graph representation of the given taxonomy, exporting inferences according to the selected behavior [OWL2]
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyResource">
            <summary>
            RDFOntologyResource represents a generic resource definition within an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyResource.Value">
            <summary>
            Value of the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.ToString">
            <summary>
            Gets the string representation of the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsClass">
            <summary>
            Checks if this ontology resource represents an ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsDeprecatedClass">
            <summary>
            Checks if this ontology resource represents an ontology deprecated class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsRestrictionClass">
            <summary>
            Checks if this ontology resource represents an ontology restriction class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsCompositeClass">
            <summary>
            Checks if this ontology resource represents an ontology composite class (union/intersection/complement)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsEnumerateClass">
            <summary>
            Checks if this ontology resource represents an ontology enumerate class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsDataRangeClass">
            <summary>
            Checks if this ontology resource represents an ontology datarange class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsSimpleClass">
            <summary>
            CHecks if this ontology resource represents a simple ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsProperty">
            <summary>
            Checks if this ontology resource represents an ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsDeprecatedProperty">
            <summary>
            Checks if this ontology resource represents an ontology deprecated property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsFunctionalProperty">
            <summary>
            Checks if this ontology resource represents an ontology functional property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsSymmetricProperty">
            <summary>
            Checks if this ontology resource represents an ontology symmetric property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsAsymmetricProperty">
            <summary>
            Checks if this ontology resource represents an ontology asymmetric property [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsReflexiveProperty">
            <summary>
            Checks if this ontology resource represents an ontology reflexive property [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsIrreflexiveProperty">
            <summary>
            Checks if this ontology resource represents an ontology irreflexive property [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsTransitiveProperty">
            <summary>
            Checks if this ontology resource represents an ontology transitive property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsInverseFunctionalProperty">
            <summary>
            Checks if this ontology resource represents an ontology inverse functional property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsAnnotationProperty">
            <summary>
            Checks if this ontology resource represents an ontology annotation property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsDatatypeProperty">
            <summary>
            Checks if this ontology resource represents an ontology datatype property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsObjectProperty">
            <summary>
            Checks if this ontology resource represents an ontology object property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsFact">
            <summary>
            Checks if this ontology resource represents an ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsLiteral">
            <summary>
            Checks if this ontology resource represents an ontology literal
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyResource.IsOntology">
            <summary>
            Checks if this ontology resource represents an ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy">
            <summary>
            RDFOntologyTaxonomy represents a register for storing a generic taxonomy relationship.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.Category">
            <summary>
            Category of the ontology taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.EntriesCount">
            <summary>
            Count of the taxonomy entries
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.EntriesEnumerator">
            <summary>
            Gets the enumerator on the taxonomy entries for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.Entries">
            <summary>
            Dictionary of ontology entries composing the taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.EntriesLookup">
            <summary>
            Lookup for ontology entries composing the taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.AcceptDuplicates">
            <summary>
            Flag indicating that this taxonomy exceptionally accepts duplicate entries
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.#ctor(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyTaxonomyCategory,System.Boolean)">
            <summary>
            Default-ctor to build an empty ontology taxonomy of the given category
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#OWL#RDFOntologyTaxonomyEntry}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the taxonomy entries
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the taxonomy entries
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.AddEntry(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Adds the given taxonomy entry to the taxonomy.
            Returns true if the insertion has been made.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.RemoveEntry(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Removes the given taxonomy entry from the taxonomy.
            Returns true if the deletion has been made.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.ContainsEntry(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Checks if the taxonomy contains the given taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.SelectEntriesBySubject(RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Gets a taxonomy with the entries having the specified ontology resource as subject
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.SelectEntriesByPredicate(RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Gets a taxonomy with the entries having the specified ontology resource as predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.SelectEntriesByObject(RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Gets a taxonomy with the entries having the specified ontology resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.SelectEntryByID(System.Int64)">
            <summary>
            Gets the taxonomy entry having the specified identifier
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.IntersectWith(RDFSharp.Semantics.OWL.RDFOntologyTaxonomy)">
            <summary>
            Builds a new intersection taxonomy from this taxonomy and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.UnionWith(RDFSharp.Semantics.OWL.RDFOntologyTaxonomy)">
            <summary>
            Builds a new union taxonomy from this taxonomy and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomy.DifferenceWith(RDFSharp.Semantics.OWL.RDFOntologyTaxonomy)">
            <summary>
            Builds a new difference taxonomy from this taxonomy and a given one
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry">
            <summary>
            RDFOntologyTaxonomyEntry represents an entry of a RDFOntologyTaxonomy object.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.TaxonomyEntryID">
            <summary>
            Unique representation of the taxonomy entry
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.TaxonomySubject">
            <summary>
            Ontology resource acting as subject of the taxonomy relationship
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.TaxonomyPredicate">
            <summary>
            Ontology resource acting as predicate of the taxonomy relationship
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.TaxonomyObject">
            <summary>
            Ontology resource acting as object of the taxonomy relationship
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.InferenceType">
            <summary>
            Nature of the taxonomy entry as a semantic inference
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.#ctor(RDFSharp.Semantics.OWL.RDFOntologyResource,RDFSharp.Semantics.OWL.RDFOntologyResource,RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Default-ctor to build a taxonomy entry with the given subject, predicate and object resources
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.ToString">
            <summary>
            Gets the string representation of the taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.Equals(RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Performs the equality comparison between two taxonomy entries
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.SetInference(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceType)">
            <summary>
            Marks this taxonomy entry as a semantic inference, depending on the given type.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.IsInference">
            <summary>
            Checks if this taxonomy entry represents an inference
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry.ToRDFTriple">
            <summary>
            Get a triple representation of this taxonomy entry
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums">
            <summary>
            RDFSemanticsEnums represents a collector for all the enumerations used by the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation">
            <summary>
            RDFOntologyStandardAnnotation represents an enumeration for predefined ontology annotation properties
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.VersionInfo">
            <summary>
            owl:versionInfo
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.VersionIRI">
            <summary>
            owl:versionIRI
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment">
            <summary>
            rdfs:comment
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.Label">
            <summary>
            rdfs:label
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.SeeAlso">
            <summary>
            rdfs:seeAlso
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.IsDefinedBy">
            <summary>
            rdfs:isDefinedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.Imports">
            <summary>
            owl:imports
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.BackwardCompatibleWith">
            <summary>
            owl:BackwardCompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.IncompatibleWith">
            <summary>
            owl:IncompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardAnnotation.PriorVersion">
            <summary>
            owl:PriorVersion
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyValidatorEvidenceCategory">
            <summary>
            RDFOntologyValidatorEvidenceCategory represents an enumeration for possible categories of ontology validation evidence
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyValidatorEvidenceCategory.Warning">
            <summary>
            Specifications have not been violated: ontology may contain semantic inconsistencies
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyValidatorEvidenceCategory.Error">
            <summary>
            Specifications have been violated: ontology will contain semantic inconsistencies
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory">
            <summary>
            RDFOntologyReasonerEvidenceCategory represents an enumeration for possible categories of ontology reasoner evidence
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory.ClassModel">
            <summary>
            Semantic inference has been generated within the ontology class model
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory.PropertyModel">
            <summary>
            Semantic inference has been generated within the ontology property model
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory.Data">
            <summary>
            Semantic inference has been generated within the ontology data
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceType">
            <summary>
            RDFOntologyInferenceType represents an enumeration for possible types of a semantic inference
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceType.None">
            <summary>
            Not a semantic inference (reserved to RDFSharp)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceType.API">
            <summary>
            Semantic inference generated during ontology modeling (reserved to RDFSharp)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceType.Reasoner">
            <summary>
            Semantic inference generated during ontology reasoning
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior">
            <summary>
            RDFOntologyInferenceExportBehavior represents an enumeration for supported inference export behaviors
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.None">
            <summary>
            Does not export any semantic inferences
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.OnlyModel">
            <summary>
            Exports only semantic inferences of ontology model
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.OnlyData">
            <summary>
            Exports only semantic inferences of ontology data
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.ModelAndData">
            <summary>
            Exports both semantic inferences of ontology model and ontology data
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyTaxonomyCategory">
            <summary>
            RDFOntologyTaxonomyCategory represents an enumeration for supported types of taxonomy
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyTaxonomyCategory.Annotation">
            <summary>
            Annotation taxonomy
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyTaxonomyCategory.Model">
            <summary>
            Model taxonomy
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyTaxonomyCategory.Data">
            <summary>
            Data taxonomy
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyClassNature">
            <summary>
            RDFOntologyClassNature represents an enumeration for possible nature of an ontology class (RDFS/OWL)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyClassNature.RDFS">
            <summary>
            rdfs:Class
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyClassNature.OWL">
            <summary>
            owl:Class
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule">
            <summary>
            RDFOntologyStandardReasonerRule represents an enumeration for available standard RDFS/OWL-DL/OWL2 reasoner rules
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.SubClassTransitivity">
            <summary>
            SUBCLASS(C1,C2) ^ SUBCLASS(C2,C3) -> SUBCLASS(C1,C3)<br/>
            SUBCLASS(C1,C2) ^ EQUIVALENTCLASS(C2,C3) -> SUBCLASS(C1,C3)<br/>
            EQUIVALENTCLASS(C1,C2) ^ SUBCLASSOF(C2,C3) -> SUBCLASS(C1,C3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.EquivalentClassTransitivity">
            <summary>
            EQUIVALENTCLASS(C1,C2) ^ EQUIVALENTCLASS(C2,C3) -> EQUIVALENTCLASS(C1,C3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.DisjointWithEntailment">
            <summary>
            EQUIVALENTCLASS(C1,C2) ^ DISJOINTWITH(C2,C3) -> DISJOINTWITH(C1,C3)<br/>
            SUBCLASS(C1,C2) ^ DISJOINTWITH(C2,C3) -> DISJOINTWITH(C1,C3)<br/>
            DISJOINTWITH(C1,C2) ^ EQUIVALENTCLASS(C2,C3) -> DISJOINTWITH(C1,C3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.SubPropertyTransitivity">
            <summary>
            SUBPROPERTY(P1,P2) ^ SUBPROPERTY(P2,P3) -> SUBPROPERTY(P1,P3)<br/>
            SUBPROPERTY(P1,P2) ^ EQUIVALENTPROPERTY(P2,P3) -> SUBPROPERTY(P1,P3)<br/>
            EQUIVALENTPROPERTY(P1,P2) ^ SUBPROPERTY(P2,P3) -> SUBPROPERTY(P1,P3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.EquivalentPropertyTransitivity">
            <summary>
            EQUIVALENTPROPERTY(P1,P2) ^ EQUIVALENTPROPERTY(P2,P3) -> EQUIVALENTPROPERTY(P1,P3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.DomainEntailment">
            <summary>
            P(F1,F2) ^ DOMAIN(P,C) -> C(F1)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.RangeEntailment">
            <summary>
            P(F1,F2) ^ RANGE(P,C) -> C(F2)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.SameAsTransitivity">
            <summary>
            SAMEAS(F1,F2) ^ SAMEAS(F2,F3) -> SAMEAS(F1,F3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.DifferentFromEntailment">
            <summary>
            SAMEAS(F1,F2) ^ DIFFERENTFROM(F2,F3) -> DIFFERENTFROM(F1,F3)<br/>
            DIFFERENTFROM(F1,F2) ^ SAMEAS(F2,F3) -> DIFFERENTFROM(F1,F3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.ClassTypeEntailment">
            <summary>
            C1(F) ^ SUBCLASSOF(C1,C2) -> C2(F)<br/>
            C1(F) ^ EQUIVALENTCLASS(C1,C2) -> C2(F)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.NamedIndividualEntailment">
            <summary>
            C(F) -> NAMEDINDIVIDUAL(F)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.SymmetricPropertyEntailment">
            <summary>
            P(F1,F2) ^ SYMMETRICPROPERTY(P) -> P(F2,F1)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.TransitivePropertyEntailment">
            <summary>
            P(F1,F2) ^ P(F2,F3) ^ TRANSITIVEPROPERTY(P) -> P(F1,F3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.ReflexivePropertyEntailment">
            <summary>
            P(F1,F2) ^ REFLEXIVEPROPERTY(P) -> P(F1,F1)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.InverseOfEntailment">
            <summary>
            P1(F1,F2) ^ INVERSEOF(P1,P2) -> P2(F2,F1)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.PropertyEntailment">
            <summary>
            P1(F1,F2) ^ SUBPROPERTY(P1,P2) -> P2(F1,F2)<br/>
            P1(F1,F2) ^ EQUIVALENTPROPERTY(P1,P2) -> P2(F1,F2)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.SameAsEntailment">
            <summary>
            P(F1,F2) ^ SAMEAS(F1,F3) -> P(F3,F2)<br/>
            P(F1,F2) ^ SAMEAS(F2,F3) -> P(F1,F3)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.HasValueEntailment">
            <summary>
            C(F1) ^ SUBCLASS(C,R) ^ RESTRICTION(R) ^ ONPROPERTY(R,P) ^ HASVALUE(R,F2) -> P(F1,F2)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.HasSelfEntailment">
            <summary>
            C(F) ^ SUBCLASS(C,R) ^ RESTRICTION(R) ^ ONPROPERTY(R,P) ^ HASSELF(R,"TRUE") -> P(F,F)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.HasKeyEntailment">
            <summary>
            HASKEY(C,P) ^ C(F1) ^ C(F2) ^ P(F1,"K") ^ P(F2,"K") -> SAMEAS(F1,F2)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule.PropertyChainEntailment">
            <summary>
            PROPERTYCHAINAXIOM(PCA) ^ MEMBER(PCA,P1) ^ MEMBER(PCA,P2) ^ P1(F1,X) ^ P2(X,F2) => PCA(F1,F2)
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEvents">
            <summary>
            RDFSemanticsEvents represents a collector for all the events generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="E:RDFSharp.Semantics.OWL.RDFSemanticsEvents.OnSemanticsInfo">
            <summary>
            Event representing an information message generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEvents.RDFSemanticsInfoEventHandler">
            <summary>
            Delegate to handle information events generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsEvents.RaiseSemanticsInfo(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Semantics.OWL.RDFSemanticsEvents.OnSemanticsWarning">
            <summary>
            Event representing a warning message generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsEvents.RDFSemanticsWarningEventHandler">
            <summary>
            Delegate to handle warning events generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsEvents.RaiseSemanticsWarning(System.String)">
            <summary>
            Internal invoker of the subscribed warning event handler
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsException">
            <summary>
            RDFSemanticsException represents an exception thrown during creation and execution of RDF semantics.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFSemanticsException
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFSemanticsException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFSemanticsException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFSemanticsException
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFSemanticsUtilities">
            <summary>
            RDFSemanticsUtilities is a collector of reusable utility methods for RDF ontology management.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets an ontology representation of the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.StartProcess(RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph}@)">
            <summary>
            Prefetches the context cache from the given RDF graph
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.InitializeOntology(RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph},RDFSharp.Semantics.OWL.RDFOntology@)">
            <summary>
            Parses the ontology definition from the given RDF graph
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.InitializePropertyModel(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Parses the property model definitions from the given RDF graph
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.InitializeClassModel(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Parses the class model definitions from the given RDF graph
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.InitializeData(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Parses the data definitions from the given RDF graph
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizeRestrictions(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the definition of the ontology restrictions previously detected
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizeEnumeratesAndDataRanges(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the definition of the ontology enumerate/datarange classes previously detected
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizePropertyModel(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the property model definitions
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizeClassModel(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the class model definitions
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizeData(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the data definitions
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizeOntologyAnnotations(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the ontology annotations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizeClassModelAnnotations(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the class model annotations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizePropertyModelAnnotations(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the property model annotations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizeDataAnnotations(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the data annotations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.FinalizeAxiomAnnotations(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Model.RDFGraph,System.Collections.Generic.Dictionary{System.String,RDFSharp.Model.RDFGraph})">
            <summary>
            Finalizes the axiom annotations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.EndProcess(RDFSharp.Semantics.OWL.RDFOntology@)">
            <summary>
            Ends the graph->ontology process
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFSemanticsUtilities.ToRDFGraph(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of the given ontology, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleClassAtom">
            <summary>
            RDFOntologyReasonerRuleClassAtom represents an atom inferring instances of a given ontology class 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleClassAtom.#ctor(RDFSharp.Semantics.OWL.RDFOntologyClass,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a class atom with the given class and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleClassAtom.EvaluateOnAntecedent(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleClassAtom.EvaluateOnConsequent(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an consequent
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDataPropertyAtom">
            <summary>
            RDFOntologyReasonerRuleDataPropertyAtom represents an atom inferring assertions relating ontology facts to literals
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDataPropertyAtom.#ctor(RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a data property atom with the given property and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDataPropertyAtom.#ctor(RDFSharp.Semantics.OWL.RDFOntologyDatatypeProperty,RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build a data property atom with the given property and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDataPropertyAtom.EvaluateOnAntecedent(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDataPropertyAtom.EvaluateOnConsequent(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an consequent
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDifferentFromAtom">
            <summary>
            RDFOntologyReasonerRuleDifferentFromAtom represents an atom inferring owl:differentFrom assertions between ontology facts 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDifferentFromAtom.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build an owl:differentFrom atom with the given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDifferentFromAtom.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build an owl:differentFrom atom with the given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDifferentFromAtom.EvaluateOnAntecedent(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDifferentFromAtom.EvaluateOnConsequent(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an consequent
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleObjectPropertyAtom">
            <summary>
            RDFOntologyReasonerRuleObjectPropertyAtom represents an atom inferring assertions between ontology facts 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleObjectPropertyAtom.#ctor(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build an object property atom with the given property and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleObjectPropertyAtom.#ctor(RDFSharp.Semantics.OWL.RDFOntologyObjectProperty,RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build an object property atom with the given property and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleObjectPropertyAtom.EvaluateOnAntecedent(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleObjectPropertyAtom.EvaluateOnConsequent(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an consequent
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSameAsAtom">
            <summary>
            RDFOntologyReasonerRuleSameAsAtom represents an atom inferring owl:sameAs relations between ontology facts 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSameAsAtom.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build an owl:sameAs atom with the given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSameAsAtom.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build an owl:sameAs atom with the given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSameAsAtom.EvaluateOnAntecedent(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSameAsAtom.EvaluateOnConsequent(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an consequent
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEqualBuiltIn">
            <summary>
            RDFOntologyReasonerRuleEqualBuiltIn represents a built-in of type swrlb:equal
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEqualBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:equal)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:equal built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build a swrlb:equal built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build a swrlb:equal built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Internal-ctor to build a swrlb:equal built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanBuiltIn">
            <summary>
            RDFOntologyReasonerRuleGreaterThanBuiltIn represents a built-in of type swrlb:greaterThan
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:greaterThan)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:greaterThan built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build a swrlb:greaterThan built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build a swrlb:greaterThan built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Internal-ctor to build a swrlb:greaterThan built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanOrEqualBuiltIn">
            <summary>
            RDFOntologyReasonerRuleGreaterThanOrEqualBuiltIn represents a built-in of type swrlb:greaterThanOrEqual
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanOrEqualBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:greaterThanOrEqual)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanOrEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:greaterThanOrEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanOrEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build a swrlb:greaterThanOrEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanOrEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build a swrlb:greaterThanOrEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleGreaterThanOrEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Internal-ctor to build a swrlb:greaterThanOrEqual built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessThanBuiltIn">
            <summary>
            RDFOntologyReasonerRuleLessThanBuiltIn represents a built-in of type swrlb:lessThan
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessThanBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:lessThan)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:lessThan built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build a swrlb:lessThan built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build a swrlb:lessThan built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Internal-ctor to build a swrlb:lessThan built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessOrEqualThanBuiltIn">
            <summary>
            RDFOntologyReasonerRuleLessOrEqualThanBuiltIn represents a built-in of type swrlb:lessThanOrEqual
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessOrEqualThanBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:lessThanOrEqual)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessOrEqualThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:lessThanOrEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessOrEqualThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build a swrlb:lessThanOrEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessOrEqualThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build a swrlb:lessThanOrEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleLessOrEqualThanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Internal-ctor to build a swrlb:lessThanOrEqual built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleNotEqualBuiltIn">
            <summary>
            RDFOntologyReasonerRuleNotEqualBuiltIn represents a built-in of type swrlb:notEqual
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleNotEqualBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:notEqual)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleNotEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:notEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleNotEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Default-ctor to build a swrlb:notEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleNotEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build a swrlb:notEqual built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleNotEqualBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Internal-ctor to build a swrlb:notEqual built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAbsBuiltIn">
            <summary>
            RDFOntologyReasonerRuleAbsBuiltIn represents a math built-in of type swrlb:abs
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAbsBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:abs)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAbsBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:abs built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAbsBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAddBuiltIn">
            <summary>
            RDFOntologyReasonerRuleAddBuiltIn represents a math built-in of type swrlb:add
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAddBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:add)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAddBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,System.Double)">
            <summary>
            Default-ctor to build a swrlb:add built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleCeilingBuiltIn">
            <summary>
            RDFOntologyReasonerRuleCeilingBuiltIn represents a math built-in of type swrlb:ceiling
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleCeilingBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:ceiling)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleCeilingBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:ceiling built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleCeilingBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleCosBuiltIn">
            <summary>
            RDFOntologyReasonerRuleCosBuiltIn represents a math built-in of type swrlb:cos
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleCosBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:cos)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleCosBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:cos built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleCosBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDivideBuiltIn">
            <summary>
            RDFOntologyReasonerRuleDivideBuiltIn represents a math built-in of type swrlb:divide
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDivideBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:divide)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleDivideBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,System.Double)">
            <summary>
            Default-ctor to build a swrlb:divide built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleFloorBuiltIn">
            <summary>
            RDFOntologyReasonerRuleFloorBuiltIn represents a math built-in of type swrlb:floor
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleFloorBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:floor)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleFloorBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:floor built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleFloorBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMultiplyBuiltIn">
            <summary>
            RDFOntologyReasonerRuleMultiplyBuiltIn represents a built-in of type swrlb:multiply
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMultiplyBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:multiply)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMultiplyBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,System.Double)">
            <summary>
            Default-ctor to build a swrlb:multiply built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRulePowBuiltIn">
            <summary>
            RDFOntologyReasonerRulePowBuiltIn represents a math built-in of type swrlb:pow
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRulePowBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:pow)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRulePowBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,System.Double)">
            <summary>
            Default-ctor to build a swrlb:pow built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleRoundBuiltIn">
            <summary>
            RDFOntologyReasonerRuleRoundBuiltIn represents a math built-in of type swrlb:round
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleRoundBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:round)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleRoundBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:ceiling built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleRoundBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleRoundHalfToEvenBuiltIn">
            <summary>
            RDFOntologyReasonerRuleRoundHalfToEvenBuiltIn represents a math built-in of type swrlb:roundHalfToEven
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleRoundHalfToEvenBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:roundHalfToEven)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleRoundHalfToEvenBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:roundHalfToEven built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleRoundHalfToEvenBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSinBuiltIn">
            <summary>
            RDFOntologyReasonerRuleSinBuiltIn represents a math built-in of type swrlb:sin
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSinBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:sin)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSinBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:sin built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSinBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSubtractBuiltIn">
            <summary>
            RDFOntologyReasonerRuleSubtractBuiltIn represents a built-in of type swrlb:subtract
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSubtractBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:subtract)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleSubtractBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable,System.Double)">
            <summary>
            Default-ctor to build a swrlb:subtract built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleTanBuiltIn">
            <summary>
            RDFOntologyReasonerRuleTanBuiltIn represents a math built-in of type swrlb:tan
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleTanBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:tan)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleTanBuiltIn.#ctor(RDFSharp.Query.RDFVariable,RDFSharp.Query.RDFVariable)">
            <summary>
            Default-ctor to build a swrlb:tan built-in with given arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleTanBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleFilterBuiltIn">
            <summary>
            RDFOntologyReasonerRuleFilterBuiltIn represents a predefined kind of filter-based atom filtering inferences of a rule's antecedent
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleFilterBuiltIn.BuiltInFilter">
            <summary>
            Represents the built-in equivalent SPARQL filter
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleFilterBuiltIn.#ctor(RDFSharp.Semantics.OWL.RDFOntologyResource,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build a built-in with given predicate and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleFilterBuiltIn.Evaluate(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the built-in in the context of the given antecedent results
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMathBuiltIn">
            <summary>
            RDFOntologyReasonerRuleFilterBuiltIn represents a predefined kind of math-based atom filtering inferences of a rule's antecedent
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMathBuiltIn.MathValue">
            <summary>
            Represents the numeric value to be applied to the RightArgument for checking equality of the LeftArgument
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMathBuiltIn.#ctor(RDFSharp.Semantics.OWL.RDFOntologyResource,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember,System.Double)">
            <summary>
            Default-ctor to build a built-in with given predicate and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMathBuiltIn.ToString">
            <summary>
            Gives the string representation of the built-in
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMathBuiltIn.Evaluate(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the built-in in the context of the given antecedent results
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleContainsBuiltIn">
            <summary>
            RDFOntologyReasonerRuleContainsBuiltIn represents a built-in of type swrlb:contains
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleContainsBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:contains)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleContainsBuiltIn.#ctor(RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a swrlb:contains built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleContainsIgnoreCaseBuiltIn">
            <summary>
            RDFOntologyReasonerRuleContainsIgnoreCaseBuiltIn represents a built-in of type swrlb:containsIgnoreCase
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleContainsIgnoreCaseBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:containsIgnoreCase)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleContainsIgnoreCaseBuiltIn.#ctor(RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a swrlb:containsIgnoreCase built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEndsWithBuiltIn">
            <summary>
            RDFOntologyReasonerRuleEndsWithBuiltIn represents a built-in of type swrlb:endsWith
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEndsWithBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:endsWith)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleEndsWithBuiltIn.#ctor(RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a swrlb:endsWith built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMatchesBuiltIn">
            <summary>
            RDFOntologyReasonerRuleMatchesBuiltIn represents a built-in of type swrlb:matches
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMatchesBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:matches)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleMatchesBuiltIn.#ctor(RDFSharp.Query.RDFVariable,System.Text.RegularExpressions.Regex)">
            <summary>
            Default-ctor to build a swrlb:matches built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleStartsWithBuiltIn">
            <summary>
            RDFOntologyReasonerRuleStartsWithBuiltIn represents a built-in of type swrlb:startsWith
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleStartsWithBuiltIn.BuiltInUri">
            <summary>
            Represents the Uri of the built-in (swrlb:startsWith)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleStartsWithBuiltIn.#ctor(RDFSharp.Query.RDFVariable,System.String)">
            <summary>
            Default-ctor to build a swrlb:startsWith built-in with given arguments
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule">
            <summary>
            RDFOntologyReasonerRule represents a reasoner rule expressed in SWRL
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.RuleUri">
            <summary>
            Uri of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.RuleDescription">
            <summary>
            Description of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.Antecedent">
            <summary>
            Antecedent of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.Consequent">
            <summary>
            Consequent of the rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.#ctor(System.Uri,System.String,RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAntecedent,RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleConsequent)">
            <summary>
            Default-ctor to build a rule with given antecedent and consequent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.ToString">
            <summary>
            Gives the string representation of the rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.ApplyToOntology(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Applies the rule to the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.ApplyToOntology(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Applies the rule to the given ontology with the given options
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.ApplyToOntologyAsync(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Asynchronously applies the rule to the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRule.ApplyToOntologyAsync(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Asynchronously applies the rule to the given ontology with the given options
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAntecedent">
            <summary>
            RDFSWRLRuleAntecedent represents the antecedent of a rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAntecedent.Atoms">
            <summary>
            Atoms composing the antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAntecedent.#ctor">
            <summary>
            Default-ctor to build an empty antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAntecedent.ToString">
            <summary>
            Gives the string representation of the antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAntecedent.AddAtom(RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom)">
            <summary>
            Adds the given atom to the antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAntecedent.AddBuiltIn(RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleBuiltIn)">
            <summary>
            Adds the given built-in to the antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAntecedent.Evaluate(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the antecedent in the context of the given ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom">
            <summary>
            RDFOntologyReasonerRuleAtom represents an atom contained in a rule's antecedent/consequent
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom.IsBuiltIn">
            <summary>
            Checks if the atom represents a built-in
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom.Predicate">
            <summary>
            Represents the atom's predicate
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom.LeftArgument">
            <summary>
            Represents the left argument given to the atom's predicate
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom.RightArgument">
            <summary>
            Represents the right argument given to the atom's predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom.#ctor(RDFSharp.Semantics.OWL.RDFOntologyResource,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build an atom with given predicate and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom.ToString">
            <summary>
            Gives the string representation of the atom
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom.EvaluateOnAntecedent(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of an antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom.EvaluateOnConsequent(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the atom in the context of a consequent
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleBuiltIn">
            <summary>
            RDFOntologyReasonerRuleBuiltIn represents a predefined kind of atom filtering inferences of a rule's antecedent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleBuiltIn.#ctor(RDFSharp.Semantics.OWL.RDFOntologyResource,RDFSharp.Query.RDFPatternMember,RDFSharp.Query.RDFPatternMember)">
            <summary>
            Default-ctor to build a built-in with given predicate and arguments
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleBuiltIn.Evaluate(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the built-in in the context of the given antecedent results
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleConsequent">
            <summary>
            RDFOntologyReasonerRuleConsequent represents the consequent of a rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleConsequent.Atoms">
            <summary>
            Atoms composing the consequent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleConsequent.#ctor">
            <summary>
            Default-ctor to build an empty consequent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleConsequent.ToString">
            <summary>
            Gives the string representation of the consequent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleConsequent.AddAtom(RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleAtom)">
            <summary>
            Adds the given atom to the consequent
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleConsequent.Evaluate(System.Data.DataTable,RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Evaluates the consequent in the context of the given antecedent results
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasoner">
            <summary>
            RDFOntologyReasoner represents a SWRL inference engine applied on a given ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasoner.StandardRules">
            <summary>
            List of standard rules applied by the reasoner
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasoner.CustomRules">
            <summary>
            List of custom rules applied by the reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasoner.#ctor">
            <summary>
            Default-ctor to build an empty ontology reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasoner.AddStandardRule(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyStandardReasonerRule)">
            <summary>
            Adds the given standard rule to the reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasoner.AddCustomRule(RDFSharp.Semantics.OWL.RDFOntologyReasonerRule)">
            <summary>
            Adds the given custom rule to the reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasoner.ApplyToOntology(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Applies the reasoner on the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasoner.ApplyToOntology(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Applies the reasoner on the given ontology with given options
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasoner.ApplyToOntologyAsync(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Asynchronously applies the reasoner on the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasoner.ApplyToOntologyAsync(RDFSharp.Semantics.OWL.RDFOntology,RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions)">
            <summary>
            Asynchronously applies the reasoner on the given ontology with the given options
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerEvidence">
            <summary>
            RDFOntologyReasonerEvidence represents an inference evidence generated during execution of a rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerEvidence.EvidenceCategory">
            <summary>
            Category of the evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerEvidence.EvidenceProvenance">
            <summary>
            Provenance rule of the evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerEvidence.EvidenceDestination">
            <summary>
            Destination taxonomy of the evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerEvidence.EvidenceContent">
            <summary>
            Content of the evidence
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerEvidence.#ctor(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory,System.String,System.String,RDFSharp.Semantics.OWL.RDFOntologyTaxonomyEntry)">
            <summary>
            Default-ctor to build an evidence with given category, provenance, destination and content
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerEvidence.ToRDFTriple">
            <summary>
            Gets a triple representation of this reasoner evidence
            </summary>
            <returns></returns>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions">
            <summary>
            RDFOntologyReasonerOptions represents a customization of the execution behavior of a reasoner
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions.EnforceTaxonomyProtection">
            <summary>
            Instructs the reasoner to execute additional real-time checks to protect ontology consistency, resulting in slower but safer inferences (DEFAULT: true)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerOptions.#ctor">
            <summary>
            Default-ctor to build options for execution of a reasoner
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport">
            <summary>
            RDFOntologyReasonerReport represents a detailed report of an ontology reasoner's activity.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.EvidencesCount">
            <summary>
            Counter of the evidences
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.EvidencesEnumerator">
            <summary>
            Gets an enumerator on the evidences for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.Evidences">
            <summary>
            Dictionary of evidences
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.SyncLock">
            <summary>
            SyncLock for evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.#ctor">
            <summary>
            Default-ctor to build an empty reasoner report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#OWL#RDFOntologyReasonerEvidence}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the reasoner report's evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the reasoner report's evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.AddEvidence(RDFSharp.Semantics.OWL.RDFOntologyReasonerEvidence)">
            <summary>
            Adds the given evidence to the reasoner report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.Merge(RDFSharp.Semantics.OWL.RDFOntologyReasonerReport)">
            <summary>
            Merges the evidences of the given report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.SelectEvidencesByCategory(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory)">
            <summary>
            Gets the evidences having the given category
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.SelectEvidencesByProvenance(System.String)">
            <summary>
            Gets the evidences having the given provenance rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.SelectEvidencesByDestination(System.String)">
            <summary>
            Gets the evidences having the given destination taxonomy
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.SelectEvidencesByContentSubject(RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Gets the evidences having the given content subject
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.SelectEvidencesByContentPredicate(RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Gets the evidences having the given content predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.SelectEvidencesByContentObject(RDFSharp.Semantics.OWL.RDFOntologyResource)">
            <summary>
            Gets the evidences having the given content object
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.ToRDFGraph">
            <summary>
            Gets a graph representation of this reasoner report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.ToRDFGraphAsync">
            <summary>
            Asynchronously gets a graph representation of this reasoner report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.JoinEvidences(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Joins the reasoner evidences of this report into the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerReport.JoinEvidencesAsync(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Asynchronously joins the reasoner evidences of this report into the given ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset">
            <summary>
            RDFOntologyReasonerRuleset implements a subset of RDFS/OWL-DL/OWL2 entailment rules
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.SubClassTransitivity(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            SUBCLASS(C1,C2) ^ SUBCLASS(C2,C3) -> SUBCLASS(C1,C3)<br/>
            SUBCLASS(C1,C2) ^ EQUIVALENTCLASS(C2,C3) -> SUBCLASS(C1,C3)<br/>
            EQUIVALENTCLASS(C1,C2) ^ SUBCLASSOF(C2,C3) -> SUBCLASS(C1,C3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.EquivalentClassTransitivity(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            EQUIVALENTCLASS(C1,C2) ^ EQUIVALENTCLASS(C2,C3) -> EQUIVALENTCLASS(C1,C3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.DisjointWithEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            EQUIVALENTCLASS(C1,C2) ^ DISJOINTWITH(C2,C3) -> DISJOINTWITH(C1,C3)<br/>
            SUBCLASS(C1,C2) ^ DISJOINTWITH(C2,C3) -> DISJOINTWITH(C1,C3)<br/>
            DISJOINTWITH(C1,C2) ^ EQUIVALENTCLASS(C2,C3) -> DISJOINTWITH(C1,C3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.SubPropertyTransitivity(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            SUBPROPERTY(P1,P2) ^ SUBPROPERTY(P2,P3) -> SUBPROPERTY(P1,P3)<br/>
            SUBPROPERTY(P1,P2) ^ EQUIVALENTPROPERTY(P2,P3) -> SUBPROPERTY(P1,P3)<br/>
            EQUIVALENTPROPERTY(P1,P2) ^ SUBPROPERTY(P2,P3) -> SUBPROPERTY(P1,P3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.EquivalentPropertyTransitivity(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            EQUIVALENTPROPERTY(P1,P2) ^ EQUIVALENTPROPERTY(P2,P3) -> EQUIVALENTPROPERTY(P1,P3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.DomainEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            P(F1,F2) ^ DOMAIN(P,C) -> C(F1)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.RangeEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            P(F1,F2) ^ RANGE(P,C) -> C(F2)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.SameAsTransitivity(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            SAMEAS(F1,F2) ^ SAMEAS(F2,F3) -> SAMEAS(F1,F3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.DifferentFromEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            SAMEAS(F1,F2) ^ DIFFERENTFROM(F2,F3) -> DIFFERENTFROM(F1,F3)<br/>
            DIFFERENTFROM(F1,F2) ^ SAMEAS(F2,F3) -> DIFFERENTFROM(F1,F3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.ClassTypeEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            C1(F) ^ SUBCLASSOF(C1,C2) -> C2(F)<br/>
            C1(F) ^ EQUIVALENTCLASS(C1,C2) -> C2(F)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.NamedIndividualEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            C(F) -> NAMEDINDIVIDUAL(F)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.SymmetricPropertyEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            P(F1,F2) ^ SYMMETRICPROPERTY(P) -> P(F2,F1)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.TransitivePropertyEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            P(F1,F2) ^ P(F2,F3) ^ TRANSITIVEPROPERTY(P) -> P(F1,F3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.ReflexivePropertyEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            P(F1,F2) ^ REFLEXIVEPROPERTY(P) -> P(F1,F1)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.InverseOfEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            P1(F1,F2) ^ INVERSE(P1,P2) -> P2(F2,F1)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.PropertyEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            P1(F1,F2) ^ SUBPROPERTY(P1,P2) -> P2(F1,F2)<br/>
            P1(F1,F2) ^ EQUIVALENTPROPERTY(P1,P2) -> P2(F1,F2)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.SameAsEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            P(F1,F2) ^ SAMEAS(F1,F3) -> P(F3,F2)<br/>
            P(F1,F2) ^ SAMEAS(F2,F3) -> P(F1,F3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.HasValueEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            C(F1) ^ SUBCLASS(C,R) ^ RESTRICTION(R) ^ ONPROPERTY(R,P) ^ HASVALUE(R,F2) -> P(F1,F2)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.HasSelfEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            C(F) ^ SUBCLASS(C,R) ^ RESTRICTION(R) ^ ONPROPERTY(R,P) ^ HASSELF(R,"TRUE") -> P(F,F)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.HasKeyEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            HASKEY(C,P) ^ C(F1) ^ C(F2) ^ P(F1,"K") ^ P(F2,"K") -> SAMEAS(F1,F2)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyReasonerRuleset.PropertyChainEntailment(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            PROPERTYCHAINAXIOM(PCA) ^ MEMBER(PCA,P1) ^ MEMBER(PCA,P2) ^ P1(F1,X) ^ P2(X,F2) -> PCA(F1,F2)
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyValidator">
            <summary>
            RDFOntologyValidator analyzes a given ontology through a set of RDFS/OWL-DL rules
            in order to find error and inconsistency evidences affecting its model and data.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidator.Rules">
            <summary>
            List of rules applied by the ontology validator
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidator.#cctor">
            <summary>
            Static-ctor to build an ontology validator
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidator.Validate(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validates the given ontology against a set of RDFS/OWL-DL rules, detecting errors and inconsistencies affecting its model and data.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidator.ValidateAsync(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Asynchronously validates the given ontology against a set of RDFS/OWL-DL rules, detecting errors and inconsistencies affecting its model and data.
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyValidatorEvidence">
            <summary>
            RDFOntologyValidatorEvidence represents an evidence reported by a validation rule.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorEvidence.EvidenceCategory">
            <summary>
            Category of this evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorEvidence.EvidenceProvenance">
            <summary>
            Rule which has reported this evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorEvidence.EvidenceMessage">
            <summary>
            Message of the evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorEvidence.EvidenceSuggestion">
            <summary>
            Proposed action for solving or mitigating the evidence
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorEvidence.#ctor(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyValidatorEvidenceCategory,System.String,System.String,System.String)">
            <summary>
            Default-ctor to build an evidence with given category, provenance, message and suggestion
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport">
            <summary>
            RDFOntologyValidatorReport represents a detailed report of an ontology analysis.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.EvidencesCount">
            <summary>
            Counter of the evidences
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.EvidencesEnumerator">
            <summary>
            Gets an enumerator on the evidences for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.Evidences">
            <summary>
            List of evidences
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.SyncLock">
            <summary>
            SyncLock for evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.#ctor">
            <summary>
            Default-ctor to build an empty report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#OWL#RDFOntologyValidatorEvidence}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the validation report's evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the validation report's evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.AddEvidence(RDFSharp.Semantics.OWL.RDFOntologyValidatorEvidence)">
            <summary>
            Adds the given evidence to the validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.MergeEvidences(RDFSharp.Semantics.OWL.RDFOntologyValidatorReport)">
            <summary>
            Merges the evidences of the given report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.SelectWarnings">
            <summary>
            Gets the warning evidences from the validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.SelectWarningsByRule(System.String)">
            <summary>
            Gets the warning evidences of the given validation rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.SelectErrors">
            <summary>
            Gets the error evidences from the validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorReport.SelectErrorsByRule(System.String)">
            <summary>
            Gets the error evidences of the given validation rule
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyValidatorRule">
            <summary>
            RDFOntologyValidatorRule represents a rule which analyzes a specific syntactic/semantic aspect of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorRule.RuleName">
            <summary>
            Name of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorRule.RuleDescription">
            <summary>
            Description of the rule
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyValidatorRule.ValidationRuleDelegate">
            <summary>
            Delegate for the function which will be executed as body of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.OWL.RDFOntologyValidatorRule.ExecuteRule">
            <summary>
            Function which will be executed as body of the rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRule.#ctor(System.String,System.String,RDFSharp.Semantics.OWL.RDFOntologyValidatorRule.ValidationRuleDelegate)">
            <summary>
            Default-ctor to build an empty validation rule with given name, description and delegate
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset">
            <summary>
            RDFOntologyValidatorRuleset implements a subset of RDFS/OWL-DL/OWL2 validation rules
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.Vocabulary_Disjointness(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for disjointness of vocabulary of classes, properties and facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.Vocabulary_Declaration(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for declaration of classes, properties and facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.Domain_Range(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of rdfs:domain and rdfs:range axioms
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.InverseOf(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:inverseOf axioms
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.SymmetricProperty(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:SymmetricProperty axioms
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.AsymmetricProperty(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:AsymmetricProperty axioms [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.IrreflexiveProperty(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:IrreflexiveProperty axioms [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.PropertyDisjoint(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:propertyDisjointWith axioms [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.NegativeAssertions(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:NegativePropertyAssertion axioms [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.HasKey(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:hasKey axioms [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.PropertyChainAxiom(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:propertyChain axioms [OWL2]
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.ClassType(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for consistency of rdf:type axioms
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.GlobalCardinalityConstraint(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking consistency of global cardinality constraints
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.LocalCardinalityConstraint(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking consistency of local cardinality constraints
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.Deprecation(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for usage of deprecated classes and properties
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.OWL.RDFOntologyValidatorRuleset.UntypedRestrictions(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Validation rule checking for restrictions which haven't been specialized in any supported forms
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSCollection">
            <summary>
            RDFSKOSCollection represents an instance of skos:Collection within an instance of skos:ConceptScheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.ConceptsCount">
            <summary>
            Count of the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.CollectionsCount">
            <summary>
            Count of the collections of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.ConceptsEnumerator">
            <summary>
            Gets the enumerator on the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.CollectionsEnumerator">
            <summary>
            Gets the enumerator on the collections of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.Concepts">
            <summary>
            Dictionary of concepts contained in the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.Collections">
            <summary>
            Dictionary of collections contained in the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a skos:Collection with the given name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.AddConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds the given concept to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.AddCollection(RDFSharp.Semantics.SKOS.RDFSKOSCollection)">
            <summary>
            Adds the given collection to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.RemoveConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Removes the given concept from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.RemoveCollection(RDFSharp.Semantics.SKOS.RDFSKOSCollection)">
            <summary>
            Removes the given collection from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.SelectConcept(System.String)">
            <summary>
            Selects the concept represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.SelectCollection(System.String)">
            <summary>
            Selects the collection represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.GetMembers">
            <summary>
            Gets the complete list of concepts contained in the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.ToRDFGraph(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this collection, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.ToRDFOntologyData">
            <summary>
            Gets an ontology data representation of this collection
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSConcept">
            <summary>
            RDFSKOSConcept represents an instance of skos:Concept within an instance of skos:ConceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConcept.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a skos:Concept with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme">
            <summary>
            RDFSKOSConceptScheme represents an instance of skos:ConceptScheme within an ontology data.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ConceptsCount">
            <summary>
            Count of the concepts composing the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.CollectionsCount">
            <summary>
            Count of the collections composing the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.OrderedCollectionsCount">
            <summary>
            Count of the ordered collections composing the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.LabelsCount">
            <summary>
            Count of the labels composing the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ConceptsEnumerator">
            <summary>
            Gets the enumerator on the concepts of the scheme for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.CollectionsEnumerator">
            <summary>
            Gets the enumerator on the collections of the scheme for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.OrderedCollectionsEnumerator">
            <summary>
            Gets the enumerator on the ordered collections of the scheme for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.LabelsEnumerator">
            <summary>
            Gets the enumerator on the labels of the scheme for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Annotations">
            <summary>
            Annotations describing concepts of the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Relations">
            <summary>
            Relations describing concepts of the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Concepts">
            <summary>
            Concepts contained in the scheme (encodes the 'skos:inScheme' relation)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Collections">
            <summary>
            Collections contained in the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.OrderedCollections">
            <summary>
            OrderedCollections contained in the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Labels">
            <summary>
            Labels contained in the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a conceptScheme with the given name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#SKOS#RDFSKOSConcept}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the scheme's concepts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the scheme's concepts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.AddConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds the given concept to the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.AddCollection(RDFSharp.Semantics.SKOS.RDFSKOSCollection)">
            <summary>
            Adds the given collection to the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.AddOrderedCollection(RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection)">
            <summary>
            Adds the given ordered collection to the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.AddLabel(RDFSharp.Semantics.SKOS.RDFSKOSLabel)">
            <summary>
            Adds the given label to the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.RemoveConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Removes the given concept from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.RemoveCollection(RDFSharp.Semantics.SKOS.RDFSKOSCollection)">
            <summary>
            Removes the given collection from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.RemoveOrderedCollection(RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection)">
            <summary>
            Removes the given ordered collection from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.RemoveLabel(RDFSharp.Semantics.SKOS.RDFSKOSLabel)">
            <summary>
            Removes the given label from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.SelectConcept(System.String)">
            <summary>
            Selects the concept represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.SelectCollection(System.String)">
            <summary>
            Selects the collection represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.SelectOrderedCollection(System.String)">
            <summary>
            Selects the ordered collection represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.SelectLabel(System.String)">
            <summary>
            Selects the label represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.IntersectWith(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme)">
            <summary>
            Builds a new intersection scheme from this scheme and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.UnionWith(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme)">
            <summary>
            Builds a new union scheme from this scheme and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.DifferenceWith(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme)">
            <summary>
            Builds a new difference scheme from this scheme and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ToRDFGraph(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this scheme, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ToRDFGraphAsync(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Asynchronously gets a graph representation of this scheme, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ToRDFOntologyData">
            <summary>
            Gets an ontology data representation of this scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ToRDFOntologyDataAsync">
            <summary>
            Asynchronously gets an ontology data representation of this scheme
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens">
            <summary>
            RDFSKOSConceptSchemeLens represents a magnifying glass on the knowledge available for a concept within a scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.Concept">
            <summary>
            Concept being observed by the scheme lens
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.Scheme">
            <summary>
            Scheme being observed by the scheme lens
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.#ctor(RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme)">
            <summary>
            Builds a scheme lens for the given concept on the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.BroaderConcepts(System.Boolean)">
            <summary>
            Enlists the concepts which are directly (or indirectly, if inference is requested) broader to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.BroaderConceptsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the concepts which are directly (or indirectly, if inference is requested) broader to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.BroadMatchConcepts(System.Boolean)">
            <summary>
            Enlists the concepts which are directly (or indirectly, if inference is requested) broad match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.BroadMatchConceptsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the concepts which are directly (or indirectly, if inference is requested) broad match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.NarrowerConcepts(System.Boolean)">
            <summary>
            Enlists the concepts which are directly (or indirectly, if inference is requested) narrower to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.NarrowerConceptsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the concepts which are directly (or indirectly, if inference is requested) narrower to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.NarrowMatchConcepts(System.Boolean)">
            <summary>
            Enlists the concepts which are directly (or indirectly, if inference is requested) narrow match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.NarrowMatchConceptsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the concepts which are directly (or indirectly, if inference is requested) narrow match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.CloseMatchConcepts(System.Boolean)">
            <summary>
            Enlists the concepts which are directly (or indirectly, if inference is requested) close match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.CloseMatchConceptsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the concepts which are directly (or indirectly, if inference is requested) close match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.ExactMatchConcepts(System.Boolean)">
            <summary>
            Enlists the concepts which are directly (or indirectly, if inference is requested) exact match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.ExactMatchConceptsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the concepts which are directly (or indirectly, if inference is requested) exact match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.RelatedConcepts(System.Boolean)">
            <summary>
            Enlists the concepts which are directly (or indirectly, if inference is requested) related to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.RelatedConceptsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the concepts which are directly (or indirectly, if inference is requested) related to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.RelatedMatchConcepts(System.Boolean)">
            <summary>
            Enlists the concepts which are directly (or indirectly, if inference is requested) related match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.RelatedMatchConceptsAsync(System.Boolean)">
            <summary>
            Asynchronously enlists the concepts which are directly (or indirectly, if inference is requested) related match to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.MappingRelationConcepts">
            <summary>
            Enlists the concepts which are mapping relation to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.MappingRelationConceptsAsync">
            <summary>
            Asynchronously enlists the concepts which are mapping relation to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.SemanticRelationConcepts">
            <summary>
            Enlists the concepts which are semantic relation to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.SemanticRelationConceptsAsync">
            <summary>
            Asynchronously enlists the concepts which are semantic relation to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.Notations">
            <summary>
            Enlists the literal notations of the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.NotationsAsync">
            <summary>
            Asynchronously enlists the literal notations of the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.IsTopConcept">
            <summary>
            Checks if the lens concept is the top concept of the lens scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.IsTopConceptAsync">
            <summary>
            Asynchronously checks if the lens concept is the top concept of the lens scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.LabelRelations">
            <summary>
            Enlists the label relations which are assigned to the lens concept (SKOS-XL)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.LabelRelationsAsync">
            <summary>
            Asynchronously enlists the label relations which are assigned to the lens concept (SKOS-XL)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.LabelAnnotations">
            <summary>
            Enlists the label annotations which are assigned to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.LabelAnnotationsAsync">
            <summary>
            Asynchronously enlists the label annotations which are assigned to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.DocumentationAnnotations">
            <summary>
            Enlists the documentation annotations which are assigned to the lens concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptSchemeLens.DocumentationAnnotationsAsync">
            <summary>
            Asynchronously enlists the documentation annotations which are assigned to the lens concept
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSLabel">
            <summary>
            RDFSKOSLabel represents an instance of skosxl:Label within an instance of skos:ConceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSLabel.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a skosxl:Label with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection">
            <summary>
            RDFSKOSOrderedCollection represents an instance of skos:OrderedCollection within an instance of skos:ConceptScheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ConceptsCount">
            <summary>
            Count of the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ConceptsEnumerator">
            <summary>
            Gets the ordered enumerator on the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ConceptsSequentialCounter">
            <summary>
            Internal sequential counter of the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.Concepts">
            <summary>
            Dictionary of concepts contained in the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.Representative">
            <summary>
            Reification representative of the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a skos:OrderedCollection with the given name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.AddConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds the given concept to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.RemoveConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Removes the given concept from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.SelectConcept(System.String)">
            <summary>
            Selects the concept represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.GetMembers">
            <summary>
            Gets the ordered list of concepts contained in the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ToRDFGraph(RDFSharp.Semantics.OWL.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this collection, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ToRDFOntologyData">
            <summary>
            Gets an ontology data representation of this collection
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations">
            <summary>
            RDFSKOSAnnotations represents a collector for annotations describing SKOS concepts.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.PrefLabel">
            <summary>
            "skos:prefLabel" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.AltLabel">
            <summary>
            "skos:altLabel" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.HiddenLabel">
            <summary>
            "skos:hiddenLabel" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.Note">
            <summary>
            "skos:Note" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.ChangeNote">
            <summary>
            "skos:changeNote" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.EditorialNote">
            <summary>
            "skos:editorialNote" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.HistoryNote">
            <summary>
            "skos:historyNote" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.ScopeNote">
            <summary>
            "skos:scopeNote" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.Definition">
            <summary>
            "skos:definition" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.Example">
            <summary>
            "skos:example" annotations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.#ctor">
            <summary>
            Default-ctor to build an empty ontology annotations metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSChecker">
            <summary>
            RDFSKOSChecker is responsible for implicit SKOS validation of ontologies during modeling
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckBroaderRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the skos:broader/skos:broaderTransitive/skos:broadMatch relation can be added to the given aConcept with the given bConcept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckNarrowerRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the skos:narrower/skos:narrowerTransitive/skos:narrowMatch relation can be added to the given aConcept with the given bConcept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckRelatedRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the skos:related/skos:relatedMatch relation can be added to the given aConcept with the given bConcept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckCloseOrExactMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the skos:closeMatch/skos:exactMatch relation can be added to the given aConcept with the given bConcept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckPrefLabel(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Checks if the skos:prefLabel/skosxl:prefLabel informations can be added to the given concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckAltLabel(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Checks if the skos:altLabel/skosxl:altLabel informations can be added to the given concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckHiddenLabel(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Checks if the skos:hiddenLabel/skosxl:hiddenLabel informations can be added to the given concept
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSHelper">
            <summary>
             RDFSKOSHelper contains utility methods supporting SKOS modeling and reasoning
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.InitializeSKOS(RDFSharp.Semantics.OWL.RDFOntology)">
            <summary>
            Initializes the given ontology with support for SKOS T-BOX and A-BOX
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddTopConceptRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds the given concept to the conceptScheme as top concept of the hierarchy
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddSemanticRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:semanticRelation' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddRelatedRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:related' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddBroaderRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:broader' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddBroaderTransitiveRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:broaderTransitive' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNarrowerRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:narrower' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNarrowerTransitiveRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:narrowerTransitive' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddMappingRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:mappingRelation' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddCloseMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:closeMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddExactMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:exactMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddBroadMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:broadMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNarrowMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:narrowMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddRelatedMatchAssertion(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:relatedMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNotationRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given notation to the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddPrefLabelRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given label as preferred label of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddAltLabelRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given label as alternative label of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddHiddenLabelRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given label as hidden label of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddLabelRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.SKOS.RDFSKOSLabel)">
            <summary>
            Adds a 'skosxl:labelRelation' relation between the given labels within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddLiteralFormAssertion(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal form of the given label within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddPrefLabelAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as preferred label annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddAltLabelAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as alternative label annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddHiddenLabelAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the "concept -> skos:hiddenLabel -> hiddenLabelLiteral" annotation to the concept scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:note' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddChangeNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:changeNote' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddEditorialNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:editorialNote' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddHistoryNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
             <summary>
            Adds the given literal as 'skos:historyNote' annotation of the given concept within the conceptScheme
             </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddScopeNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:scopeNote' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddDefinitionAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:definition' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddExampleAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.OWL.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:example' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasBroaderConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has broader/broaderTransitive concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetBroaderConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the broader/broaderTransitive concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetBroaderConceptsOfInternal(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.SKOS.RDFSKOSConcept})">
            <summary>
            Subsumes the "skos:broaderTransitive" taxonomy to discover direct and indirect broader concepts of the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasNarrowerConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has narrower/narrowerTransitive concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetNarrowerConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the narrower/narrowerTransitive concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetNarrowerConceptsOfInternal(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.SKOS.RDFSKOSConcept})">
            <summary>
            Subsumes the "skos:narrowerTransitive" taxonomy to discover direct and indirect narrower concepts of the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasRelatedConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has related concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetRelatedConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the related concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasBroadMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has broadMatch concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetBroadMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the broadMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasNarrowMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has narrowMatch concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetNarrowMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the narrowMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasRelatedMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has relatedMatch concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetRelatedMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the relatedMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasCloseMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept skos:closeMatch the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetCloseMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the skos:closeMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasExactMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept skos:exactMatch the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetExactMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the skos:exactMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetExactMatchConceptsOfInternal(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.SKOS.RDFSKOSConcept})">
            <summary>
            Subsumes the "skos:exactMatch" taxonomy to discover direct and indirect exactmatches of the given concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddMemberRelation(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "skosCollection -> skos:member -> skosMember" relation to the data (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddMemberListRelation(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyAxiomAnnotation)">
            <summary>
            Adds the "skosOrderedCollection -> skos:memberList -> skosMember" relation to the data (and links the given axiom annotation if provided)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.RemoveMemberRelation(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Removes the "skosCollection -> skos:member -> skosMember" relation to the data.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.RemoveMemberListRelation(RDFSharp.Semantics.OWL.RDFOntologyData,RDFSharp.Semantics.OWL.RDFOntologyFact,RDFSharp.Semantics.OWL.RDFOntologyFact)">
            <summary>
            Removes the "skosOrderedCollection -> skos:memberList -> skosMember" relation to the data.
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSOntology">
            <summary>
            RDFSKOSOntology represents an OWL-DL ontology implementation of W3C SKOS vocabulary
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOntology.Instance">
            <summary>
            Singleton instance of the SKOS ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOntology.#cctor">
            <summary>
            Default-ctor to initialize the SKOS ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSRelations">
            <summary>
            RDFSKOSRelations represents a collector for relations connecting skos concepts.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.TopConcept">
            <summary>
            "skos:hasTopConcept" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.Broader">
            <summary>
            "skos:broader" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.BroaderTransitive">
            <summary>
            "skos:broaderTransitive" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.BroadMatch">
            <summary>
            "skos:broadMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.Narrower">
            <summary>
            "skos:narrower" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.NarrowerTransitive">
            <summary>
            "skos:narrowerTransitive" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.NarrowMatch">
            <summary>
            "skos:narrowMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.Related">
            <summary>
            "skos:related" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.RelatedMatch">
            <summary>
            "skos:relatedMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.SemanticRelation">
            <summary>
            "skos:semanticRelation" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.MappingRelation">
            <summary>
            "skos:mappingRelation" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.CloseMatch">
            <summary>
            "skos:closeMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.ExactMatch">
            <summary>
            "skos:exactMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.Notation">
            <summary>
            "skos:Notation" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.PrefLabel">
            <summary>
            "skosxl:prefLabel" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.AltLabel">
            <summary>
            "skosxl:altLabel" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.HiddenLabel">
            <summary>
            "skosxl:hiddenLabel" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.LiteralForm">
            <summary>
            "skosxl:LiteralForm" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.LabelRelation">
            <summary>
            "skosxl:LabelRelation" relations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSRelations.#ctor">
            <summary>
            Default-ctor to build an empty relations metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFMemoryStore">
            <summary>
            RDFMemoryStore represents an in-memory RDF store engine.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.QuadruplesCount">
            <summary>
            Count of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.QuadruplesEnumerator">
            <summary>
            Gets the enumerator on the store's quadruples for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.StoreGUID">
            <summary>
            Identifier of the memory store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.StoreIndex">
            <summary>
            Index on the quadruples of the store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFMemoryStore.Quadruples">
            <summary>
            List of quadruples embedded into the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.#ctor">
            <summary>
            Default-ctor to build an empty memory store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.#ctor(System.Collections.Generic.List{RDFSharp.Store.RDFQuadruple})">
            <summary>
            List-based ctor to build a memory store with the given list of quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ToString">
            <summary>
            Gives the string representation of the Memory store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.Equals(RDFSharp.Store.RDFMemoryStore)">
            <summary>
            Performs the equality comparison between two memory stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.System#Collections#Generic#IEnumerable{RDFSharp#Store#RDFQuadruple}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the store's quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the store's quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.MergeGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Merges the given graph into the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.AddQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruple from the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Removes the quadruples with the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextSubject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextSubjectPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextSubjectObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextSubjectLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextPredicateObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByContextPredicateLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubjectPredicate(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubjectObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesBySubjectLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByPredicateObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.RemoveQuadruplesByPredicateLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ClearQuadruples">
            <summary>
            Clears the quadruples of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.ContainsQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Checks if the store contains the given quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.SelectQuadruples(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a store containing quadruples satisfying the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.IntersectWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new intersection store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.UnionWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new union store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.DifferenceWith(RDFSharp.Store.RDFStore)">
            <summary>
            Builds a new difference store from this store and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromFile(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.String)">
            <summary>
            Reads a memory store from a file of the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromFileAsync(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.String)">
            <summary>
            Asynchronously reads a memory store from a file of the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromStream(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Reads a memory store from a stream of the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromStreamAsync(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Asynchronously reads a memory store from a stream of the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromDataTable(System.Data.DataTable)">
            <summary>
            Reads a memory store from a datatable with "Context-Subject-Predicate-Object" columns.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromDataTableAsync(System.Data.DataTable)">
            <summary>
            Asynchronously reads a memory store from a datatable with "Context-Subject-Predicate-Object" columns.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromUri(System.Uri,System.Int32)">
            <summary>
            Reads a memory store by trying to dereference the given Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFMemoryStore.FromUriAsync(System.Uri,System.Int32)">
            <summary>
            Asynchronously reads a memory store by trying to dereference the given Uri
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFContext">
            <summary>
            RDFContext represents an object which can act as C-token of a pattern.
            It cannot start with "bnode:" because blank contexts are not supported.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFContext.Context">
            <summary>
            Uri representing the context of the pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor">
            <summary>
            Default-ctor to build a predefined context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor(System.String)">
            <summary>
            String-based ctor to build a context from the given string
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.#ctor(System.Uri)">
            <summary>
            Uri-based ctor to build a context from the given Uri
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFContext.ToString">
            <summary>
            Gives the string representation of the store context
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFQuadruple">
            <summary>
            RDFQuadruple represents a quadruple in the RDF store.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.QuadrupleID">
            <summary>
            Unique representation of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.TripleFlavor">
            <summary>
            Flavor of the triple nested into the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Context">
            <summary>
            Member acting as context token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Subject">
            <summary>
            Member acting as subject token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Predicate">
            <summary>
            Member acting as predicate token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.Object">
            <summary>
            Member acting as object token of the quadruple
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFQuadruple.ReificationSubject">
            <summary>
            Subject of the quadruple's reification
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.#ctor(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            SPO-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.#ctor(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            SPL-flavor ctor
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.ToString">
            <summary>
            Gives the string representation of the quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.Equals(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Performs the equality comparison between two quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFQuadruple.ReifyQuadruple">
            <summary>
            Builds the reification store of the quadruple
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStore">
            <summary>
            RDFStore represents an abstract store in the RDF model.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStore.StoreID">
            <summary>
            Unique representation of the store
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStore.StoreType">
            <summary>
            Type of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToString">
            <summary>
            Gives the string representation of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.Equals(RDFSharp.Store.RDFStore)">
            <summary>
            Performs the equality comparison between two stores
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.MergeGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Merges the given graph into the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.AddQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the store, avoiding duplicate insertions
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruples from the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Removes the quadruples with the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given (non-blank) predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given resource as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given literal as object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextSubject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextSubjectPredicate(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextSubjectObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextSubjectLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextPredicateObject(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given context, predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByContextPredicateLiteral(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given context, predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubjectPredicate(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubjectObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given subject and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesBySubjectLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given subject and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByPredicateObject(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource)">
            <summary>
            Removes the quadruples with the given predicate and object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.RemoveQuadruplesByPredicateLiteral(RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Removes the quadruples with the given predicate and literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ClearQuadruples">
            <summary>
            Clears the quadruples of the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.UnreifyQuadruples">
            <summary>
            Compacts the reified quadruples by removing their 4 standard statements
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ContainsQuadruple(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Checks if the store contains the given quadruple
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectAllQuadruples">
            <summary>
            Gets a store containing all quadruples
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Gets a memory store containing quadruples with the specified context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Gets a memory store containing quadruples with the specified object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruplesByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a memory store containing quadruples with the specified literal
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.SelectQuadruples(RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets a store containing quadruples satisfying the given pattern
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ExtractGraphs">
            <summary>
            Gets a list containing the graphs saved in the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ExtractContexts">
            <summary>
            Gets a list containing the contexts saved in the store
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToFile(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.String)">
            <summary>
            Writes the store into a file in the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToFileAsync(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.String)">
            <summary>
            Asynchronously writes the store into a file in the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToStream(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Writes the store into a stream in the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToStreamAsync(RDFSharp.Store.RDFStoreEnums.RDFFormats,System.IO.Stream)">
            <summary>
            Asynchronously writes the store into a stream in the given RDF format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToDataTable">
            <summary>
            Writes the store into a datatable with "Context-Subject-Predicate-Object" columns
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStore.ToDataTableAsync">
            <summary>
            Asynchronously writes the store into a datatable with "Context-Subject-Predicate-Object" columns
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums">
            <summary>
            RDFStoreEnums represents a collector for all the enumerations used by the "RDFSharp.Store" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors">
            <summary>
            RDFStoreSQLErrors represents an enumeration for situations which can be found on a SQL-backing store
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors.NoErrors">
            <summary>
            Indicates that diagnostics on the selected database has passed
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors.InvalidDataSource">
            <summary>
            Indicates that diagnostics on the selected database has not passed because of a connection error
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFStoreSQLErrors.QuadruplesTableNotFound">
            <summary>
            Indicates that diagnostics on the selected database has not passed because it's not ready for use with RDFSharp
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreEnums.RDFFormats">
            <summary>
            RDFFormats represents an enumeration for supported RDF store serialization data formats.
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFFormats.NQuads">
            <summary>
            N-Quads serialization
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreEnums.RDFFormats.TriX">
            <summary>
            TriX serialization
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreException">
            <summary>
            RDFStoreException represents an exception thrown during manipulation of RDF data stores.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFStoreException
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFStoreException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFStoreException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFStoreException
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreIndex">
            <summary>
            RDFStoreIndex represents an automatically managed in-memory index structure for the quadruples of a store.
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Contexts">
            <summary>
            Index on the contexts of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Subjects">
            <summary>
            Index on the subjects of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Predicates">
            <summary>
            Index on the predicates of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Objects">
            <summary>
            Index on the objects of the store's quadruples
            </summary>
        </member>
        <member name="P:RDFSharp.Store.RDFStoreIndex.Literals">
            <summary>
            Index on the literals of the store's quadruples
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFStoreIndex.EmptyHashSet">
            <summary>
            Empty hashset to be returned in case of index miss
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.#ctor">
            <summary>
            Default-ctor for an empty store index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.AddIndex(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Adds the given quadruple to the CSPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.RemoveIndex(RDFSharp.Store.RDFQuadruple)">
            <summary>
            Removes the given quadruple from the CSPOL index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.ClearIndex">
            <summary>
            Clears the index
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByContext(RDFSharp.Store.RDFContext)">
            <summary>
            Selects the quadruples indexed by the given context
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexBySubject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given subject
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByPredicate(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByObject(RDFSharp.Model.RDFResource)">
            <summary>
            Selects the quadruples indexed by the given object
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreIndex.SelectIndexByLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the quadruples indexed by the given literal
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFStoreUtilities">
            <summary>
            RDFStoreUtilities is a collector of reusable utility methods for RDF store management
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreUtilities.ParseQuadruple(System.Data.IDataReader)">
            <summary>
            Parses the current quadruple of the data reader
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFStoreUtilities.SelectQuadruples(RDFSharp.Store.RDFMemoryStore,RDFSharp.Store.RDFContext,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFResource,RDFSharp.Model.RDFLiteral)">
            <summary>
            Selects the quadruples corresponding to the given pattern from the given store
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFNQuads">
            <summary>
            RDFNQuads is responsible for managing serialization to and from N-Quads data format.
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPBC">
            <summary>
            Regex to detect S->P->B->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPOC">
            <summary>
            Regex to detect S->P->O->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPLC_PLAIN">
            <summary>
            Regex to detect S->P->L(PLAIN)->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPLC_PLANG">
            <summary>
            Regex to detect S->P->L(PLAIN LANGUAGE)->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.SPLC_TLIT">
            <summary>
            Regex to detect S->P->B->L(TYPED) form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPBC">
            <summary>
            Regex to detect B->P->B->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPOC">
            <summary>
            Regex to detect B->P->O->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPLC_PLAIN">
            <summary>
            Regex to detect B->P->L(PLAIN)->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPLC_PLANG">
            <summary>
            Regex to detect B->P->L(PLAIN LANGUAGE)->C form of N-Quad
            </summary>
        </member>
        <member name="F:RDFSharp.Store.RDFNQuads.BPLC_TLIT">
            <summary>
            Regex to detect B->P->L(TYPED)->C form of N-Quad
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Serialize(RDFSharp.Store.RDFStore,System.String)">
            <summary>
            Serializes the given store to the given filepath using N-Quads data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Serialize(RDFSharp.Store.RDFStore,System.IO.Stream)">
            <summary>
            Serializes the given store to the given filepath using N-Quads data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Deserialize(System.String)">
            <summary>
            Deserializes the given N-Quads filepath to a memory store.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the given N-Quads stream to a memory store.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFNQuads.TokenizeNQuad(System.String)">
            <summary>
            Tries to tokenize the given N-Quad
            </summary>
        </member>
        <member name="T:RDFSharp.Store.RDFTriX">
            <summary>
            RDFTriX is responsible for managing serialization to and from TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFTriX.Serialize(RDFSharp.Store.RDFStore,System.String)">
            <summary>
            Serializes the given store to the given filepath using TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFTriX.Serialize(RDFSharp.Store.RDFStore,System.IO.Stream)">
            <summary>
            Serializes the given store to the given stream using TriX data format.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFTriX.Deserialize(System.String)">
            <summary>
            Deserializes the given TriX filepath to a memory store.
            </summary>
        </member>
        <member name="M:RDFSharp.Store.RDFTriX.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the given TriX stream to a memory store.
            </summary>
        </member>
    </members>
</doc>
